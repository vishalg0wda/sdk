/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  marketplacePatchV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItemId,
} from "../../funcs/marketplacePatchV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItemId.js";
import {
  PatchV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItemIdRequest$inboundSchema,
} from "../../models/patchv1installationsintegrationconfigurationidresourcesresourceidexperimentationitemsitemidop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    PatchV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItemIdRequest$inboundSchema,
};

export const tool$marketplacePatchV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItemId:
  ToolDefinition<typeof args> = {
    name:
      "marketplace_patch-v1-installations-integration-configuration-id-resources-resource-id-experimentation-items-item-id",
    description: `Patch an existing experimentation item

Patch an existing experimentation item`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await marketplacePatchV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationItemsItemId(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      return formatResult(void 0, apiCall);
    },
  };
