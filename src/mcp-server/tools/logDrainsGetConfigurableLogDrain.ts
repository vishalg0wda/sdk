/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { logDrainsGetConfigurableLogDrain } from "../../funcs/logDrainsGetConfigurableLogDrain.js";
import { GetConfigurableLogDrainRequest$inboundSchema } from "../../models/getconfigurablelogdrainop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: GetConfigurableLogDrainRequest$inboundSchema,
};

export const tool$logDrainsGetConfigurableLogDrain: ToolDefinition<
  typeof args
> = {
  name: "log-drains_get-configurable-log-drain",
  description: `Retrieves a Configurable Log Drain

Retrieves a Configurable Log Drain. This endpoint must be called with a team AccessToken (integration OAuth2 clients are not allowed). Only log drains owned by the authenticated team can be accessed.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await logDrainsGetConfigurableLogDrain(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
