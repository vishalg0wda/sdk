/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  marketplacePutV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationEdgeConfig,
} from "../../funcs/marketplacePutV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationEdgeConfig.js";
import {
  PutV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationEdgeConfigRequest$inboundSchema,
} from "../../models/putv1installationsintegrationconfigurationidresourcesresourceidexperimentationedgeconfigop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    PutV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationEdgeConfigRequest$inboundSchema,
};

export const tool$marketplacePutV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationEdgeConfig:
  ToolDefinition<typeof args> = {
    name:
      "marketplace_put-v1-installations-integration-configuration-id-resources-resource-id-experimentation-edge-config",
    description: `Push data into a user-provided Edge Config

When the user enabled Edge Config syncing, then this endpoint can be used by the partner to push their configuration data into the relevant Edge Config.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await marketplacePutV1InstallationsIntegrationConfigurationIdResourcesResourceIdExperimentationEdgeConfig(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
