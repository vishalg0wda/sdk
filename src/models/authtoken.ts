/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const ScopesType = {
  Team: "team",
} as const;
export type ScopesType = ClosedEnum<typeof ScopesType>;

export const AuthTokenScopesOrigin = {
  Saml: "saml",
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Email: "email",
  Manual: "manual",
  Passkey: "passkey",
  Otp: "otp",
  Sms: "sms",
  Invite: "invite",
} as const;
export type AuthTokenScopesOrigin = ClosedEnum<typeof AuthTokenScopesOrigin>;

/**
 * The access scopes granted to the token.
 */
export type Two = {
  type: ScopesType;
  teamId: string;
  origin: AuthTokenScopesOrigin;
  createdAt: number;
  expiresAt?: number | undefined;
};

export const AuthTokenScopesType = {
  User: "user",
} as const;
export type AuthTokenScopesType = ClosedEnum<typeof AuthTokenScopesType>;

/**
 * Possible multi-factor origins
 */
export const AuthTokenScopes1Origin = {
  Totp: "totp",
  Webauthn: "webauthn",
  RecoveryCode: "recovery-code",
} as const;
/**
 * Possible multi-factor origins
 */
export type AuthTokenScopes1Origin = ClosedEnum<typeof AuthTokenScopes1Origin>;

export type Sudo = {
  /**
   * Possible multi-factor origins
   */
  origin: AuthTokenScopes1Origin;
  expiresAt: number;
};

export const ScopesOrigin = {
  Saml: "saml",
  Github: "github",
  Gitlab: "gitlab",
  Bitbucket: "bitbucket",
  Email: "email",
  Manual: "manual",
  Passkey: "passkey",
  Otp: "otp",
  Sms: "sms",
  Invite: "invite",
} as const;
export type ScopesOrigin = ClosedEnum<typeof ScopesOrigin>;

/**
 * The access scopes granted to the token.
 */
export type One = {
  type: AuthTokenScopesType;
  sudo?: Sudo | undefined;
  origin: ScopesOrigin;
  createdAt: number;
  expiresAt?: number | undefined;
};

export type Scopes = One | Two;

/**
 * Authentication token metadata.
 */
export type AuthToken = {
  /**
   * The unique identifier of the token.
   */
  id: string;
  /**
   * The human-readable name of the token.
   */
  name: string;
  /**
   * The type of the token.
   */
  type: string;
  /**
   * The origin of how the token was created.
   */
  origin?: string | undefined;
  /**
   * The access scopes granted to the token.
   */
  scopes?: Array<One | Two> | undefined;
  /**
   * Timestamp (in milliseconds) of when the token expires.
   */
  expiresAt?: number | undefined;
  /**
   * Timestamp (in milliseconds) of when the token was most recently used.
   */
  activeAt: number;
  /**
   * Timestamp (in milliseconds) of when the token was created.
   */
  createdAt: number;
};

/** @internal */
export const ScopesType$inboundSchema: z.ZodNativeEnum<typeof ScopesType> = z
  .nativeEnum(ScopesType);

/** @internal */
export const ScopesType$outboundSchema: z.ZodNativeEnum<typeof ScopesType> =
  ScopesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScopesType$ {
  /** @deprecated use `ScopesType$inboundSchema` instead. */
  export const inboundSchema = ScopesType$inboundSchema;
  /** @deprecated use `ScopesType$outboundSchema` instead. */
  export const outboundSchema = ScopesType$outboundSchema;
}

/** @internal */
export const AuthTokenScopesOrigin$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenScopesOrigin
> = z.nativeEnum(AuthTokenScopesOrigin);

/** @internal */
export const AuthTokenScopesOrigin$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenScopesOrigin
> = AuthTokenScopesOrigin$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenScopesOrigin$ {
  /** @deprecated use `AuthTokenScopesOrigin$inboundSchema` instead. */
  export const inboundSchema = AuthTokenScopesOrigin$inboundSchema;
  /** @deprecated use `AuthTokenScopesOrigin$outboundSchema` instead. */
  export const outboundSchema = AuthTokenScopesOrigin$outboundSchema;
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
  .object({
    type: ScopesType$inboundSchema,
    teamId: z.string(),
    origin: AuthTokenScopesOrigin$inboundSchema,
    createdAt: z.number(),
    expiresAt: z.number().optional(),
  });

/** @internal */
export type Two$Outbound = {
  type: string;
  teamId: string;
  origin: string;
  createdAt: number;
  expiresAt?: number | undefined;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .object({
    type: ScopesType$outboundSchema,
    teamId: z.string(),
    origin: AuthTokenScopesOrigin$outboundSchema,
    createdAt: z.number(),
    expiresAt: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

export function twoToJSON(two: Two): string {
  return JSON.stringify(Two$outboundSchema.parse(two));
}

export function twoFromJSON(
  jsonString: string,
): SafeParseResult<Two, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two' from JSON`,
  );
}

/** @internal */
export const AuthTokenScopesType$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenScopesType
> = z.nativeEnum(AuthTokenScopesType);

/** @internal */
export const AuthTokenScopesType$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenScopesType
> = AuthTokenScopesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenScopesType$ {
  /** @deprecated use `AuthTokenScopesType$inboundSchema` instead. */
  export const inboundSchema = AuthTokenScopesType$inboundSchema;
  /** @deprecated use `AuthTokenScopesType$outboundSchema` instead. */
  export const outboundSchema = AuthTokenScopesType$outboundSchema;
}

/** @internal */
export const AuthTokenScopes1Origin$inboundSchema: z.ZodNativeEnum<
  typeof AuthTokenScopes1Origin
> = z.nativeEnum(AuthTokenScopes1Origin);

/** @internal */
export const AuthTokenScopes1Origin$outboundSchema: z.ZodNativeEnum<
  typeof AuthTokenScopes1Origin
> = AuthTokenScopes1Origin$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthTokenScopes1Origin$ {
  /** @deprecated use `AuthTokenScopes1Origin$inboundSchema` instead. */
  export const inboundSchema = AuthTokenScopes1Origin$inboundSchema;
  /** @deprecated use `AuthTokenScopes1Origin$outboundSchema` instead. */
  export const outboundSchema = AuthTokenScopes1Origin$outboundSchema;
}

/** @internal */
export const Sudo$inboundSchema: z.ZodType<Sudo, z.ZodTypeDef, unknown> = z
  .object({
    origin: AuthTokenScopes1Origin$inboundSchema,
    expiresAt: z.number(),
  });

/** @internal */
export type Sudo$Outbound = {
  origin: string;
  expiresAt: number;
};

/** @internal */
export const Sudo$outboundSchema: z.ZodType<Sudo$Outbound, z.ZodTypeDef, Sudo> =
  z.object({
    origin: AuthTokenScopes1Origin$outboundSchema,
    expiresAt: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sudo$ {
  /** @deprecated use `Sudo$inboundSchema` instead. */
  export const inboundSchema = Sudo$inboundSchema;
  /** @deprecated use `Sudo$outboundSchema` instead. */
  export const outboundSchema = Sudo$outboundSchema;
  /** @deprecated use `Sudo$Outbound` instead. */
  export type Outbound = Sudo$Outbound;
}

export function sudoToJSON(sudo: Sudo): string {
  return JSON.stringify(Sudo$outboundSchema.parse(sudo));
}

export function sudoFromJSON(
  jsonString: string,
): SafeParseResult<Sudo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sudo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sudo' from JSON`,
  );
}

/** @internal */
export const ScopesOrigin$inboundSchema: z.ZodNativeEnum<typeof ScopesOrigin> =
  z.nativeEnum(ScopesOrigin);

/** @internal */
export const ScopesOrigin$outboundSchema: z.ZodNativeEnum<typeof ScopesOrigin> =
  ScopesOrigin$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScopesOrigin$ {
  /** @deprecated use `ScopesOrigin$inboundSchema` instead. */
  export const inboundSchema = ScopesOrigin$inboundSchema;
  /** @deprecated use `ScopesOrigin$outboundSchema` instead. */
  export const outboundSchema = ScopesOrigin$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
  .object({
    type: AuthTokenScopesType$inboundSchema,
    sudo: z.lazy(() => Sudo$inboundSchema).optional(),
    origin: ScopesOrigin$inboundSchema,
    createdAt: z.number(),
    expiresAt: z.number().optional(),
  });

/** @internal */
export type One$Outbound = {
  type: string;
  sudo?: Sudo$Outbound | undefined;
  origin: string;
  createdAt: number;
  expiresAt?: number | undefined;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .object({
    type: AuthTokenScopesType$outboundSchema,
    sudo: z.lazy(() => Sudo$outboundSchema).optional(),
    origin: ScopesOrigin$outboundSchema,
    createdAt: z.number(),
    expiresAt: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const Scopes$inboundSchema: z.ZodType<Scopes, z.ZodTypeDef, unknown> = z
  .union([z.lazy(() => One$inboundSchema), z.lazy(() => Two$inboundSchema)]);

/** @internal */
export type Scopes$Outbound = One$Outbound | Two$Outbound;

/** @internal */
export const Scopes$outboundSchema: z.ZodType<
  Scopes$Outbound,
  z.ZodTypeDef,
  Scopes
> = z.union([
  z.lazy(() => One$outboundSchema),
  z.lazy(() => Two$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scopes$ {
  /** @deprecated use `Scopes$inboundSchema` instead. */
  export const inboundSchema = Scopes$inboundSchema;
  /** @deprecated use `Scopes$outboundSchema` instead. */
  export const outboundSchema = Scopes$outboundSchema;
  /** @deprecated use `Scopes$Outbound` instead. */
  export type Outbound = Scopes$Outbound;
}

export function scopesToJSON(scopes: Scopes): string {
  return JSON.stringify(Scopes$outboundSchema.parse(scopes));
}

export function scopesFromJSON(
  jsonString: string,
): SafeParseResult<Scopes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Scopes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Scopes' from JSON`,
  );
}

/** @internal */
export const AuthToken$inboundSchema: z.ZodType<
  AuthToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  origin: z.string().optional(),
  scopes: z.array(
    z.union([z.lazy(() => One$inboundSchema), z.lazy(() => Two$inboundSchema)]),
  ).optional(),
  expiresAt: z.number().optional(),
  activeAt: z.number(),
  createdAt: z.number(),
});

/** @internal */
export type AuthToken$Outbound = {
  id: string;
  name: string;
  type: string;
  origin?: string | undefined;
  scopes?: Array<One$Outbound | Two$Outbound> | undefined;
  expiresAt?: number | undefined;
  activeAt: number;
  createdAt: number;
};

/** @internal */
export const AuthToken$outboundSchema: z.ZodType<
  AuthToken$Outbound,
  z.ZodTypeDef,
  AuthToken
> = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  origin: z.string().optional(),
  scopes: z.array(
    z.union([
      z.lazy(() => One$outboundSchema),
      z.lazy(() => Two$outboundSchema),
    ]),
  ).optional(),
  expiresAt: z.number().optional(),
  activeAt: z.number(),
  createdAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthToken$ {
  /** @deprecated use `AuthToken$inboundSchema` instead. */
  export const inboundSchema = AuthToken$inboundSchema;
  /** @deprecated use `AuthToken$outboundSchema` instead. */
  export const outboundSchema = AuthToken$outboundSchema;
  /** @deprecated use `AuthToken$Outbound` instead. */
  export type Outbound = AuthToken$Outbound;
}

export function authTokenToJSON(authToken: AuthToken): string {
  return JSON.stringify(AuthToken$outboundSchema.parse(authToken));
}

export function authTokenFromJSON(
  jsonString: string,
): SafeParseResult<AuthToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthToken' from JSON`,
  );
}
