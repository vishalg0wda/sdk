/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetV1ExperimentationItemsRequest = {
  resourceId?: string | undefined;
};

/**
 * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
 */
export const GetV1ExperimentationItemsCategory = {
  Experiment: "experiment",
  Flag: "flag",
} as const;
/**
 * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
 */
export type GetV1ExperimentationItemsCategory = ClosedEnum<
  typeof GetV1ExperimentationItemsCategory
>;

export type GetV1ExperimentationItemsItems = {
  /**
   * The Vercel generated ID for this item Integrations should not receive this in API responses
   */
  id: string;
  slug: string;
  origin: string;
  /**
   * The ID the partner has for this item. Integrations should receive this as `id` in API responses
   */
  externalId: string;
  /**
   * The id of the integration installation on a team
   */
  integrationConfigurationId: string;
  /**
   * The flags collection ID
   */
  resourceId: string;
  /**
   * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
   */
  category?: GetV1ExperimentationItemsCategory | undefined;
  name?: string | undefined;
  description?: string | undefined;
  isArchived?: boolean | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
};

export type GetV1ExperimentationItemsResponseBody = {
  items: Array<GetV1ExperimentationItemsItems>;
};

/** @internal */
export const GetV1ExperimentationItemsRequest$inboundSchema: z.ZodType<
  GetV1ExperimentationItemsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string().optional(),
});

/** @internal */
export type GetV1ExperimentationItemsRequest$Outbound = {
  resourceId?: string | undefined;
};

/** @internal */
export const GetV1ExperimentationItemsRequest$outboundSchema: z.ZodType<
  GetV1ExperimentationItemsRequest$Outbound,
  z.ZodTypeDef,
  GetV1ExperimentationItemsRequest
> = z.object({
  resourceId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ExperimentationItemsRequest$ {
  /** @deprecated use `GetV1ExperimentationItemsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1ExperimentationItemsRequest$inboundSchema;
  /** @deprecated use `GetV1ExperimentationItemsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1ExperimentationItemsRequest$outboundSchema;
  /** @deprecated use `GetV1ExperimentationItemsRequest$Outbound` instead. */
  export type Outbound = GetV1ExperimentationItemsRequest$Outbound;
}

export function getV1ExperimentationItemsRequestToJSON(
  getV1ExperimentationItemsRequest: GetV1ExperimentationItemsRequest,
): string {
  return JSON.stringify(
    GetV1ExperimentationItemsRequest$outboundSchema.parse(
      getV1ExperimentationItemsRequest,
    ),
  );
}

export function getV1ExperimentationItemsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1ExperimentationItemsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1ExperimentationItemsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1ExperimentationItemsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1ExperimentationItemsCategory$inboundSchema: z.ZodNativeEnum<
  typeof GetV1ExperimentationItemsCategory
> = z.nativeEnum(GetV1ExperimentationItemsCategory);

/** @internal */
export const GetV1ExperimentationItemsCategory$outboundSchema: z.ZodNativeEnum<
  typeof GetV1ExperimentationItemsCategory
> = GetV1ExperimentationItemsCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ExperimentationItemsCategory$ {
  /** @deprecated use `GetV1ExperimentationItemsCategory$inboundSchema` instead. */
  export const inboundSchema = GetV1ExperimentationItemsCategory$inboundSchema;
  /** @deprecated use `GetV1ExperimentationItemsCategory$outboundSchema` instead. */
  export const outboundSchema =
    GetV1ExperimentationItemsCategory$outboundSchema;
}

/** @internal */
export const GetV1ExperimentationItemsItems$inboundSchema: z.ZodType<
  GetV1ExperimentationItemsItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  slug: z.string(),
  origin: z.string(),
  externalId: z.string(),
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  category: GetV1ExperimentationItemsCategory$inboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),
});

/** @internal */
export type GetV1ExperimentationItemsItems$Outbound = {
  id: string;
  slug: string;
  origin: string;
  externalId: string;
  integrationConfigurationId: string;
  resourceId: string;
  category?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  isArchived?: boolean | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
};

/** @internal */
export const GetV1ExperimentationItemsItems$outboundSchema: z.ZodType<
  GetV1ExperimentationItemsItems$Outbound,
  z.ZodTypeDef,
  GetV1ExperimentationItemsItems
> = z.object({
  id: z.string(),
  slug: z.string(),
  origin: z.string(),
  externalId: z.string(),
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  category: GetV1ExperimentationItemsCategory$outboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ExperimentationItemsItems$ {
  /** @deprecated use `GetV1ExperimentationItemsItems$inboundSchema` instead. */
  export const inboundSchema = GetV1ExperimentationItemsItems$inboundSchema;
  /** @deprecated use `GetV1ExperimentationItemsItems$outboundSchema` instead. */
  export const outboundSchema = GetV1ExperimentationItemsItems$outboundSchema;
  /** @deprecated use `GetV1ExperimentationItemsItems$Outbound` instead. */
  export type Outbound = GetV1ExperimentationItemsItems$Outbound;
}

export function getV1ExperimentationItemsItemsToJSON(
  getV1ExperimentationItemsItems: GetV1ExperimentationItemsItems,
): string {
  return JSON.stringify(
    GetV1ExperimentationItemsItems$outboundSchema.parse(
      getV1ExperimentationItemsItems,
    ),
  );
}

export function getV1ExperimentationItemsItemsFromJSON(
  jsonString: string,
): SafeParseResult<GetV1ExperimentationItemsItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1ExperimentationItemsItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1ExperimentationItemsItems' from JSON`,
  );
}

/** @internal */
export const GetV1ExperimentationItemsResponseBody$inboundSchema: z.ZodType<
  GetV1ExperimentationItemsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => GetV1ExperimentationItemsItems$inboundSchema)),
});

/** @internal */
export type GetV1ExperimentationItemsResponseBody$Outbound = {
  items: Array<GetV1ExperimentationItemsItems$Outbound>;
};

/** @internal */
export const GetV1ExperimentationItemsResponseBody$outboundSchema: z.ZodType<
  GetV1ExperimentationItemsResponseBody$Outbound,
  z.ZodTypeDef,
  GetV1ExperimentationItemsResponseBody
> = z.object({
  items: z.array(z.lazy(() => GetV1ExperimentationItemsItems$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ExperimentationItemsResponseBody$ {
  /** @deprecated use `GetV1ExperimentationItemsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetV1ExperimentationItemsResponseBody$inboundSchema;
  /** @deprecated use `GetV1ExperimentationItemsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV1ExperimentationItemsResponseBody$outboundSchema;
  /** @deprecated use `GetV1ExperimentationItemsResponseBody$Outbound` instead. */
  export type Outbound = GetV1ExperimentationItemsResponseBody$Outbound;
}

export function getV1ExperimentationItemsResponseBodyToJSON(
  getV1ExperimentationItemsResponseBody: GetV1ExperimentationItemsResponseBody,
): string {
  return JSON.stringify(
    GetV1ExperimentationItemsResponseBody$outboundSchema.parse(
      getV1ExperimentationItemsResponseBody,
    ),
  );
}

export function getV1ExperimentationItemsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetV1ExperimentationItemsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1ExperimentationItemsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1ExperimentationItemsResponseBody' from JSON`,
  );
}
