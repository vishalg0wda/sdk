/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export const CreateCustomEnvironmentType = {
  Equals: "equals",
  StartsWith: "startsWith",
  EndsWith: "endsWith",
} as const;
/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export type CreateCustomEnvironmentType = ClosedEnum<
  typeof CreateCustomEnvironmentType
>;

/**
 * How we want to determine a matching branch. This is optional.
 */
export type BranchMatcher = {
  /**
   * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
   */
  type: CreateCustomEnvironmentType;
  /**
   * Git branch name or portion thereof.
   */
  pattern: string;
};

export type CreateCustomEnvironmentRequestBody = {
  /**
   * The slug of the custom environment to create.
   */
  slug?: string | undefined;
  /**
   * Description of the custom environment. This is optional.
   */
  description?: string | undefined;
  /**
   * How we want to determine a matching branch. This is optional.
   */
  branchMatcher?: BranchMatcher | undefined;
  /**
   * Where to copy environment variables from. This is optional.
   */
  copyEnvVarsFrom?: string | undefined;
};

export type CreateCustomEnvironmentRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: CreateCustomEnvironmentRequestBody | undefined;
};

export type CreateCustomEnvironmentResponseBody = {};

/** @internal */
export const CreateCustomEnvironmentType$inboundSchema: z.ZodNativeEnum<
  typeof CreateCustomEnvironmentType
> = z.nativeEnum(CreateCustomEnvironmentType);

/** @internal */
export const CreateCustomEnvironmentType$outboundSchema: z.ZodNativeEnum<
  typeof CreateCustomEnvironmentType
> = CreateCustomEnvironmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomEnvironmentType$ {
  /** @deprecated use `CreateCustomEnvironmentType$inboundSchema` instead. */
  export const inboundSchema = CreateCustomEnvironmentType$inboundSchema;
  /** @deprecated use `CreateCustomEnvironmentType$outboundSchema` instead. */
  export const outboundSchema = CreateCustomEnvironmentType$outboundSchema;
}

/** @internal */
export const BranchMatcher$inboundSchema: z.ZodType<
  BranchMatcher,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateCustomEnvironmentType$inboundSchema,
  pattern: z.string(),
});

/** @internal */
export type BranchMatcher$Outbound = {
  type: string;
  pattern: string;
};

/** @internal */
export const BranchMatcher$outboundSchema: z.ZodType<
  BranchMatcher$Outbound,
  z.ZodTypeDef,
  BranchMatcher
> = z.object({
  type: CreateCustomEnvironmentType$outboundSchema,
  pattern: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BranchMatcher$ {
  /** @deprecated use `BranchMatcher$inboundSchema` instead. */
  export const inboundSchema = BranchMatcher$inboundSchema;
  /** @deprecated use `BranchMatcher$outboundSchema` instead. */
  export const outboundSchema = BranchMatcher$outboundSchema;
  /** @deprecated use `BranchMatcher$Outbound` instead. */
  export type Outbound = BranchMatcher$Outbound;
}

export function branchMatcherToJSON(branchMatcher: BranchMatcher): string {
  return JSON.stringify(BranchMatcher$outboundSchema.parse(branchMatcher));
}

export function branchMatcherFromJSON(
  jsonString: string,
): SafeParseResult<BranchMatcher, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BranchMatcher$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BranchMatcher' from JSON`,
  );
}

/** @internal */
export const CreateCustomEnvironmentRequestBody$inboundSchema: z.ZodType<
  CreateCustomEnvironmentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string().optional(),
  description: z.string().optional(),
  branchMatcher: z.lazy(() => BranchMatcher$inboundSchema).optional(),
  copyEnvVarsFrom: z.string().optional(),
});

/** @internal */
export type CreateCustomEnvironmentRequestBody$Outbound = {
  slug?: string | undefined;
  description?: string | undefined;
  branchMatcher?: BranchMatcher$Outbound | undefined;
  copyEnvVarsFrom?: string | undefined;
};

/** @internal */
export const CreateCustomEnvironmentRequestBody$outboundSchema: z.ZodType<
  CreateCustomEnvironmentRequestBody$Outbound,
  z.ZodTypeDef,
  CreateCustomEnvironmentRequestBody
> = z.object({
  slug: z.string().optional(),
  description: z.string().optional(),
  branchMatcher: z.lazy(() => BranchMatcher$outboundSchema).optional(),
  copyEnvVarsFrom: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomEnvironmentRequestBody$ {
  /** @deprecated use `CreateCustomEnvironmentRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateCustomEnvironmentRequestBody$inboundSchema;
  /** @deprecated use `CreateCustomEnvironmentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomEnvironmentRequestBody$outboundSchema;
  /** @deprecated use `CreateCustomEnvironmentRequestBody$Outbound` instead. */
  export type Outbound = CreateCustomEnvironmentRequestBody$Outbound;
}

export function createCustomEnvironmentRequestBodyToJSON(
  createCustomEnvironmentRequestBody: CreateCustomEnvironmentRequestBody,
): string {
  return JSON.stringify(
    CreateCustomEnvironmentRequestBody$outboundSchema.parse(
      createCustomEnvironmentRequestBody,
    ),
  );
}

export function createCustomEnvironmentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomEnvironmentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomEnvironmentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomEnvironmentRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateCustomEnvironmentRequest$inboundSchema: z.ZodType<
  CreateCustomEnvironmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => CreateCustomEnvironmentRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateCustomEnvironmentRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: CreateCustomEnvironmentRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateCustomEnvironmentRequest$outboundSchema: z.ZodType<
  CreateCustomEnvironmentRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomEnvironmentRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => CreateCustomEnvironmentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomEnvironmentRequest$ {
  /** @deprecated use `CreateCustomEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomEnvironmentRequest$inboundSchema;
  /** @deprecated use `CreateCustomEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCustomEnvironmentRequest$outboundSchema;
  /** @deprecated use `CreateCustomEnvironmentRequest$Outbound` instead. */
  export type Outbound = CreateCustomEnvironmentRequest$Outbound;
}

export function createCustomEnvironmentRequestToJSON(
  createCustomEnvironmentRequest: CreateCustomEnvironmentRequest,
): string {
  return JSON.stringify(
    CreateCustomEnvironmentRequest$outboundSchema.parse(
      createCustomEnvironmentRequest,
    ),
  );
}

export function createCustomEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomEnvironmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomEnvironmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomEnvironmentRequest' from JSON`,
  );
}

/** @internal */
export const CreateCustomEnvironmentResponseBody$inboundSchema: z.ZodType<
  CreateCustomEnvironmentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateCustomEnvironmentResponseBody$Outbound = {};

/** @internal */
export const CreateCustomEnvironmentResponseBody$outboundSchema: z.ZodType<
  CreateCustomEnvironmentResponseBody$Outbound,
  z.ZodTypeDef,
  CreateCustomEnvironmentResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomEnvironmentResponseBody$ {
  /** @deprecated use `CreateCustomEnvironmentResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomEnvironmentResponseBody$inboundSchema;
  /** @deprecated use `CreateCustomEnvironmentResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomEnvironmentResponseBody$outboundSchema;
  /** @deprecated use `CreateCustomEnvironmentResponseBody$Outbound` instead. */
  export type Outbound = CreateCustomEnvironmentResponseBody$Outbound;
}

export function createCustomEnvironmentResponseBodyToJSON(
  createCustomEnvironmentResponseBody: CreateCustomEnvironmentResponseBody,
): string {
  return JSON.stringify(
    CreateCustomEnvironmentResponseBody$outboundSchema.parse(
      createCustomEnvironmentResponseBody,
    ),
  );
}

export function createCustomEnvironmentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomEnvironmentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomEnvironmentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomEnvironmentResponseBody' from JSON`,
  );
}
