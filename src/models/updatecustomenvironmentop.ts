/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export const UpdateCustomEnvironmentType = {
  Equals: "equals",
  StartsWith: "startsWith",
  EndsWith: "endsWith",
} as const;
/**
 * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
 */
export type UpdateCustomEnvironmentType = ClosedEnum<
  typeof UpdateCustomEnvironmentType
>;

/**
 * How we want to determine a matching branch. This is optional.
 */
export type UpdateCustomEnvironmentBranchMatcher = {
  /**
   * Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
   */
  type: UpdateCustomEnvironmentType;
  /**
   * Git branch name or portion thereof.
   */
  pattern: string;
};

export type UpdateCustomEnvironmentRequestBody = {
  /**
   * The slug of the custom environment.
   */
  slug?: string | undefined;
  /**
   * Description of the custom environment. This is optional.
   */
  description?: string | undefined;
  /**
   * How we want to determine a matching branch. This is optional.
   */
  branchMatcher?: UpdateCustomEnvironmentBranchMatcher | null | undefined;
};

export type UpdateCustomEnvironmentRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The unique custom environment identifier within the project
   */
  environmentSlugOrId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: UpdateCustomEnvironmentRequestBody | undefined;
};

export type UpdateCustomEnvironmentResponseBody = {};

/** @internal */
export const UpdateCustomEnvironmentType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCustomEnvironmentType
> = z.nativeEnum(UpdateCustomEnvironmentType);

/** @internal */
export const UpdateCustomEnvironmentType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateCustomEnvironmentType
> = UpdateCustomEnvironmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomEnvironmentType$ {
  /** @deprecated use `UpdateCustomEnvironmentType$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomEnvironmentType$inboundSchema;
  /** @deprecated use `UpdateCustomEnvironmentType$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomEnvironmentType$outboundSchema;
}

/** @internal */
export const UpdateCustomEnvironmentBranchMatcher$inboundSchema: z.ZodType<
  UpdateCustomEnvironmentBranchMatcher,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateCustomEnvironmentType$inboundSchema,
  pattern: z.string(),
});

/** @internal */
export type UpdateCustomEnvironmentBranchMatcher$Outbound = {
  type: string;
  pattern: string;
};

/** @internal */
export const UpdateCustomEnvironmentBranchMatcher$outboundSchema: z.ZodType<
  UpdateCustomEnvironmentBranchMatcher$Outbound,
  z.ZodTypeDef,
  UpdateCustomEnvironmentBranchMatcher
> = z.object({
  type: UpdateCustomEnvironmentType$outboundSchema,
  pattern: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomEnvironmentBranchMatcher$ {
  /** @deprecated use `UpdateCustomEnvironmentBranchMatcher$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCustomEnvironmentBranchMatcher$inboundSchema;
  /** @deprecated use `UpdateCustomEnvironmentBranchMatcher$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCustomEnvironmentBranchMatcher$outboundSchema;
  /** @deprecated use `UpdateCustomEnvironmentBranchMatcher$Outbound` instead. */
  export type Outbound = UpdateCustomEnvironmentBranchMatcher$Outbound;
}

export function updateCustomEnvironmentBranchMatcherToJSON(
  updateCustomEnvironmentBranchMatcher: UpdateCustomEnvironmentBranchMatcher,
): string {
  return JSON.stringify(
    UpdateCustomEnvironmentBranchMatcher$outboundSchema.parse(
      updateCustomEnvironmentBranchMatcher,
    ),
  );
}

export function updateCustomEnvironmentBranchMatcherFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomEnvironmentBranchMatcher, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCustomEnvironmentBranchMatcher$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomEnvironmentBranchMatcher' from JSON`,
  );
}

/** @internal */
export const UpdateCustomEnvironmentRequestBody$inboundSchema: z.ZodType<
  UpdateCustomEnvironmentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string().optional(),
  description: z.string().optional(),
  branchMatcher: z.nullable(
    z.lazy(() => UpdateCustomEnvironmentBranchMatcher$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateCustomEnvironmentRequestBody$Outbound = {
  slug?: string | undefined;
  description?: string | undefined;
  branchMatcher?:
    | UpdateCustomEnvironmentBranchMatcher$Outbound
    | null
    | undefined;
};

/** @internal */
export const UpdateCustomEnvironmentRequestBody$outboundSchema: z.ZodType<
  UpdateCustomEnvironmentRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateCustomEnvironmentRequestBody
> = z.object({
  slug: z.string().optional(),
  description: z.string().optional(),
  branchMatcher: z.nullable(
    z.lazy(() => UpdateCustomEnvironmentBranchMatcher$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomEnvironmentRequestBody$ {
  /** @deprecated use `UpdateCustomEnvironmentRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomEnvironmentRequestBody$inboundSchema;
  /** @deprecated use `UpdateCustomEnvironmentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCustomEnvironmentRequestBody$outboundSchema;
  /** @deprecated use `UpdateCustomEnvironmentRequestBody$Outbound` instead. */
  export type Outbound = UpdateCustomEnvironmentRequestBody$Outbound;
}

export function updateCustomEnvironmentRequestBodyToJSON(
  updateCustomEnvironmentRequestBody: UpdateCustomEnvironmentRequestBody,
): string {
  return JSON.stringify(
    UpdateCustomEnvironmentRequestBody$outboundSchema.parse(
      updateCustomEnvironmentRequestBody,
    ),
  );
}

export function updateCustomEnvironmentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomEnvironmentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCustomEnvironmentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomEnvironmentRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateCustomEnvironmentRequest$inboundSchema: z.ZodType<
  UpdateCustomEnvironmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  environmentSlugOrId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => UpdateCustomEnvironmentRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateCustomEnvironmentRequest$Outbound = {
  idOrName: string;
  environmentSlugOrId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: UpdateCustomEnvironmentRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateCustomEnvironmentRequest$outboundSchema: z.ZodType<
  UpdateCustomEnvironmentRequest$Outbound,
  z.ZodTypeDef,
  UpdateCustomEnvironmentRequest
> = z.object({
  idOrName: z.string(),
  environmentSlugOrId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => UpdateCustomEnvironmentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomEnvironmentRequest$ {
  /** @deprecated use `UpdateCustomEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomEnvironmentRequest$inboundSchema;
  /** @deprecated use `UpdateCustomEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomEnvironmentRequest$outboundSchema;
  /** @deprecated use `UpdateCustomEnvironmentRequest$Outbound` instead. */
  export type Outbound = UpdateCustomEnvironmentRequest$Outbound;
}

export function updateCustomEnvironmentRequestToJSON(
  updateCustomEnvironmentRequest: UpdateCustomEnvironmentRequest,
): string {
  return JSON.stringify(
    UpdateCustomEnvironmentRequest$outboundSchema.parse(
      updateCustomEnvironmentRequest,
    ),
  );
}

export function updateCustomEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomEnvironmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomEnvironmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomEnvironmentRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCustomEnvironmentResponseBody$inboundSchema: z.ZodType<
  UpdateCustomEnvironmentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateCustomEnvironmentResponseBody$Outbound = {};

/** @internal */
export const UpdateCustomEnvironmentResponseBody$outboundSchema: z.ZodType<
  UpdateCustomEnvironmentResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateCustomEnvironmentResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomEnvironmentResponseBody$ {
  /** @deprecated use `UpdateCustomEnvironmentResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCustomEnvironmentResponseBody$inboundSchema;
  /** @deprecated use `UpdateCustomEnvironmentResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCustomEnvironmentResponseBody$outboundSchema;
  /** @deprecated use `UpdateCustomEnvironmentResponseBody$Outbound` instead. */
  export type Outbound = UpdateCustomEnvironmentResponseBody$Outbound;
}

export function updateCustomEnvironmentResponseBodyToJSON(
  updateCustomEnvironmentResponseBody: UpdateCustomEnvironmentResponseBody,
): string {
  return JSON.stringify(
    UpdateCustomEnvironmentResponseBody$outboundSchema.parse(
      updateCustomEnvironmentResponseBody,
    ),
  );
}

export function updateCustomEnvironmentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomEnvironmentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateCustomEnvironmentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomEnvironmentResponseBody' from JSON`,
  );
}
