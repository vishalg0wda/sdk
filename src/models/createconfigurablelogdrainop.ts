/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The delivery log format
 */
export const DeliveryFormat = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
/**
 * The delivery log format
 */
export type DeliveryFormat = ClosedEnum<typeof DeliveryFormat>;

export const Sources = {
  Static: "static",
  Lambda: "lambda",
  Build: "build",
  Edge: "edge",
  External: "external",
  Firewall: "firewall",
} as const;
export type Sources = ClosedEnum<typeof Sources>;

export const Environments = {
  Preview: "preview",
  Production: "production",
} as const;
export type Environments = ClosedEnum<typeof Environments>;

export type CreateConfigurableLogDrainRequestBody = {
  /**
   * The delivery log format
   */
  deliveryFormat: DeliveryFormat;
  /**
   * The log drain url
   */
  url: string;
  /**
   * Headers to be sent together with the request
   */
  headers?: { [k: string]: string } | undefined;
  projectIds?: Array<string> | undefined;
  sources: Array<Sources>;
  environments?: Array<Environments> | undefined;
  /**
   * Custom secret of log drain
   */
  secret?: string | undefined;
  /**
   * The sampling rate for this log drain. It should be a percentage rate between 0 and 100. With max 2 decimal points
   */
  samplingRate?: number | undefined;
  /**
   * The custom name of this log drain.
   */
  name?: string | undefined;
};

export type CreateConfigurableLogDrainRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: CreateConfigurableLogDrainRequestBody;
};

export const CreateConfigurableLogDrainSources = {
  Build: "build",
  Edge: "edge",
  Lambda: "lambda",
  Static: "static",
  External: "external",
  Firewall: "firewall",
} as const;
export type CreateConfigurableLogDrainSources = ClosedEnum<
  typeof CreateConfigurableLogDrainSources
>;

export const CreateConfigurableLogDrainEnvironments = {
  Production: "production",
  Preview: "preview",
} as const;
export type CreateConfigurableLogDrainEnvironments = ClosedEnum<
  typeof CreateConfigurableLogDrainEnvironments
>;

export const CreateConfigurableLogDrainStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type CreateConfigurableLogDrainStatus = ClosedEnum<
  typeof CreateConfigurableLogDrainStatus
>;

export const CreateConfigurableLogDrainDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type CreateConfigurableLogDrainDisabledReason = ClosedEnum<
  typeof CreateConfigurableLogDrainDisabledReason
>;

export const CreateConfigurableLogDrainCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type CreateConfigurableLogDrainCreatedFrom = ClosedEnum<
  typeof CreateConfigurableLogDrainCreatedFrom
>;

export const CreateConfigurableLogDrainDeliveryFormat = {
  Json: "json",
  Ndjson: "ndjson",
  Syslog: "syslog",
} as const;
export type CreateConfigurableLogDrainDeliveryFormat = ClosedEnum<
  typeof CreateConfigurableLogDrainDeliveryFormat
>;

export type CreateConfigurableLogDrainResponseBody = {
  /**
   * The secret to validate the log-drain payload
   */
  secret?: string | undefined;
  clientId?: string | undefined;
  configurationId?: string | undefined;
  sources?: Array<CreateConfigurableLogDrainSources> | undefined;
  environments: Array<CreateConfigurableLogDrainEnvironments>;
  status?: CreateConfigurableLogDrainStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: CreateConfigurableLogDrainDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  samplingRate?: number | undefined;
  hideIpAddresses?: boolean | undefined;
  id: string;
  createdAt: number;
  deletedAt: number | null;
  updatedAt: number;
  url: string;
  headers?: { [k: string]: string } | undefined;
  projectIds?: Array<string> | undefined;
  name: string;
  teamId?: string | null | undefined;
  ownerId: string;
  createdFrom?: CreateConfigurableLogDrainCreatedFrom | undefined;
  deliveryFormat: CreateConfigurableLogDrainDeliveryFormat;
};

/** @internal */
export const DeliveryFormat$inboundSchema: z.ZodNativeEnum<
  typeof DeliveryFormat
> = z.nativeEnum(DeliveryFormat);

/** @internal */
export const DeliveryFormat$outboundSchema: z.ZodNativeEnum<
  typeof DeliveryFormat
> = DeliveryFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryFormat$ {
  /** @deprecated use `DeliveryFormat$inboundSchema` instead. */
  export const inboundSchema = DeliveryFormat$inboundSchema;
  /** @deprecated use `DeliveryFormat$outboundSchema` instead. */
  export const outboundSchema = DeliveryFormat$outboundSchema;
}

/** @internal */
export const Sources$inboundSchema: z.ZodNativeEnum<typeof Sources> = z
  .nativeEnum(Sources);

/** @internal */
export const Sources$outboundSchema: z.ZodNativeEnum<typeof Sources> =
  Sources$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sources$ {
  /** @deprecated use `Sources$inboundSchema` instead. */
  export const inboundSchema = Sources$inboundSchema;
  /** @deprecated use `Sources$outboundSchema` instead. */
  export const outboundSchema = Sources$outboundSchema;
}

/** @internal */
export const Environments$inboundSchema: z.ZodNativeEnum<typeof Environments> =
  z.nativeEnum(Environments);

/** @internal */
export const Environments$outboundSchema: z.ZodNativeEnum<typeof Environments> =
  Environments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Environments$ {
  /** @deprecated use `Environments$inboundSchema` instead. */
  export const inboundSchema = Environments$inboundSchema;
  /** @deprecated use `Environments$outboundSchema` instead. */
  export const outboundSchema = Environments$outboundSchema;
}

/** @internal */
export const CreateConfigurableLogDrainRequestBody$inboundSchema: z.ZodType<
  CreateConfigurableLogDrainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deliveryFormat: DeliveryFormat$inboundSchema,
  url: z.string(),
  headers: z.record(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  sources: z.array(Sources$inboundSchema),
  environments: z.array(Environments$inboundSchema).optional(),
  secret: z.string().optional(),
  samplingRate: z.number().optional(),
  name: z.string().optional(),
});

/** @internal */
export type CreateConfigurableLogDrainRequestBody$Outbound = {
  deliveryFormat: string;
  url: string;
  headers?: { [k: string]: string } | undefined;
  projectIds?: Array<string> | undefined;
  sources: Array<string>;
  environments?: Array<string> | undefined;
  secret?: string | undefined;
  samplingRate?: number | undefined;
  name?: string | undefined;
};

/** @internal */
export const CreateConfigurableLogDrainRequestBody$outboundSchema: z.ZodType<
  CreateConfigurableLogDrainRequestBody$Outbound,
  z.ZodTypeDef,
  CreateConfigurableLogDrainRequestBody
> = z.object({
  deliveryFormat: DeliveryFormat$outboundSchema,
  url: z.string(),
  headers: z.record(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  sources: z.array(Sources$outboundSchema),
  environments: z.array(Environments$outboundSchema).optional(),
  secret: z.string().optional(),
  samplingRate: z.number().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainRequestBody$ {
  /** @deprecated use `CreateConfigurableLogDrainRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateConfigurableLogDrainRequestBody$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainRequestBody$outboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainRequestBody$Outbound` instead. */
  export type Outbound = CreateConfigurableLogDrainRequestBody$Outbound;
}

export function createConfigurableLogDrainRequestBodyToJSON(
  createConfigurableLogDrainRequestBody: CreateConfigurableLogDrainRequestBody,
): string {
  return JSON.stringify(
    CreateConfigurableLogDrainRequestBody$outboundSchema.parse(
      createConfigurableLogDrainRequestBody,
    ),
  );
}

export function createConfigurableLogDrainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateConfigurableLogDrainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateConfigurableLogDrainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConfigurableLogDrainRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateConfigurableLogDrainRequest$inboundSchema: z.ZodType<
  CreateConfigurableLogDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() =>
    CreateConfigurableLogDrainRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateConfigurableLogDrainRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody: CreateConfigurableLogDrainRequestBody$Outbound;
};

/** @internal */
export const CreateConfigurableLogDrainRequest$outboundSchema: z.ZodType<
  CreateConfigurableLogDrainRequest$Outbound,
  z.ZodTypeDef,
  CreateConfigurableLogDrainRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() =>
    CreateConfigurableLogDrainRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainRequest$ {
  /** @deprecated use `CreateConfigurableLogDrainRequest$inboundSchema` instead. */
  export const inboundSchema = CreateConfigurableLogDrainRequest$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainRequest$outboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainRequest$Outbound` instead. */
  export type Outbound = CreateConfigurableLogDrainRequest$Outbound;
}

export function createConfigurableLogDrainRequestToJSON(
  createConfigurableLogDrainRequest: CreateConfigurableLogDrainRequest,
): string {
  return JSON.stringify(
    CreateConfigurableLogDrainRequest$outboundSchema.parse(
      createConfigurableLogDrainRequest,
    ),
  );
}

export function createConfigurableLogDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateConfigurableLogDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateConfigurableLogDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConfigurableLogDrainRequest' from JSON`,
  );
}

/** @internal */
export const CreateConfigurableLogDrainSources$inboundSchema: z.ZodNativeEnum<
  typeof CreateConfigurableLogDrainSources
> = z.nativeEnum(CreateConfigurableLogDrainSources);

/** @internal */
export const CreateConfigurableLogDrainSources$outboundSchema: z.ZodNativeEnum<
  typeof CreateConfigurableLogDrainSources
> = CreateConfigurableLogDrainSources$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainSources$ {
  /** @deprecated use `CreateConfigurableLogDrainSources$inboundSchema` instead. */
  export const inboundSchema = CreateConfigurableLogDrainSources$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainSources$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainSources$outboundSchema;
}

/** @internal */
export const CreateConfigurableLogDrainEnvironments$inboundSchema:
  z.ZodNativeEnum<typeof CreateConfigurableLogDrainEnvironments> = z.nativeEnum(
    CreateConfigurableLogDrainEnvironments,
  );

/** @internal */
export const CreateConfigurableLogDrainEnvironments$outboundSchema:
  z.ZodNativeEnum<typeof CreateConfigurableLogDrainEnvironments> =
    CreateConfigurableLogDrainEnvironments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainEnvironments$ {
  /** @deprecated use `CreateConfigurableLogDrainEnvironments$inboundSchema` instead. */
  export const inboundSchema =
    CreateConfigurableLogDrainEnvironments$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainEnvironments$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainEnvironments$outboundSchema;
}

/** @internal */
export const CreateConfigurableLogDrainStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateConfigurableLogDrainStatus
> = z.nativeEnum(CreateConfigurableLogDrainStatus);

/** @internal */
export const CreateConfigurableLogDrainStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateConfigurableLogDrainStatus
> = CreateConfigurableLogDrainStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainStatus$ {
  /** @deprecated use `CreateConfigurableLogDrainStatus$inboundSchema` instead. */
  export const inboundSchema = CreateConfigurableLogDrainStatus$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainStatus$outboundSchema` instead. */
  export const outboundSchema = CreateConfigurableLogDrainStatus$outboundSchema;
}

/** @internal */
export const CreateConfigurableLogDrainDisabledReason$inboundSchema:
  z.ZodNativeEnum<typeof CreateConfigurableLogDrainDisabledReason> = z
    .nativeEnum(CreateConfigurableLogDrainDisabledReason);

/** @internal */
export const CreateConfigurableLogDrainDisabledReason$outboundSchema:
  z.ZodNativeEnum<typeof CreateConfigurableLogDrainDisabledReason> =
    CreateConfigurableLogDrainDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainDisabledReason$ {
  /** @deprecated use `CreateConfigurableLogDrainDisabledReason$inboundSchema` instead. */
  export const inboundSchema =
    CreateConfigurableLogDrainDisabledReason$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainDisabledReason$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainDisabledReason$outboundSchema;
}

/** @internal */
export const CreateConfigurableLogDrainCreatedFrom$inboundSchema:
  z.ZodNativeEnum<typeof CreateConfigurableLogDrainCreatedFrom> = z.nativeEnum(
    CreateConfigurableLogDrainCreatedFrom,
  );

/** @internal */
export const CreateConfigurableLogDrainCreatedFrom$outboundSchema:
  z.ZodNativeEnum<typeof CreateConfigurableLogDrainCreatedFrom> =
    CreateConfigurableLogDrainCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainCreatedFrom$ {
  /** @deprecated use `CreateConfigurableLogDrainCreatedFrom$inboundSchema` instead. */
  export const inboundSchema =
    CreateConfigurableLogDrainCreatedFrom$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainCreatedFrom$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainCreatedFrom$outboundSchema;
}

/** @internal */
export const CreateConfigurableLogDrainDeliveryFormat$inboundSchema:
  z.ZodNativeEnum<typeof CreateConfigurableLogDrainDeliveryFormat> = z
    .nativeEnum(CreateConfigurableLogDrainDeliveryFormat);

/** @internal */
export const CreateConfigurableLogDrainDeliveryFormat$outboundSchema:
  z.ZodNativeEnum<typeof CreateConfigurableLogDrainDeliveryFormat> =
    CreateConfigurableLogDrainDeliveryFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainDeliveryFormat$ {
  /** @deprecated use `CreateConfigurableLogDrainDeliveryFormat$inboundSchema` instead. */
  export const inboundSchema =
    CreateConfigurableLogDrainDeliveryFormat$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainDeliveryFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainDeliveryFormat$outboundSchema;
}

/** @internal */
export const CreateConfigurableLogDrainResponseBody$inboundSchema: z.ZodType<
  CreateConfigurableLogDrainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  secret: z.string().optional(),
  clientId: z.string().optional(),
  configurationId: z.string().optional(),
  sources: z.array(CreateConfigurableLogDrainSources$inboundSchema).optional(),
  environments: z.array(CreateConfigurableLogDrainEnvironments$inboundSchema),
  status: CreateConfigurableLogDrainStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: CreateConfigurableLogDrainDisabledReason$inboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  samplingRate: z.number().optional(),
  hideIpAddresses: z.boolean().optional(),
  id: z.string(),
  createdAt: z.number(),
  deletedAt: z.nullable(z.number()),
  updatedAt: z.number(),
  url: z.string(),
  headers: z.record(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  name: z.string(),
  teamId: z.nullable(z.string()).optional(),
  ownerId: z.string(),
  createdFrom: CreateConfigurableLogDrainCreatedFrom$inboundSchema.optional(),
  deliveryFormat: CreateConfigurableLogDrainDeliveryFormat$inboundSchema,
});

/** @internal */
export type CreateConfigurableLogDrainResponseBody$Outbound = {
  secret?: string | undefined;
  clientId?: string | undefined;
  configurationId?: string | undefined;
  sources?: Array<string> | undefined;
  environments: Array<string>;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  samplingRate?: number | undefined;
  hideIpAddresses?: boolean | undefined;
  id: string;
  createdAt: number;
  deletedAt: number | null;
  updatedAt: number;
  url: string;
  headers?: { [k: string]: string } | undefined;
  projectIds?: Array<string> | undefined;
  name: string;
  teamId?: string | null | undefined;
  ownerId: string;
  createdFrom?: string | undefined;
  deliveryFormat: string;
};

/** @internal */
export const CreateConfigurableLogDrainResponseBody$outboundSchema: z.ZodType<
  CreateConfigurableLogDrainResponseBody$Outbound,
  z.ZodTypeDef,
  CreateConfigurableLogDrainResponseBody
> = z.object({
  secret: z.string().optional(),
  clientId: z.string().optional(),
  configurationId: z.string().optional(),
  sources: z.array(CreateConfigurableLogDrainSources$outboundSchema).optional(),
  environments: z.array(CreateConfigurableLogDrainEnvironments$outboundSchema),
  status: CreateConfigurableLogDrainStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: CreateConfigurableLogDrainDisabledReason$outboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  samplingRate: z.number().optional(),
  hideIpAddresses: z.boolean().optional(),
  id: z.string(),
  createdAt: z.number(),
  deletedAt: z.nullable(z.number()),
  updatedAt: z.number(),
  url: z.string(),
  headers: z.record(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  name: z.string(),
  teamId: z.nullable(z.string()).optional(),
  ownerId: z.string(),
  createdFrom: CreateConfigurableLogDrainCreatedFrom$outboundSchema.optional(),
  deliveryFormat: CreateConfigurableLogDrainDeliveryFormat$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainResponseBody$ {
  /** @deprecated use `CreateConfigurableLogDrainResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateConfigurableLogDrainResponseBody$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainResponseBody$outboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainResponseBody$Outbound` instead. */
  export type Outbound = CreateConfigurableLogDrainResponseBody$Outbound;
}

export function createConfigurableLogDrainResponseBodyToJSON(
  createConfigurableLogDrainResponseBody:
    CreateConfigurableLogDrainResponseBody,
): string {
  return JSON.stringify(
    CreateConfigurableLogDrainResponseBody$outboundSchema.parse(
      createConfigurableLogDrainResponseBody,
    ),
  );
}

export function createConfigurableLogDrainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateConfigurableLogDrainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateConfigurableLogDrainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConfigurableLogDrainResponseBody' from JSON`,
  );
}
