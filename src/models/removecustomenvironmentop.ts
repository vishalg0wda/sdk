/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RemoveCustomEnvironmentRequestBody = {
  /**
   * Delete Environment Variables that are not assigned to any environments.
   */
  deleteUnassignedEnvironmentVariables?: boolean | undefined;
};

export type RemoveCustomEnvironmentRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The unique custom environment identifier within the project
   */
  environmentSlugOrId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: RemoveCustomEnvironmentRequestBody | undefined;
};

export type RemoveCustomEnvironmentResponseBody = {};

/** @internal */
export const RemoveCustomEnvironmentRequestBody$inboundSchema: z.ZodType<
  RemoveCustomEnvironmentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deleteUnassignedEnvironmentVariables: z.boolean().optional(),
});

/** @internal */
export type RemoveCustomEnvironmentRequestBody$Outbound = {
  deleteUnassignedEnvironmentVariables?: boolean | undefined;
};

/** @internal */
export const RemoveCustomEnvironmentRequestBody$outboundSchema: z.ZodType<
  RemoveCustomEnvironmentRequestBody$Outbound,
  z.ZodTypeDef,
  RemoveCustomEnvironmentRequestBody
> = z.object({
  deleteUnassignedEnvironmentVariables: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCustomEnvironmentRequestBody$ {
  /** @deprecated use `RemoveCustomEnvironmentRequestBody$inboundSchema` instead. */
  export const inboundSchema = RemoveCustomEnvironmentRequestBody$inboundSchema;
  /** @deprecated use `RemoveCustomEnvironmentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RemoveCustomEnvironmentRequestBody$outboundSchema;
  /** @deprecated use `RemoveCustomEnvironmentRequestBody$Outbound` instead. */
  export type Outbound = RemoveCustomEnvironmentRequestBody$Outbound;
}

export function removeCustomEnvironmentRequestBodyToJSON(
  removeCustomEnvironmentRequestBody: RemoveCustomEnvironmentRequestBody,
): string {
  return JSON.stringify(
    RemoveCustomEnvironmentRequestBody$outboundSchema.parse(
      removeCustomEnvironmentRequestBody,
    ),
  );
}

export function removeCustomEnvironmentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCustomEnvironmentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RemoveCustomEnvironmentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCustomEnvironmentRequestBody' from JSON`,
  );
}

/** @internal */
export const RemoveCustomEnvironmentRequest$inboundSchema: z.ZodType<
  RemoveCustomEnvironmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  environmentSlugOrId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => RemoveCustomEnvironmentRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type RemoveCustomEnvironmentRequest$Outbound = {
  idOrName: string;
  environmentSlugOrId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: RemoveCustomEnvironmentRequestBody$Outbound | undefined;
};

/** @internal */
export const RemoveCustomEnvironmentRequest$outboundSchema: z.ZodType<
  RemoveCustomEnvironmentRequest$Outbound,
  z.ZodTypeDef,
  RemoveCustomEnvironmentRequest
> = z.object({
  idOrName: z.string(),
  environmentSlugOrId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => RemoveCustomEnvironmentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCustomEnvironmentRequest$ {
  /** @deprecated use `RemoveCustomEnvironmentRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveCustomEnvironmentRequest$inboundSchema;
  /** @deprecated use `RemoveCustomEnvironmentRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveCustomEnvironmentRequest$outboundSchema;
  /** @deprecated use `RemoveCustomEnvironmentRequest$Outbound` instead. */
  export type Outbound = RemoveCustomEnvironmentRequest$Outbound;
}

export function removeCustomEnvironmentRequestToJSON(
  removeCustomEnvironmentRequest: RemoveCustomEnvironmentRequest,
): string {
  return JSON.stringify(
    RemoveCustomEnvironmentRequest$outboundSchema.parse(
      removeCustomEnvironmentRequest,
    ),
  );
}

export function removeCustomEnvironmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCustomEnvironmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCustomEnvironmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCustomEnvironmentRequest' from JSON`,
  );
}

/** @internal */
export const RemoveCustomEnvironmentResponseBody$inboundSchema: z.ZodType<
  RemoveCustomEnvironmentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RemoveCustomEnvironmentResponseBody$Outbound = {};

/** @internal */
export const RemoveCustomEnvironmentResponseBody$outboundSchema: z.ZodType<
  RemoveCustomEnvironmentResponseBody$Outbound,
  z.ZodTypeDef,
  RemoveCustomEnvironmentResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCustomEnvironmentResponseBody$ {
  /** @deprecated use `RemoveCustomEnvironmentResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RemoveCustomEnvironmentResponseBody$inboundSchema;
  /** @deprecated use `RemoveCustomEnvironmentResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RemoveCustomEnvironmentResponseBody$outboundSchema;
  /** @deprecated use `RemoveCustomEnvironmentResponseBody$Outbound` instead. */
  export type Outbound = RemoveCustomEnvironmentResponseBody$Outbound;
}

export function removeCustomEnvironmentResponseBodyToJSON(
  removeCustomEnvironmentResponseBody: RemoveCustomEnvironmentResponseBody,
): string {
  return JSON.stringify(
    RemoveCustomEnvironmentResponseBody$outboundSchema.parse(
      removeCustomEnvironmentResponseBody,
    ),
  );
}

export function removeCustomEnvironmentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCustomEnvironmentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RemoveCustomEnvironmentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCustomEnvironmentResponseBody' from JSON`,
  );
}
