/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetConfigurableLogDrainRequest = {
  id: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const GetConfigurableLogDrainSources = {
  Build: "build",
  Edge: "edge",
  Lambda: "lambda",
  Static: "static",
  External: "external",
  Firewall: "firewall",
} as const;
export type GetConfigurableLogDrainSources = ClosedEnum<
  typeof GetConfigurableLogDrainSources
>;

export const GetConfigurableLogDrainEnvironments = {
  Production: "production",
  Preview: "preview",
} as const;
export type GetConfigurableLogDrainEnvironments = ClosedEnum<
  typeof GetConfigurableLogDrainEnvironments
>;

export const GetConfigurableLogDrainStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type GetConfigurableLogDrainStatus = ClosedEnum<
  typeof GetConfigurableLogDrainStatus
>;

export const DisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type DisabledReason = ClosedEnum<typeof DisabledReason>;

export const CreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type CreatedFrom = ClosedEnum<typeof CreatedFrom>;

export const GetConfigurableLogDrainDeliveryFormat = {
  Json: "json",
  Ndjson: "ndjson",
  Syslog: "syslog",
} as const;
export type GetConfigurableLogDrainDeliveryFormat = ClosedEnum<
  typeof GetConfigurableLogDrainDeliveryFormat
>;

export type GetConfigurableLogDrainResponseBody = {
  clientId?: string | undefined;
  configurationId?: string | undefined;
  sources?: Array<GetConfigurableLogDrainSources> | undefined;
  environments: Array<GetConfigurableLogDrainEnvironments>;
  status?: GetConfigurableLogDrainStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: DisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  samplingRate?: number | undefined;
  hideIpAddresses?: boolean | undefined;
  id: string;
  createdAt: number;
  deletedAt: number | null;
  updatedAt: number;
  url: string;
  headers?: { [k: string]: string } | undefined;
  projectIds?: Array<string> | undefined;
  name: string;
  teamId?: string | null | undefined;
  ownerId: string;
  createdFrom?: CreatedFrom | undefined;
  deliveryFormat: GetConfigurableLogDrainDeliveryFormat;
  secret: string;
};

/** @internal */
export const GetConfigurableLogDrainRequest$inboundSchema: z.ZodType<
  GetConfigurableLogDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetConfigurableLogDrainRequest$Outbound = {
  id: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetConfigurableLogDrainRequest$outboundSchema: z.ZodType<
  GetConfigurableLogDrainRequest$Outbound,
  z.ZodTypeDef,
  GetConfigurableLogDrainRequest
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainRequest$ {
  /** @deprecated use `GetConfigurableLogDrainRequest$inboundSchema` instead. */
  export const inboundSchema = GetConfigurableLogDrainRequest$inboundSchema;
  /** @deprecated use `GetConfigurableLogDrainRequest$outboundSchema` instead. */
  export const outboundSchema = GetConfigurableLogDrainRequest$outboundSchema;
  /** @deprecated use `GetConfigurableLogDrainRequest$Outbound` instead. */
  export type Outbound = GetConfigurableLogDrainRequest$Outbound;
}

export function getConfigurableLogDrainRequestToJSON(
  getConfigurableLogDrainRequest: GetConfigurableLogDrainRequest,
): string {
  return JSON.stringify(
    GetConfigurableLogDrainRequest$outboundSchema.parse(
      getConfigurableLogDrainRequest,
    ),
  );
}

export function getConfigurableLogDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurableLogDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurableLogDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurableLogDrainRequest' from JSON`,
  );
}

/** @internal */
export const GetConfigurableLogDrainSources$inboundSchema: z.ZodNativeEnum<
  typeof GetConfigurableLogDrainSources
> = z.nativeEnum(GetConfigurableLogDrainSources);

/** @internal */
export const GetConfigurableLogDrainSources$outboundSchema: z.ZodNativeEnum<
  typeof GetConfigurableLogDrainSources
> = GetConfigurableLogDrainSources$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainSources$ {
  /** @deprecated use `GetConfigurableLogDrainSources$inboundSchema` instead. */
  export const inboundSchema = GetConfigurableLogDrainSources$inboundSchema;
  /** @deprecated use `GetConfigurableLogDrainSources$outboundSchema` instead. */
  export const outboundSchema = GetConfigurableLogDrainSources$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainEnvironments$inboundSchema: z.ZodNativeEnum<
  typeof GetConfigurableLogDrainEnvironments
> = z.nativeEnum(GetConfigurableLogDrainEnvironments);

/** @internal */
export const GetConfigurableLogDrainEnvironments$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurableLogDrainEnvironments> =
    GetConfigurableLogDrainEnvironments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainEnvironments$ {
  /** @deprecated use `GetConfigurableLogDrainEnvironments$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurableLogDrainEnvironments$inboundSchema;
  /** @deprecated use `GetConfigurableLogDrainEnvironments$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurableLogDrainEnvironments$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetConfigurableLogDrainStatus
> = z.nativeEnum(GetConfigurableLogDrainStatus);

/** @internal */
export const GetConfigurableLogDrainStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetConfigurableLogDrainStatus
> = GetConfigurableLogDrainStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainStatus$ {
  /** @deprecated use `GetConfigurableLogDrainStatus$inboundSchema` instead. */
  export const inboundSchema = GetConfigurableLogDrainStatus$inboundSchema;
  /** @deprecated use `GetConfigurableLogDrainStatus$outboundSchema` instead. */
  export const outboundSchema = GetConfigurableLogDrainStatus$outboundSchema;
}

/** @internal */
export const DisabledReason$inboundSchema: z.ZodNativeEnum<
  typeof DisabledReason
> = z.nativeEnum(DisabledReason);

/** @internal */
export const DisabledReason$outboundSchema: z.ZodNativeEnum<
  typeof DisabledReason
> = DisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisabledReason$ {
  /** @deprecated use `DisabledReason$inboundSchema` instead. */
  export const inboundSchema = DisabledReason$inboundSchema;
  /** @deprecated use `DisabledReason$outboundSchema` instead. */
  export const outboundSchema = DisabledReason$outboundSchema;
}

/** @internal */
export const CreatedFrom$inboundSchema: z.ZodNativeEnum<typeof CreatedFrom> = z
  .nativeEnum(CreatedFrom);

/** @internal */
export const CreatedFrom$outboundSchema: z.ZodNativeEnum<typeof CreatedFrom> =
  CreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedFrom$ {
  /** @deprecated use `CreatedFrom$inboundSchema` instead. */
  export const inboundSchema = CreatedFrom$inboundSchema;
  /** @deprecated use `CreatedFrom$outboundSchema` instead. */
  export const outboundSchema = CreatedFrom$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainDeliveryFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetConfigurableLogDrainDeliveryFormat> = z.nativeEnum(
    GetConfigurableLogDrainDeliveryFormat,
  );

/** @internal */
export const GetConfigurableLogDrainDeliveryFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetConfigurableLogDrainDeliveryFormat> =
    GetConfigurableLogDrainDeliveryFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainDeliveryFormat$ {
  /** @deprecated use `GetConfigurableLogDrainDeliveryFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurableLogDrainDeliveryFormat$inboundSchema;
  /** @deprecated use `GetConfigurableLogDrainDeliveryFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurableLogDrainDeliveryFormat$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainResponseBody$inboundSchema: z.ZodType<
  GetConfigurableLogDrainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string().optional(),
  configurationId: z.string().optional(),
  sources: z.array(GetConfigurableLogDrainSources$inboundSchema).optional(),
  environments: z.array(GetConfigurableLogDrainEnvironments$inboundSchema),
  status: GetConfigurableLogDrainStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: DisabledReason$inboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  samplingRate: z.number().optional(),
  hideIpAddresses: z.boolean().optional(),
  id: z.string(),
  createdAt: z.number(),
  deletedAt: z.nullable(z.number()),
  updatedAt: z.number(),
  url: z.string(),
  headers: z.record(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  name: z.string(),
  teamId: z.nullable(z.string()).optional(),
  ownerId: z.string(),
  createdFrom: CreatedFrom$inboundSchema.optional(),
  deliveryFormat: GetConfigurableLogDrainDeliveryFormat$inboundSchema,
  secret: z.string(),
});

/** @internal */
export type GetConfigurableLogDrainResponseBody$Outbound = {
  clientId?: string | undefined;
  configurationId?: string | undefined;
  sources?: Array<string> | undefined;
  environments: Array<string>;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  samplingRate?: number | undefined;
  hideIpAddresses?: boolean | undefined;
  id: string;
  createdAt: number;
  deletedAt: number | null;
  updatedAt: number;
  url: string;
  headers?: { [k: string]: string } | undefined;
  projectIds?: Array<string> | undefined;
  name: string;
  teamId?: string | null | undefined;
  ownerId: string;
  createdFrom?: string | undefined;
  deliveryFormat: string;
  secret: string;
};

/** @internal */
export const GetConfigurableLogDrainResponseBody$outboundSchema: z.ZodType<
  GetConfigurableLogDrainResponseBody$Outbound,
  z.ZodTypeDef,
  GetConfigurableLogDrainResponseBody
> = z.object({
  clientId: z.string().optional(),
  configurationId: z.string().optional(),
  sources: z.array(GetConfigurableLogDrainSources$outboundSchema).optional(),
  environments: z.array(GetConfigurableLogDrainEnvironments$outboundSchema),
  status: GetConfigurableLogDrainStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: DisabledReason$outboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  samplingRate: z.number().optional(),
  hideIpAddresses: z.boolean().optional(),
  id: z.string(),
  createdAt: z.number(),
  deletedAt: z.nullable(z.number()),
  updatedAt: z.number(),
  url: z.string(),
  headers: z.record(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  name: z.string(),
  teamId: z.nullable(z.string()).optional(),
  ownerId: z.string(),
  createdFrom: CreatedFrom$outboundSchema.optional(),
  deliveryFormat: GetConfigurableLogDrainDeliveryFormat$outboundSchema,
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainResponseBody$ {
  /** @deprecated use `GetConfigurableLogDrainResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurableLogDrainResponseBody$inboundSchema;
  /** @deprecated use `GetConfigurableLogDrainResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurableLogDrainResponseBody$outboundSchema;
  /** @deprecated use `GetConfigurableLogDrainResponseBody$Outbound` instead. */
  export type Outbound = GetConfigurableLogDrainResponseBody$Outbound;
}

export function getConfigurableLogDrainResponseBodyToJSON(
  getConfigurableLogDrainResponseBody: GetConfigurableLogDrainResponseBody,
): string {
  return JSON.stringify(
    GetConfigurableLogDrainResponseBody$outboundSchema.parse(
      getConfigurableLogDrainResponseBody,
    ),
  );
}

export function getConfigurableLogDrainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurableLogDrainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetConfigurableLogDrainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurableLogDrainResponseBody' from JSON`,
  );
}
