/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetFirewallConfigRequest = {
  projectId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  /**
   * The deployed configVersion for the firewall configuration
   */
  configVersion: string;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction =
  {
    Deny: "deny",
    Log: "log",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction
  >;

/**
 * Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
 */
export type Sd = {
  active: boolean;
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction =
  {
    Deny: "deny",
    Log: "log",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction
  >;

/**
 * Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
 */
export type Ma = {
  active: boolean;
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction =
  {
    Deny: "deny",
    Log: "log",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction
  >;

/**
 * Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
 */
export type Lfi = {
  active: boolean;
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction;
};

export const GetFirewallConfigSecurityResponse200Action = {
  Deny: "deny",
  Log: "log",
} as const;
export type GetFirewallConfigSecurityResponse200Action = ClosedEnum<
  typeof GetFirewallConfigSecurityResponse200Action
>;

/**
 * Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
 */
export type Rfi = {
  active: boolean;
  action: GetFirewallConfigSecurityResponse200Action;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONAction = {
  Deny: "deny",
  Log: "log",
} as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONAction =
  ClosedEnum<typeof GetFirewallConfigSecurityResponse200ApplicationJSONAction>;

/**
 * Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
 */
export type Rce = {
  active: boolean;
  action: GetFirewallConfigSecurityResponse200ApplicationJSONAction;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction =
  {
    Deny: "deny",
    Log: "log",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction
  >;

/**
 * PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
 */
export type Php = {
  active: boolean;
  action: GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction =
  {
    Deny: "deny",
    Log: "log",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction
  >;

/**
 * Generic Attack - Provide broad protection from various undefined or novel attack vectors.
 */
export type Gen = {
  active: boolean;
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction =
  {
    Deny: "deny",
    Log: "log",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction
  >;

/**
 * XSS Attack - Prevent injection of malicious scripts into trusted webpages.
 */
export type Xss = {
  active: boolean;
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction =
  {
    Deny: "deny",
    Log: "log",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction
  >;

/**
 * SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
 */
export type Sqli = {
  active: boolean;
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction =
  {
    Deny: "deny",
    Log: "log",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction
  >;

/**
 * Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
 */
export type Sf = {
  active: boolean;
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction =
  {
    Deny: "deny",
    Log: "log",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction
  >;

/**
 * Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
 */
export type Java = {
  active: boolean;
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction;
};

/**
 * Custom Ruleset
 */
export type Crs = {
  /**
   * Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
   */
  sd: Sd;
  /**
   * Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
   */
  ma: Ma;
  /**
   * Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
   */
  lfi: Lfi;
  /**
   * Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
   */
  rfi: Rfi;
  /**
   * Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
   */
  rce: Rce;
  /**
   * PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
   */
  php: Php;
  /**
   * Generic Attack - Provide broad protection from various undefined or novel attack vectors.
   */
  gen: Gen;
  /**
   * XSS Attack - Prevent injection of malicious scripts into trusted webpages.
   */
  xss: Xss;
  /**
   * SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
   */
  sqli: Sqli;
  /**
   * Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
   */
  sf: Sf;
  /**
   * Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
   */
  java: Java;
};

/**
 * [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
 */
export const GetFirewallConfigType = {
  Host: "host",
  Path: "path",
  Method: "method",
  Header: "header",
  Query: "query",
  Cookie: "cookie",
  TargetPath: "target_path",
  RawPath: "raw_path",
  IpAddress: "ip_address",
  Protocol: "protocol",
  Region: "region",
  Scheme: "scheme",
  Environment: "environment",
  UserAgent: "user_agent",
  GeoContinent: "geo_continent",
  GeoCountry: "geo_country",
  GeoCountryRegion: "geo_country_region",
  GeoCity: "geo_city",
  GeoAsNumber: "geo_as_number",
  Ja4Digest: "ja4_digest",
  Ja3Digest: "ja3_digest",
  RateLimitApiId: "rate_limit_api_id",
} as const;
/**
 * [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
 */
export type GetFirewallConfigType = ClosedEnum<typeof GetFirewallConfigType>;

/**
 * [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value
 */
export const GetFirewallConfigOp = {
  Re: "re",
  Eq: "eq",
  Ex: "ex",
  Inc: "inc",
  Pre: "pre",
  Suf: "suf",
  Sub: "sub",
  Gt: "gt",
  Gte: "gte",
  Lt: "lt",
  Lte: "lte",
  Nex: "nex",
  Ninc: "ninc",
  Neq: "neq",
} as const;
/**
 * [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value
 */
export type GetFirewallConfigOp = ClosedEnum<typeof GetFirewallConfigOp>;

export type GetFirewallConfigValue = string | number | Array<string>;

export type GetFirewallConfigConditions = {
  /**
   * [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
   */
  type: GetFirewallConfigType;
  /**
   * [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value
   */
  op: GetFirewallConfigOp;
  neg?: boolean | undefined;
  key?: string | undefined;
  value?: string | number | Array<string> | undefined;
};

export type GetFirewallConfigConditionGroup = {
  conditions: Array<GetFirewallConfigConditions>;
};

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction =
  {
    Deny: "deny",
    Log: "log",
    Challenge: "challenge",
    Bypass: "bypass",
    RateLimit: "rate_limit",
    Redirect: "redirect",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction
  >;

export const GetFirewallConfigAlgo = {
  FixedWindow: "fixed_window",
  TokenBucket: "token_bucket",
} as const;
export type GetFirewallConfigAlgo = ClosedEnum<typeof GetFirewallConfigAlgo>;

export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction =
  {
    Deny: "deny",
    Log: "log",
    Challenge: "challenge",
    RateLimit: "rate_limit",
  } as const;
export type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction =
  ClosedEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction
  >;

export type GetFirewallConfigRateLimit = {
  algo: GetFirewallConfigAlgo;
  window: number;
  limit: number;
  keys: Array<string>;
  action?:
    | GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction
    | null
    | undefined;
};

export type GetFirewallConfigRedirect = {
  location: string;
  permanent: boolean;
};

export type GetFirewallConfigMitigate = {
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction;
  rateLimit?: GetFirewallConfigRateLimit | null | undefined;
  redirect?: GetFirewallConfigRedirect | null | undefined;
  actionDuration?: string | null | undefined;
  bypassSystem?: boolean | null | undefined;
};

export type GetFirewallConfigAction = {
  mitigate?: GetFirewallConfigMitigate | undefined;
};

export type Rules = {
  id: string;
  name: string;
  description?: string | undefined;
  active: boolean;
  conditionGroup: Array<GetFirewallConfigConditionGroup>;
  action: GetFirewallConfigAction;
};

export const GetFirewallConfigSecurityAction = {
  Deny: "deny",
  Log: "log",
  Challenge: "challenge",
  Bypass: "bypass",
} as const;
export type GetFirewallConfigSecurityAction = ClosedEnum<
  typeof GetFirewallConfigSecurityAction
>;

export type Ips = {
  id: string;
  hostname: string;
  ip: string;
  notes?: string | undefined;
  action: GetFirewallConfigSecurityAction;
};

export type Changes = {};

export const GetFirewallConfigSecurityResponseAction = {
  Deny: "deny",
  Log: "log",
  Challenge: "challenge",
} as const;
export type GetFirewallConfigSecurityResponseAction = ClosedEnum<
  typeof GetFirewallConfigSecurityResponseAction
>;

export type ManagedRules = {
  active: boolean;
  action?: GetFirewallConfigSecurityResponseAction | undefined;
  updatedAt?: string | undefined;
  userId?: string | undefined;
  username?: string | undefined;
};

/**
 * If the firewall configuration includes a [custom managed ruleset](https://vercel.com/docs/security/vercel-waf/managed-rulesets), it will include a `crs` item that has the following values: sd: Scanner Detection ma: Multipart Attack lfi: Local File Inclusion Attack rfi: Remote File Inclusion Attack rce: Remote Execution Attack php: PHP Attack gen: Generic Attack xss: XSS Attack sqli: SQL Injection Attack sf: Session Fixation Attack java: Java Attack
 */
export type GetFirewallConfigResponseBody = {
  ownerId: string;
  projectKey: string;
  id: string;
  version: number;
  updatedAt: string;
  firewallEnabled: boolean;
  /**
   * Custom Ruleset
   */
  crs: Crs;
  rules: Array<Rules>;
  ips: Array<Ips>;
  changes: Array<Changes>;
  managedRules?: { [k: string]: ManagedRules } | undefined;
};

/** @internal */
export const GetFirewallConfigRequest$inboundSchema: z.ZodType<
  GetFirewallConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  configVersion: z.string(),
});

/** @internal */
export type GetFirewallConfigRequest$Outbound = {
  projectId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  configVersion: string;
};

/** @internal */
export const GetFirewallConfigRequest$outboundSchema: z.ZodType<
  GetFirewallConfigRequest$Outbound,
  z.ZodTypeDef,
  GetFirewallConfigRequest
> = z.object({
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  configVersion: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigRequest$ {
  /** @deprecated use `GetFirewallConfigRequest$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigRequest$inboundSchema;
  /** @deprecated use `GetFirewallConfigRequest$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigRequest$outboundSchema;
  /** @deprecated use `GetFirewallConfigRequest$Outbound` instead. */
  export type Outbound = GetFirewallConfigRequest$Outbound;
}

export function getFirewallConfigRequestToJSON(
  getFirewallConfigRequest: GetFirewallConfigRequest,
): string {
  return JSON.stringify(
    GetFirewallConfigRequest$outboundSchema.parse(getFirewallConfigRequest),
  );
}

export function getFirewallConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFirewallConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFirewallConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFirewallConfigRequest' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$outboundSchema;
}

/** @internal */
export const Sd$inboundSchema: z.ZodType<Sd, z.ZodTypeDef, unknown> = z.object({
  active: z.boolean(),
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$inboundSchema,
});

/** @internal */
export type Sd$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Sd$outboundSchema: z.ZodType<Sd$Outbound, z.ZodTypeDef, Sd> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sd$ {
  /** @deprecated use `Sd$inboundSchema` instead. */
  export const inboundSchema = Sd$inboundSchema;
  /** @deprecated use `Sd$outboundSchema` instead. */
  export const outboundSchema = Sd$outboundSchema;
  /** @deprecated use `Sd$Outbound` instead. */
  export type Outbound = Sd$Outbound;
}

export function sdToJSON(sd: Sd): string {
  return JSON.stringify(Sd$outboundSchema.parse(sd));
}

export function sdFromJSON(
  jsonString: string,
): SafeParseResult<Sd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sd' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$outboundSchema;
}

/** @internal */
export const Ma$inboundSchema: z.ZodType<Ma, z.ZodTypeDef, unknown> = z.object({
  active: z.boolean(),
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$inboundSchema,
});

/** @internal */
export type Ma$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Ma$outboundSchema: z.ZodType<Ma$Outbound, z.ZodTypeDef, Ma> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ma$ {
  /** @deprecated use `Ma$inboundSchema` instead. */
  export const inboundSchema = Ma$inboundSchema;
  /** @deprecated use `Ma$outboundSchema` instead. */
  export const outboundSchema = Ma$outboundSchema;
  /** @deprecated use `Ma$Outbound` instead. */
  export type Outbound = Ma$Outbound;
}

export function maToJSON(ma: Ma): string {
  return JSON.stringify(Ma$outboundSchema.parse(ma));
}

export function maFromJSON(
  jsonString: string,
): SafeParseResult<Ma, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ma$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ma' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$outboundSchema;
}

/** @internal */
export const Lfi$inboundSchema: z.ZodType<Lfi, z.ZodTypeDef, unknown> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$inboundSchema,
  });

/** @internal */
export type Lfi$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Lfi$outboundSchema: z.ZodType<Lfi$Outbound, z.ZodTypeDef, Lfi> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsLfiAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Lfi$ {
  /** @deprecated use `Lfi$inboundSchema` instead. */
  export const inboundSchema = Lfi$inboundSchema;
  /** @deprecated use `Lfi$outboundSchema` instead. */
  export const outboundSchema = Lfi$outboundSchema;
  /** @deprecated use `Lfi$Outbound` instead. */
  export type Outbound = Lfi$Outbound;
}

export function lfiToJSON(lfi: Lfi): string {
  return JSON.stringify(Lfi$outboundSchema.parse(lfi));
}

export function lfiFromJSON(
  jsonString: string,
): SafeParseResult<Lfi, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Lfi$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Lfi' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200Action$inboundSchema:
  z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200Action> = z
    .nativeEnum(GetFirewallConfigSecurityResponse200Action);

/** @internal */
export const GetFirewallConfigSecurityResponse200Action$outboundSchema:
  z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponse200Action> =
    GetFirewallConfigSecurityResponse200Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200Action$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200Action$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200Action$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200Action$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200Action$outboundSchema;
}

/** @internal */
export const Rfi$inboundSchema: z.ZodType<Rfi, z.ZodTypeDef, unknown> = z
  .object({
    active: z.boolean(),
    action: GetFirewallConfigSecurityResponse200Action$inboundSchema,
  });

/** @internal */
export type Rfi$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Rfi$outboundSchema: z.ZodType<Rfi$Outbound, z.ZodTypeDef, Rfi> = z
  .object({
    active: z.boolean(),
    action: GetFirewallConfigSecurityResponse200Action$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rfi$ {
  /** @deprecated use `Rfi$inboundSchema` instead. */
  export const inboundSchema = Rfi$inboundSchema;
  /** @deprecated use `Rfi$outboundSchema` instead. */
  export const outboundSchema = Rfi$outboundSchema;
  /** @deprecated use `Rfi$Outbound` instead. */
  export type Outbound = Rfi$Outbound;
}

export function rfiToJSON(rfi: Rfi): string {
  return JSON.stringify(Rfi$outboundSchema.parse(rfi));
}

export function rfiFromJSON(
  jsonString: string,
): SafeParseResult<Rfi, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rfi$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rfi' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONAction
  > = z.nativeEnum(GetFirewallConfigSecurityResponse200ApplicationJSONAction);

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONAction
  > = GetFirewallConfigSecurityResponse200ApplicationJSONAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONAction$outboundSchema;
}

/** @internal */
export const Rce$inboundSchema: z.ZodType<Rce, z.ZodTypeDef, unknown> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONAction$inboundSchema,
  });

/** @internal */
export type Rce$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Rce$outboundSchema: z.ZodType<Rce$Outbound, z.ZodTypeDef, Rce> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rce$ {
  /** @deprecated use `Rce$inboundSchema` instead. */
  export const inboundSchema = Rce$inboundSchema;
  /** @deprecated use `Rce$outboundSchema` instead. */
  export const outboundSchema = Rce$outboundSchema;
  /** @deprecated use `Rce$Outbound` instead. */
  export type Outbound = Rce$Outbound;
}

export function rceToJSON(rce: Rce): string {
  return JSON.stringify(Rce$outboundSchema.parse(rce));
}

export function rceFromJSON(
  jsonString: string,
): SafeParseResult<Rce, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rce$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rce' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$outboundSchema;
}

/** @internal */
export const Php$inboundSchema: z.ZodType<Php, z.ZodTypeDef, unknown> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$inboundSchema,
  });

/** @internal */
export type Php$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Php$outboundSchema: z.ZodType<Php$Outbound, z.ZodTypeDef, Php> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Php$ {
  /** @deprecated use `Php$inboundSchema` instead. */
  export const inboundSchema = Php$inboundSchema;
  /** @deprecated use `Php$outboundSchema` instead. */
  export const outboundSchema = Php$outboundSchema;
  /** @deprecated use `Php$Outbound` instead. */
  export type Outbound = Php$Outbound;
}

export function phpToJSON(php: Php): string {
  return JSON.stringify(Php$outboundSchema.parse(php));
}

export function phpFromJSON(
  jsonString: string,
): SafeParseResult<Php, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Php$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Php' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$outboundSchema;
}

/** @internal */
export const Gen$inboundSchema: z.ZodType<Gen, z.ZodTypeDef, unknown> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$inboundSchema,
  });

/** @internal */
export type Gen$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Gen$outboundSchema: z.ZodType<Gen$Outbound, z.ZodTypeDef, Gen> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Gen$ {
  /** @deprecated use `Gen$inboundSchema` instead. */
  export const inboundSchema = Gen$inboundSchema;
  /** @deprecated use `Gen$outboundSchema` instead. */
  export const outboundSchema = Gen$outboundSchema;
  /** @deprecated use `Gen$Outbound` instead. */
  export type Outbound = Gen$Outbound;
}

export function genToJSON(gen: Gen): string {
  return JSON.stringify(Gen$outboundSchema.parse(gen));
}

export function genFromJSON(
  jsonString: string,
): SafeParseResult<Gen, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Gen$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Gen' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$outboundSchema;
}

/** @internal */
export const Xss$inboundSchema: z.ZodType<Xss, z.ZodTypeDef, unknown> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$inboundSchema,
  });

/** @internal */
export type Xss$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Xss$outboundSchema: z.ZodType<Xss$Outbound, z.ZodTypeDef, Xss> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXssAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Xss$ {
  /** @deprecated use `Xss$inboundSchema` instead. */
  export const inboundSchema = Xss$inboundSchema;
  /** @deprecated use `Xss$outboundSchema` instead. */
  export const outboundSchema = Xss$outboundSchema;
  /** @deprecated use `Xss$Outbound` instead. */
  export type Outbound = Xss$Outbound;
}

export function xssToJSON(xss: Xss): string {
  return JSON.stringify(Xss$outboundSchema.parse(xss));
}

export function xssFromJSON(
  jsonString: string,
): SafeParseResult<Xss, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Xss$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Xss' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$outboundSchema;
}

/** @internal */
export const Sqli$inboundSchema: z.ZodType<Sqli, z.ZodTypeDef, unknown> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$inboundSchema,
  });

/** @internal */
export type Sqli$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Sqli$outboundSchema: z.ZodType<Sqli$Outbound, z.ZodTypeDef, Sqli> =
  z.object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sqli$ {
  /** @deprecated use `Sqli$inboundSchema` instead. */
  export const inboundSchema = Sqli$inboundSchema;
  /** @deprecated use `Sqli$outboundSchema` instead. */
  export const outboundSchema = Sqli$outboundSchema;
  /** @deprecated use `Sqli$Outbound` instead. */
  export type Outbound = Sqli$Outbound;
}

export function sqliToJSON(sqli: Sqli): string {
  return JSON.stringify(Sqli$outboundSchema.parse(sqli));
}

export function sqliFromJSON(
  jsonString: string,
): SafeParseResult<Sqli, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sqli$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sqli' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$outboundSchema;
}

/** @internal */
export const Sf$inboundSchema: z.ZodType<Sf, z.ZodTypeDef, unknown> = z.object({
  active: z.boolean(),
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$inboundSchema,
});

/** @internal */
export type Sf$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Sf$outboundSchema: z.ZodType<Sf$Outbound, z.ZodTypeDef, Sf> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sf$ {
  /** @deprecated use `Sf$inboundSchema` instead. */
  export const inboundSchema = Sf$inboundSchema;
  /** @deprecated use `Sf$outboundSchema` instead. */
  export const outboundSchema = Sf$outboundSchema;
  /** @deprecated use `Sf$Outbound` instead. */
  export type Outbound = Sf$Outbound;
}

export function sfToJSON(sf: Sf): string {
  return JSON.stringify(Sf$outboundSchema.parse(sf));
}

export function sfFromJSON(
  jsonString: string,
): SafeParseResult<Sf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sf' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$outboundSchema;
}

/** @internal */
export const Java$inboundSchema: z.ZodType<Java, z.ZodTypeDef, unknown> = z
  .object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$inboundSchema,
  });

/** @internal */
export type Java$Outbound = {
  active: boolean;
  action: string;
};

/** @internal */
export const Java$outboundSchema: z.ZodType<Java$Outbound, z.ZodTypeDef, Java> =
  z.object({
    active: z.boolean(),
    action:
      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Java$ {
  /** @deprecated use `Java$inboundSchema` instead. */
  export const inboundSchema = Java$inboundSchema;
  /** @deprecated use `Java$outboundSchema` instead. */
  export const outboundSchema = Java$outboundSchema;
  /** @deprecated use `Java$Outbound` instead. */
  export type Outbound = Java$Outbound;
}

export function javaToJSON(java: Java): string {
  return JSON.stringify(Java$outboundSchema.parse(java));
}

export function javaFromJSON(
  jsonString: string,
): SafeParseResult<Java, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Java$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Java' from JSON`,
  );
}

/** @internal */
export const Crs$inboundSchema: z.ZodType<Crs, z.ZodTypeDef, unknown> = z
  .object({
    sd: z.lazy(() => Sd$inboundSchema),
    ma: z.lazy(() => Ma$inboundSchema),
    lfi: z.lazy(() => Lfi$inboundSchema),
    rfi: z.lazy(() => Rfi$inboundSchema),
    rce: z.lazy(() => Rce$inboundSchema),
    php: z.lazy(() => Php$inboundSchema),
    gen: z.lazy(() => Gen$inboundSchema),
    xss: z.lazy(() => Xss$inboundSchema),
    sqli: z.lazy(() => Sqli$inboundSchema),
    sf: z.lazy(() => Sf$inboundSchema),
    java: z.lazy(() => Java$inboundSchema),
  });

/** @internal */
export type Crs$Outbound = {
  sd: Sd$Outbound;
  ma: Ma$Outbound;
  lfi: Lfi$Outbound;
  rfi: Rfi$Outbound;
  rce: Rce$Outbound;
  php: Php$Outbound;
  gen: Gen$Outbound;
  xss: Xss$Outbound;
  sqli: Sqli$Outbound;
  sf: Sf$Outbound;
  java: Java$Outbound;
};

/** @internal */
export const Crs$outboundSchema: z.ZodType<Crs$Outbound, z.ZodTypeDef, Crs> = z
  .object({
    sd: z.lazy(() => Sd$outboundSchema),
    ma: z.lazy(() => Ma$outboundSchema),
    lfi: z.lazy(() => Lfi$outboundSchema),
    rfi: z.lazy(() => Rfi$outboundSchema),
    rce: z.lazy(() => Rce$outboundSchema),
    php: z.lazy(() => Php$outboundSchema),
    gen: z.lazy(() => Gen$outboundSchema),
    xss: z.lazy(() => Xss$outboundSchema),
    sqli: z.lazy(() => Sqli$outboundSchema),
    sf: z.lazy(() => Sf$outboundSchema),
    java: z.lazy(() => Java$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Crs$ {
  /** @deprecated use `Crs$inboundSchema` instead. */
  export const inboundSchema = Crs$inboundSchema;
  /** @deprecated use `Crs$outboundSchema` instead. */
  export const outboundSchema = Crs$outboundSchema;
  /** @deprecated use `Crs$Outbound` instead. */
  export type Outbound = Crs$Outbound;
}

export function crsToJSON(crs: Crs): string {
  return JSON.stringify(Crs$outboundSchema.parse(crs));
}

export function crsFromJSON(
  jsonString: string,
): SafeParseResult<Crs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Crs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Crs' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigType$inboundSchema: z.ZodNativeEnum<
  typeof GetFirewallConfigType
> = z.nativeEnum(GetFirewallConfigType);

/** @internal */
export const GetFirewallConfigType$outboundSchema: z.ZodNativeEnum<
  typeof GetFirewallConfigType
> = GetFirewallConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigType$ {
  /** @deprecated use `GetFirewallConfigType$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigType$inboundSchema;
  /** @deprecated use `GetFirewallConfigType$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigType$outboundSchema;
}

/** @internal */
export const GetFirewallConfigOp$inboundSchema: z.ZodNativeEnum<
  typeof GetFirewallConfigOp
> = z.nativeEnum(GetFirewallConfigOp);

/** @internal */
export const GetFirewallConfigOp$outboundSchema: z.ZodNativeEnum<
  typeof GetFirewallConfigOp
> = GetFirewallConfigOp$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigOp$ {
  /** @deprecated use `GetFirewallConfigOp$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigOp$inboundSchema;
  /** @deprecated use `GetFirewallConfigOp$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigOp$outboundSchema;
}

/** @internal */
export const GetFirewallConfigValue$inboundSchema: z.ZodType<
  GetFirewallConfigValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number(), z.array(z.string())]);

/** @internal */
export type GetFirewallConfigValue$Outbound = string | number | Array<string>;

/** @internal */
export const GetFirewallConfigValue$outboundSchema: z.ZodType<
  GetFirewallConfigValue$Outbound,
  z.ZodTypeDef,
  GetFirewallConfigValue
> = z.union([z.string(), z.number(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigValue$ {
  /** @deprecated use `GetFirewallConfigValue$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigValue$inboundSchema;
  /** @deprecated use `GetFirewallConfigValue$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigValue$outboundSchema;
  /** @deprecated use `GetFirewallConfigValue$Outbound` instead. */
  export type Outbound = GetFirewallConfigValue$Outbound;
}

export function getFirewallConfigValueToJSON(
  getFirewallConfigValue: GetFirewallConfigValue,
): string {
  return JSON.stringify(
    GetFirewallConfigValue$outboundSchema.parse(getFirewallConfigValue),
  );
}

export function getFirewallConfigValueFromJSON(
  jsonString: string,
): SafeParseResult<GetFirewallConfigValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFirewallConfigValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFirewallConfigValue' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigConditions$inboundSchema: z.ZodType<
  GetFirewallConfigConditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetFirewallConfigType$inboundSchema,
  op: GetFirewallConfigOp$inboundSchema,
  neg: z.boolean().optional(),
  key: z.string().optional(),
  value: z.union([z.string(), z.number(), z.array(z.string())]).optional(),
});

/** @internal */
export type GetFirewallConfigConditions$Outbound = {
  type: string;
  op: string;
  neg?: boolean | undefined;
  key?: string | undefined;
  value?: string | number | Array<string> | undefined;
};

/** @internal */
export const GetFirewallConfigConditions$outboundSchema: z.ZodType<
  GetFirewallConfigConditions$Outbound,
  z.ZodTypeDef,
  GetFirewallConfigConditions
> = z.object({
  type: GetFirewallConfigType$outboundSchema,
  op: GetFirewallConfigOp$outboundSchema,
  neg: z.boolean().optional(),
  key: z.string().optional(),
  value: z.union([z.string(), z.number(), z.array(z.string())]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigConditions$ {
  /** @deprecated use `GetFirewallConfigConditions$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigConditions$inboundSchema;
  /** @deprecated use `GetFirewallConfigConditions$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigConditions$outboundSchema;
  /** @deprecated use `GetFirewallConfigConditions$Outbound` instead. */
  export type Outbound = GetFirewallConfigConditions$Outbound;
}

export function getFirewallConfigConditionsToJSON(
  getFirewallConfigConditions: GetFirewallConfigConditions,
): string {
  return JSON.stringify(
    GetFirewallConfigConditions$outboundSchema.parse(
      getFirewallConfigConditions,
    ),
  );
}

export function getFirewallConfigConditionsFromJSON(
  jsonString: string,
): SafeParseResult<GetFirewallConfigConditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFirewallConfigConditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFirewallConfigConditions' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigConditionGroup$inboundSchema: z.ZodType<
  GetFirewallConfigConditionGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  conditions: z.array(z.lazy(() => GetFirewallConfigConditions$inboundSchema)),
});

/** @internal */
export type GetFirewallConfigConditionGroup$Outbound = {
  conditions: Array<GetFirewallConfigConditions$Outbound>;
};

/** @internal */
export const GetFirewallConfigConditionGroup$outboundSchema: z.ZodType<
  GetFirewallConfigConditionGroup$Outbound,
  z.ZodTypeDef,
  GetFirewallConfigConditionGroup
> = z.object({
  conditions: z.array(z.lazy(() => GetFirewallConfigConditions$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigConditionGroup$ {
  /** @deprecated use `GetFirewallConfigConditionGroup$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigConditionGroup$inboundSchema;
  /** @deprecated use `GetFirewallConfigConditionGroup$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigConditionGroup$outboundSchema;
  /** @deprecated use `GetFirewallConfigConditionGroup$Outbound` instead. */
  export type Outbound = GetFirewallConfigConditionGroup$Outbound;
}

export function getFirewallConfigConditionGroupToJSON(
  getFirewallConfigConditionGroup: GetFirewallConfigConditionGroup,
): string {
  return JSON.stringify(
    GetFirewallConfigConditionGroup$outboundSchema.parse(
      getFirewallConfigConditionGroup,
    ),
  );
}

export function getFirewallConfigConditionGroupFromJSON(
  jsonString: string,
): SafeParseResult<GetFirewallConfigConditionGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFirewallConfigConditionGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFirewallConfigConditionGroup' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$outboundSchema;
}

/** @internal */
export const GetFirewallConfigAlgo$inboundSchema: z.ZodNativeEnum<
  typeof GetFirewallConfigAlgo
> = z.nativeEnum(GetFirewallConfigAlgo);

/** @internal */
export const GetFirewallConfigAlgo$outboundSchema: z.ZodNativeEnum<
  typeof GetFirewallConfigAlgo
> = GetFirewallConfigAlgo$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigAlgo$ {
  /** @deprecated use `GetFirewallConfigAlgo$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigAlgo$inboundSchema;
  /** @deprecated use `GetFirewallConfigAlgo$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigAlgo$outboundSchema;
}

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$inboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction
  > = z.nativeEnum(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction,
  );

/** @internal */
export const GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$outboundSchema:
  z.ZodNativeEnum<
    typeof GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction
  > =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$outboundSchema;
}

/** @internal */
export const GetFirewallConfigRateLimit$inboundSchema: z.ZodType<
  GetFirewallConfigRateLimit,
  z.ZodTypeDef,
  unknown
> = z.object({
  algo: GetFirewallConfigAlgo$inboundSchema,
  window: z.number(),
  limit: z.number(),
  keys: z.array(z.string()),
  action: z.nullable(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$inboundSchema,
  ).optional(),
});

/** @internal */
export type GetFirewallConfigRateLimit$Outbound = {
  algo: string;
  window: number;
  limit: number;
  keys: Array<string>;
  action?: string | null | undefined;
};

/** @internal */
export const GetFirewallConfigRateLimit$outboundSchema: z.ZodType<
  GetFirewallConfigRateLimit$Outbound,
  z.ZodTypeDef,
  GetFirewallConfigRateLimit
> = z.object({
  algo: GetFirewallConfigAlgo$outboundSchema,
  window: z.number(),
  limit: z.number(),
  keys: z.array(z.string()),
  action: z.nullable(
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction$outboundSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigRateLimit$ {
  /** @deprecated use `GetFirewallConfigRateLimit$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigRateLimit$inboundSchema;
  /** @deprecated use `GetFirewallConfigRateLimit$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigRateLimit$outboundSchema;
  /** @deprecated use `GetFirewallConfigRateLimit$Outbound` instead. */
  export type Outbound = GetFirewallConfigRateLimit$Outbound;
}

export function getFirewallConfigRateLimitToJSON(
  getFirewallConfigRateLimit: GetFirewallConfigRateLimit,
): string {
  return JSON.stringify(
    GetFirewallConfigRateLimit$outboundSchema.parse(getFirewallConfigRateLimit),
  );
}

export function getFirewallConfigRateLimitFromJSON(
  jsonString: string,
): SafeParseResult<GetFirewallConfigRateLimit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFirewallConfigRateLimit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFirewallConfigRateLimit' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigRedirect$inboundSchema: z.ZodType<
  GetFirewallConfigRedirect,
  z.ZodTypeDef,
  unknown
> = z.object({
  location: z.string(),
  permanent: z.boolean(),
});

/** @internal */
export type GetFirewallConfigRedirect$Outbound = {
  location: string;
  permanent: boolean;
};

/** @internal */
export const GetFirewallConfigRedirect$outboundSchema: z.ZodType<
  GetFirewallConfigRedirect$Outbound,
  z.ZodTypeDef,
  GetFirewallConfigRedirect
> = z.object({
  location: z.string(),
  permanent: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigRedirect$ {
  /** @deprecated use `GetFirewallConfigRedirect$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigRedirect$inboundSchema;
  /** @deprecated use `GetFirewallConfigRedirect$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigRedirect$outboundSchema;
  /** @deprecated use `GetFirewallConfigRedirect$Outbound` instead. */
  export type Outbound = GetFirewallConfigRedirect$Outbound;
}

export function getFirewallConfigRedirectToJSON(
  getFirewallConfigRedirect: GetFirewallConfigRedirect,
): string {
  return JSON.stringify(
    GetFirewallConfigRedirect$outboundSchema.parse(getFirewallConfigRedirect),
  );
}

export function getFirewallConfigRedirectFromJSON(
  jsonString: string,
): SafeParseResult<GetFirewallConfigRedirect, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFirewallConfigRedirect$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFirewallConfigRedirect' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigMitigate$inboundSchema: z.ZodType<
  GetFirewallConfigMitigate,
  z.ZodTypeDef,
  unknown
> = z.object({
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$inboundSchema,
  rateLimit: z.nullable(z.lazy(() => GetFirewallConfigRateLimit$inboundSchema))
    .optional(),
  redirect: z.nullable(z.lazy(() => GetFirewallConfigRedirect$inboundSchema))
    .optional(),
  actionDuration: z.nullable(z.string()).optional(),
  bypassSystem: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetFirewallConfigMitigate$Outbound = {
  action: string;
  rateLimit?: GetFirewallConfigRateLimit$Outbound | null | undefined;
  redirect?: GetFirewallConfigRedirect$Outbound | null | undefined;
  actionDuration?: string | null | undefined;
  bypassSystem?: boolean | null | undefined;
};

/** @internal */
export const GetFirewallConfigMitigate$outboundSchema: z.ZodType<
  GetFirewallConfigMitigate$Outbound,
  z.ZodTypeDef,
  GetFirewallConfigMitigate
> = z.object({
  action:
    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction$outboundSchema,
  rateLimit: z.nullable(z.lazy(() => GetFirewallConfigRateLimit$outboundSchema))
    .optional(),
  redirect: z.nullable(z.lazy(() => GetFirewallConfigRedirect$outboundSchema))
    .optional(),
  actionDuration: z.nullable(z.string()).optional(),
  bypassSystem: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigMitigate$ {
  /** @deprecated use `GetFirewallConfigMitigate$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigMitigate$inboundSchema;
  /** @deprecated use `GetFirewallConfigMitigate$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigMitigate$outboundSchema;
  /** @deprecated use `GetFirewallConfigMitigate$Outbound` instead. */
  export type Outbound = GetFirewallConfigMitigate$Outbound;
}

export function getFirewallConfigMitigateToJSON(
  getFirewallConfigMitigate: GetFirewallConfigMitigate,
): string {
  return JSON.stringify(
    GetFirewallConfigMitigate$outboundSchema.parse(getFirewallConfigMitigate),
  );
}

export function getFirewallConfigMitigateFromJSON(
  jsonString: string,
): SafeParseResult<GetFirewallConfigMitigate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFirewallConfigMitigate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFirewallConfigMitigate' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigAction$inboundSchema: z.ZodType<
  GetFirewallConfigAction,
  z.ZodTypeDef,
  unknown
> = z.object({
  mitigate: z.lazy(() => GetFirewallConfigMitigate$inboundSchema).optional(),
});

/** @internal */
export type GetFirewallConfigAction$Outbound = {
  mitigate?: GetFirewallConfigMitigate$Outbound | undefined;
};

/** @internal */
export const GetFirewallConfigAction$outboundSchema: z.ZodType<
  GetFirewallConfigAction$Outbound,
  z.ZodTypeDef,
  GetFirewallConfigAction
> = z.object({
  mitigate: z.lazy(() => GetFirewallConfigMitigate$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigAction$ {
  /** @deprecated use `GetFirewallConfigAction$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigAction$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigAction$outboundSchema;
  /** @deprecated use `GetFirewallConfigAction$Outbound` instead. */
  export type Outbound = GetFirewallConfigAction$Outbound;
}

export function getFirewallConfigActionToJSON(
  getFirewallConfigAction: GetFirewallConfigAction,
): string {
  return JSON.stringify(
    GetFirewallConfigAction$outboundSchema.parse(getFirewallConfigAction),
  );
}

export function getFirewallConfigActionFromJSON(
  jsonString: string,
): SafeParseResult<GetFirewallConfigAction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFirewallConfigAction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFirewallConfigAction' from JSON`,
  );
}

/** @internal */
export const Rules$inboundSchema: z.ZodType<Rules, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    name: z.string(),
    description: z.string().optional(),
    active: z.boolean(),
    conditionGroup: z.array(
      z.lazy(() => GetFirewallConfigConditionGroup$inboundSchema),
    ),
    action: z.lazy(() => GetFirewallConfigAction$inboundSchema),
  });

/** @internal */
export type Rules$Outbound = {
  id: string;
  name: string;
  description?: string | undefined;
  active: boolean;
  conditionGroup: Array<GetFirewallConfigConditionGroup$Outbound>;
  action: GetFirewallConfigAction$Outbound;
};

/** @internal */
export const Rules$outboundSchema: z.ZodType<
  Rules$Outbound,
  z.ZodTypeDef,
  Rules
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional(),
  active: z.boolean(),
  conditionGroup: z.array(
    z.lazy(() => GetFirewallConfigConditionGroup$outboundSchema),
  ),
  action: z.lazy(() => GetFirewallConfigAction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rules$ {
  /** @deprecated use `Rules$inboundSchema` instead. */
  export const inboundSchema = Rules$inboundSchema;
  /** @deprecated use `Rules$outboundSchema` instead. */
  export const outboundSchema = Rules$outboundSchema;
  /** @deprecated use `Rules$Outbound` instead. */
  export type Outbound = Rules$Outbound;
}

export function rulesToJSON(rules: Rules): string {
  return JSON.stringify(Rules$outboundSchema.parse(rules));
}

export function rulesFromJSON(
  jsonString: string,
): SafeParseResult<Rules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rules' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityAction$inboundSchema: z.ZodNativeEnum<
  typeof GetFirewallConfigSecurityAction
> = z.nativeEnum(GetFirewallConfigSecurityAction);

/** @internal */
export const GetFirewallConfigSecurityAction$outboundSchema: z.ZodNativeEnum<
  typeof GetFirewallConfigSecurityAction
> = GetFirewallConfigSecurityAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityAction$ {
  /** @deprecated use `GetFirewallConfigSecurityAction$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigSecurityAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityAction$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigSecurityAction$outboundSchema;
}

/** @internal */
export const Ips$inboundSchema: z.ZodType<Ips, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    hostname: z.string(),
    ip: z.string(),
    notes: z.string().optional(),
    action: GetFirewallConfigSecurityAction$inboundSchema,
  });

/** @internal */
export type Ips$Outbound = {
  id: string;
  hostname: string;
  ip: string;
  notes?: string | undefined;
  action: string;
};

/** @internal */
export const Ips$outboundSchema: z.ZodType<Ips$Outbound, z.ZodTypeDef, Ips> = z
  .object({
    id: z.string(),
    hostname: z.string(),
    ip: z.string(),
    notes: z.string().optional(),
    action: GetFirewallConfigSecurityAction$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ips$ {
  /** @deprecated use `Ips$inboundSchema` instead. */
  export const inboundSchema = Ips$inboundSchema;
  /** @deprecated use `Ips$outboundSchema` instead. */
  export const outboundSchema = Ips$outboundSchema;
  /** @deprecated use `Ips$Outbound` instead. */
  export type Outbound = Ips$Outbound;
}

export function ipsToJSON(ips: Ips): string {
  return JSON.stringify(Ips$outboundSchema.parse(ips));
}

export function ipsFromJSON(
  jsonString: string,
): SafeParseResult<Ips, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ips$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ips' from JSON`,
  );
}

/** @internal */
export const Changes$inboundSchema: z.ZodType<Changes, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Changes$Outbound = {};

/** @internal */
export const Changes$outboundSchema: z.ZodType<
  Changes$Outbound,
  z.ZodTypeDef,
  Changes
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Changes$ {
  /** @deprecated use `Changes$inboundSchema` instead. */
  export const inboundSchema = Changes$inboundSchema;
  /** @deprecated use `Changes$outboundSchema` instead. */
  export const outboundSchema = Changes$outboundSchema;
  /** @deprecated use `Changes$Outbound` instead. */
  export type Outbound = Changes$Outbound;
}

export function changesToJSON(changes: Changes): string {
  return JSON.stringify(Changes$outboundSchema.parse(changes));
}

export function changesFromJSON(
  jsonString: string,
): SafeParseResult<Changes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Changes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Changes' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigSecurityResponseAction$inboundSchema:
  z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponseAction> = z
    .nativeEnum(GetFirewallConfigSecurityResponseAction);

/** @internal */
export const GetFirewallConfigSecurityResponseAction$outboundSchema:
  z.ZodNativeEnum<typeof GetFirewallConfigSecurityResponseAction> =
    GetFirewallConfigSecurityResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigSecurityResponseAction$ {
  /** @deprecated use `GetFirewallConfigSecurityResponseAction$inboundSchema` instead. */
  export const inboundSchema =
    GetFirewallConfigSecurityResponseAction$inboundSchema;
  /** @deprecated use `GetFirewallConfigSecurityResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    GetFirewallConfigSecurityResponseAction$outboundSchema;
}

/** @internal */
export const ManagedRules$inboundSchema: z.ZodType<
  ManagedRules,
  z.ZodTypeDef,
  unknown
> = z.object({
  active: z.boolean(),
  action: GetFirewallConfigSecurityResponseAction$inboundSchema.optional(),
  updatedAt: z.string().optional(),
  userId: z.string().optional(),
  username: z.string().optional(),
});

/** @internal */
export type ManagedRules$Outbound = {
  active: boolean;
  action?: string | undefined;
  updatedAt?: string | undefined;
  userId?: string | undefined;
  username?: string | undefined;
};

/** @internal */
export const ManagedRules$outboundSchema: z.ZodType<
  ManagedRules$Outbound,
  z.ZodTypeDef,
  ManagedRules
> = z.object({
  active: z.boolean(),
  action: GetFirewallConfigSecurityResponseAction$outboundSchema.optional(),
  updatedAt: z.string().optional(),
  userId: z.string().optional(),
  username: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ManagedRules$ {
  /** @deprecated use `ManagedRules$inboundSchema` instead. */
  export const inboundSchema = ManagedRules$inboundSchema;
  /** @deprecated use `ManagedRules$outboundSchema` instead. */
  export const outboundSchema = ManagedRules$outboundSchema;
  /** @deprecated use `ManagedRules$Outbound` instead. */
  export type Outbound = ManagedRules$Outbound;
}

export function managedRulesToJSON(managedRules: ManagedRules): string {
  return JSON.stringify(ManagedRules$outboundSchema.parse(managedRules));
}

export function managedRulesFromJSON(
  jsonString: string,
): SafeParseResult<ManagedRules, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ManagedRules$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ManagedRules' from JSON`,
  );
}

/** @internal */
export const GetFirewallConfigResponseBody$inboundSchema: z.ZodType<
  GetFirewallConfigResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ownerId: z.string(),
  projectKey: z.string(),
  id: z.string(),
  version: z.number(),
  updatedAt: z.string(),
  firewallEnabled: z.boolean(),
  crs: z.lazy(() => Crs$inboundSchema),
  rules: z.array(z.lazy(() => Rules$inboundSchema)),
  ips: z.array(z.lazy(() => Ips$inboundSchema)),
  changes: z.array(z.lazy(() => Changes$inboundSchema)),
  managedRules: z.record(z.lazy(() => ManagedRules$inboundSchema)).optional(),
});

/** @internal */
export type GetFirewallConfigResponseBody$Outbound = {
  ownerId: string;
  projectKey: string;
  id: string;
  version: number;
  updatedAt: string;
  firewallEnabled: boolean;
  crs: Crs$Outbound;
  rules: Array<Rules$Outbound>;
  ips: Array<Ips$Outbound>;
  changes: Array<Changes$Outbound>;
  managedRules?: { [k: string]: ManagedRules$Outbound } | undefined;
};

/** @internal */
export const GetFirewallConfigResponseBody$outboundSchema: z.ZodType<
  GetFirewallConfigResponseBody$Outbound,
  z.ZodTypeDef,
  GetFirewallConfigResponseBody
> = z.object({
  ownerId: z.string(),
  projectKey: z.string(),
  id: z.string(),
  version: z.number(),
  updatedAt: z.string(),
  firewallEnabled: z.boolean(),
  crs: z.lazy(() => Crs$outboundSchema),
  rules: z.array(z.lazy(() => Rules$outboundSchema)),
  ips: z.array(z.lazy(() => Ips$outboundSchema)),
  changes: z.array(z.lazy(() => Changes$outboundSchema)),
  managedRules: z.record(z.lazy(() => ManagedRules$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFirewallConfigResponseBody$ {
  /** @deprecated use `GetFirewallConfigResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetFirewallConfigResponseBody$inboundSchema;
  /** @deprecated use `GetFirewallConfigResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetFirewallConfigResponseBody$outboundSchema;
  /** @deprecated use `GetFirewallConfigResponseBody$Outbound` instead. */
  export type Outbound = GetFirewallConfigResponseBody$Outbound;
}

export function getFirewallConfigResponseBodyToJSON(
  getFirewallConfigResponseBody: GetFirewallConfigResponseBody,
): string {
  return JSON.stringify(
    GetFirewallConfigResponseBody$outboundSchema.parse(
      getFirewallConfigResponseBody,
    ),
  );
}

export function getFirewallConfigResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetFirewallConfigResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFirewallConfigResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFirewallConfigResponseBody' from JSON`,
  );
}
