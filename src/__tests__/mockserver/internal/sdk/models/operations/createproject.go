// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type Target2 string

const (
	Target2Production  Target2 = "production"
	Target2Preview     Target2 = "preview"
	Target2Development Target2 = "development"
)

func (e Target2) ToPointer() *Target2 {
	return &e
}
func (e *Target2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = Target2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Target2: %v", v)
	}
}

type Target1 string

const (
	Target1Production  Target1 = "production"
	Target1Preview     Target1 = "preview"
	Target1Development Target1 = "development"
)

func (e Target1) ToPointer() *Target1 {
	return &e
}
func (e *Target1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = Target1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Target1: %v", v)
	}
}

type TargetType string

const (
	TargetTypeTarget1        TargetType = "target_1"
	TargetTypeArrayOfTarget2 TargetType = "arrayOfTarget2"
)

// Deployment Target or Targets in which the ENV variable will be used
type Target struct {
	Target1        *Target1
	ArrayOfTarget2 []Target2

	Type TargetType
}

func CreateTargetTarget1(target1 Target1) Target {
	typ := TargetTypeTarget1

	return Target{
		Target1: &target1,
		Type:    typ,
	}
}

func CreateTargetArrayOfTarget2(arrayOfTarget2 []Target2) Target {
	typ := TargetTypeArrayOfTarget2

	return Target{
		ArrayOfTarget2: arrayOfTarget2,
		Type:           typ,
	}
}

func (u *Target) UnmarshalJSON(data []byte) error {

	var target1 Target1 = Target1("")
	if err := utils.UnmarshalJSON(data, &target1, "", true, true); err == nil {
		u.Target1 = &target1
		u.Type = TargetTypeTarget1
		return nil
	}

	var arrayOfTarget2 []Target2 = []Target2{}
	if err := utils.UnmarshalJSON(data, &arrayOfTarget2, "", true, true); err == nil {
		u.ArrayOfTarget2 = arrayOfTarget2
		u.Type = TargetTypeArrayOfTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Target", string(data))
}

func (u Target) MarshalJSON() ([]byte, error) {
	if u.Target1 != nil {
		return utils.MarshalJSON(u.Target1, "", true)
	}

	if u.ArrayOfTarget2 != nil {
		return utils.MarshalJSON(u.ArrayOfTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type Target: all fields are null")
}

// CreateProjectType - Type of the ENV variable
type CreateProjectType string

const (
	CreateProjectTypeSystem    CreateProjectType = "system"
	CreateProjectTypeSecret    CreateProjectType = "secret"
	CreateProjectTypeEncrypted CreateProjectType = "encrypted"
	CreateProjectTypePlain     CreateProjectType = "plain"
	CreateProjectTypeSensitive CreateProjectType = "sensitive"
)

func (e CreateProjectType) ToPointer() *CreateProjectType {
	return &e
}
func (e *CreateProjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectType: %v", v)
	}
}

type EnvironmentVariables struct {
	// Name of the ENV variable
	Key string `json:"key"`
	// Deployment Target or Targets in which the ENV variable will be used
	Target Target `json:"target"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// Type of the ENV variable
	Type *CreateProjectType `json:"type,omitempty"`
	// Value for the ENV variable
	Value string `json:"value"`
}

func (o *EnvironmentVariables) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *EnvironmentVariables) GetTarget() Target {
	if o == nil {
		return Target{}
	}
	return o.Target
}

func (o *EnvironmentVariables) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EnvironmentVariables) GetType() *CreateProjectType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EnvironmentVariables) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateProjectFramework - The framework that is being used for this project. When `null` is used no framework is selected
type CreateProjectFramework string

const (
	CreateProjectFrameworkBlitzjs        CreateProjectFramework = "blitzjs"
	CreateProjectFrameworkNextjs         CreateProjectFramework = "nextjs"
	CreateProjectFrameworkGatsby         CreateProjectFramework = "gatsby"
	CreateProjectFrameworkRemix          CreateProjectFramework = "remix"
	CreateProjectFrameworkReactRouter    CreateProjectFramework = "react-router"
	CreateProjectFrameworkAstro          CreateProjectFramework = "astro"
	CreateProjectFrameworkHexo           CreateProjectFramework = "hexo"
	CreateProjectFrameworkEleventy       CreateProjectFramework = "eleventy"
	CreateProjectFrameworkDocusaurus2    CreateProjectFramework = "docusaurus-2"
	CreateProjectFrameworkDocusaurus     CreateProjectFramework = "docusaurus"
	CreateProjectFrameworkPreact         CreateProjectFramework = "preact"
	CreateProjectFrameworkSolidstart1    CreateProjectFramework = "solidstart-1"
	CreateProjectFrameworkSolidstart     CreateProjectFramework = "solidstart"
	CreateProjectFrameworkDojo           CreateProjectFramework = "dojo"
	CreateProjectFrameworkEmber          CreateProjectFramework = "ember"
	CreateProjectFrameworkVue            CreateProjectFramework = "vue"
	CreateProjectFrameworkScully         CreateProjectFramework = "scully"
	CreateProjectFrameworkIonicAngular   CreateProjectFramework = "ionic-angular"
	CreateProjectFrameworkAngular        CreateProjectFramework = "angular"
	CreateProjectFrameworkPolymer        CreateProjectFramework = "polymer"
	CreateProjectFrameworkSvelte         CreateProjectFramework = "svelte"
	CreateProjectFrameworkSveltekit      CreateProjectFramework = "sveltekit"
	CreateProjectFrameworkSveltekit1     CreateProjectFramework = "sveltekit-1"
	CreateProjectFrameworkIonicReact     CreateProjectFramework = "ionic-react"
	CreateProjectFrameworkCreateReactApp CreateProjectFramework = "create-react-app"
	CreateProjectFrameworkGridsome       CreateProjectFramework = "gridsome"
	CreateProjectFrameworkUmijs          CreateProjectFramework = "umijs"
	CreateProjectFrameworkSapper         CreateProjectFramework = "sapper"
	CreateProjectFrameworkSaber          CreateProjectFramework = "saber"
	CreateProjectFrameworkStencil        CreateProjectFramework = "stencil"
	CreateProjectFrameworkNuxtjs         CreateProjectFramework = "nuxtjs"
	CreateProjectFrameworkRedwoodjs      CreateProjectFramework = "redwoodjs"
	CreateProjectFrameworkHugo           CreateProjectFramework = "hugo"
	CreateProjectFrameworkJekyll         CreateProjectFramework = "jekyll"
	CreateProjectFrameworkBrunch         CreateProjectFramework = "brunch"
	CreateProjectFrameworkMiddleman      CreateProjectFramework = "middleman"
	CreateProjectFrameworkZola           CreateProjectFramework = "zola"
	CreateProjectFrameworkHydrogen       CreateProjectFramework = "hydrogen"
	CreateProjectFrameworkVite           CreateProjectFramework = "vite"
	CreateProjectFrameworkVitepress      CreateProjectFramework = "vitepress"
	CreateProjectFrameworkVuepress       CreateProjectFramework = "vuepress"
	CreateProjectFrameworkParcel         CreateProjectFramework = "parcel"
	CreateProjectFrameworkFasthtml       CreateProjectFramework = "fasthtml"
	CreateProjectFrameworkSanityV3       CreateProjectFramework = "sanity-v3"
	CreateProjectFrameworkSanity         CreateProjectFramework = "sanity"
	CreateProjectFrameworkStorybook      CreateProjectFramework = "storybook"
)

func (e CreateProjectFramework) ToPointer() *CreateProjectFramework {
	return &e
}
func (e *CreateProjectFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProjectFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectFramework: %v", v)
	}
}

// CreateProjectProjectsType - The Git Provider of the repository
type CreateProjectProjectsType string

const (
	CreateProjectProjectsTypeGithub    CreateProjectProjectsType = "github"
	CreateProjectProjectsTypeGitlab    CreateProjectProjectsType = "gitlab"
	CreateProjectProjectsTypeBitbucket CreateProjectProjectsType = "bitbucket"
)

func (e CreateProjectProjectsType) ToPointer() *CreateProjectProjectsType {
	return &e
}
func (e *CreateProjectProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = CreateProjectProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsType: %v", v)
	}
}

// GitRepository - The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
type GitRepository struct {
	// The name of the git repository. For example: \"vercel/next.js\"
	Repo string `json:"repo"`
	// The Git Provider of the repository
	Type CreateProjectProjectsType `json:"type"`
}

func (o *GitRepository) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GitRepository) GetType() CreateProjectProjectsType {
	if o == nil {
		return CreateProjectProjectsType("")
	}
	return o.Type
}

// IssuerMode - team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
type IssuerMode string

const (
	IssuerModeTeam   IssuerMode = "team"
	IssuerModeGlobal IssuerMode = "global"
)

func (e IssuerMode) ToPointer() *IssuerMode {
	return &e
}
func (e *IssuerMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = IssuerMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuerMode: %v", v)
	}
}

// OidcTokenConfig - OpenID Connect JSON Web Token generation configuration.
type OidcTokenConfig struct {
	// Whether or not to generate OpenID Connect JSON Web Tokens.
	Enabled bool `json:"enabled"`
	// team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
	IssuerMode *IssuerMode `default:"global" json:"issuerMode"`
}

func (o OidcTokenConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OidcTokenConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *OidcTokenConfig) GetIssuerMode() *IssuerMode {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

type CreateProjectRequestBody struct {
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string `json:"devCommand,omitempty"`
	// Collection of ENV Variables the Project will use
	EnvironmentVariables []EnvironmentVariables `json:"environmentVariables,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *CreateProjectFramework `json:"framework,omitempty"`
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
	GitRepository *GitRepository `json:"gitRepository,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The desired name for the project
	Name string `json:"name"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not
	PublicSource *bool `json:"publicSource,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Specifies whether Zero Config Failover is enabled for this project.
	ServerlessFunctionZeroConfigFailover *bool `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	// OpenID Connect JSON Web Token generation configuration.
	OidcTokenConfig *OidcTokenConfig `json:"oidcTokenConfig,omitempty"`
	// Opt-in to skip deployments when there are no changes to the root directory and its dependencies
	EnableAffectedProjectsDeployments *bool `json:"enableAffectedProjectsDeployments,omitempty"`
}

func (o *CreateProjectRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProjectRequestBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProjectRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProjectRequestBody) GetEnvironmentVariables() []EnvironmentVariables {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *CreateProjectRequestBody) GetFramework() *CreateProjectFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProjectRequestBody) GetGitRepository() *GitRepository {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *CreateProjectRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProjectRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectRequestBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *CreateProjectRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProjectRequestBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProjectRequestBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProjectRequestBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProjectRequestBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *CreateProjectRequestBody) GetOidcTokenConfig() *OidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *CreateProjectRequestBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

type CreateProjectRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                   `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CreateProjectRequestBody `request:"mediaType=application/json"`
}

func (o *CreateProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProjectRequest) GetRequestBody() *CreateProjectRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateProjectAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *CreateProjectAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProjectAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *CreateProjectAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *CreateProjectAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *CreateProjectAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *CreateProjectAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type CreateProjectSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *CreateProjectSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *CreateProjectSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProjectSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *CreateProjectSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type CreateProjectDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *CreateProjectDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateProjectDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateProjectDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type CreateProjectCrons struct {
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	UpdatedAt  float64  `json:"updatedAt"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string                    `json:"deploymentId"`
	Definitions  []CreateProjectDefinitions `json:"definitions"`
}

func (o *CreateProjectCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *CreateProjectCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateProjectCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *CreateProjectCrons) GetDefinitions() []CreateProjectDefinitions {
	if o == nil {
		return []CreateProjectDefinitions{}
	}
	return o.Definitions
}

type CreateProjectDataCache struct {
	UserDisabled     bool     `json:"userDisabled"`
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
}

func (o *CreateProjectDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

func (o *CreateProjectDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *CreateProjectDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

type CreateProjectDeploymentExpiration struct {
	ExpirationDays           *float64 `json:"expirationDays,omitempty"`
	ExpirationDaysProduction *float64 `json:"expirationDaysProduction,omitempty"`
	ExpirationDaysCanceled   *float64 `json:"expirationDaysCanceled,omitempty"`
	ExpirationDaysErrored    *float64 `json:"expirationDaysErrored,omitempty"`
	DeploymentsToKeep        *float64 `json:"deploymentsToKeep,omitempty"`
}

func (o *CreateProjectDeploymentExpiration) GetExpirationDays() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDays
}

func (o *CreateProjectDeploymentExpiration) GetExpirationDaysProduction() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysProduction
}

func (o *CreateProjectDeploymentExpiration) GetExpirationDaysCanceled() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysCanceled
}

func (o *CreateProjectDeploymentExpiration) GetExpirationDaysErrored() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysErrored
}

func (o *CreateProjectDeploymentExpiration) GetDeploymentsToKeep() *float64 {
	if o == nil {
		return nil
	}
	return o.DeploymentsToKeep
}

type CreateProjectTarget2 string

const (
	CreateProjectTarget2Production  CreateProjectTarget2 = "production"
	CreateProjectTarget2Preview     CreateProjectTarget2 = "preview"
	CreateProjectTarget2Development CreateProjectTarget2 = "development"
)

func (e CreateProjectTarget2) ToPointer() *CreateProjectTarget2 {
	return &e
}
func (e *CreateProjectTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTarget2: %v", v)
	}
}

type CreateProjectTarget1 string

const (
	CreateProjectTarget1Production  CreateProjectTarget1 = "production"
	CreateProjectTarget1Preview     CreateProjectTarget1 = "preview"
	CreateProjectTarget1Development CreateProjectTarget1 = "development"
)

func (e CreateProjectTarget1) ToPointer() *CreateProjectTarget1 {
	return &e
}
func (e *CreateProjectTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTarget1: %v", v)
	}
}

type CreateProjectTargetType string

const (
	CreateProjectTargetTypeArrayOfCreateProjectTarget1 CreateProjectTargetType = "arrayOfCreateProjectTarget1"
	CreateProjectTargetTypeCreateProjectTarget2        CreateProjectTargetType = "createProject_target_2"
)

type CreateProjectTarget struct {
	ArrayOfCreateProjectTarget1 []CreateProjectTarget1
	CreateProjectTarget2        *CreateProjectTarget2

	Type CreateProjectTargetType
}

func CreateCreateProjectTargetArrayOfCreateProjectTarget1(arrayOfCreateProjectTarget1 []CreateProjectTarget1) CreateProjectTarget {
	typ := CreateProjectTargetTypeArrayOfCreateProjectTarget1

	return CreateProjectTarget{
		ArrayOfCreateProjectTarget1: arrayOfCreateProjectTarget1,
		Type:                        typ,
	}
}

func CreateCreateProjectTargetCreateProjectTarget2(createProjectTarget2 CreateProjectTarget2) CreateProjectTarget {
	typ := CreateProjectTargetTypeCreateProjectTarget2

	return CreateProjectTarget{
		CreateProjectTarget2: &createProjectTarget2,
		Type:                 typ,
	}
}

func (u *CreateProjectTarget) UnmarshalJSON(data []byte) error {

	var arrayOfCreateProjectTarget1 []CreateProjectTarget1 = []CreateProjectTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectTarget1, "", true, true); err == nil {
		u.ArrayOfCreateProjectTarget1 = arrayOfCreateProjectTarget1
		u.Type = CreateProjectTargetTypeArrayOfCreateProjectTarget1
		return nil
	}

	var createProjectTarget2 CreateProjectTarget2 = CreateProjectTarget2("")
	if err := utils.UnmarshalJSON(data, &createProjectTarget2, "", true, true); err == nil {
		u.CreateProjectTarget2 = &createProjectTarget2
		u.Type = CreateProjectTargetTypeCreateProjectTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectTarget", string(data))
}

func (u CreateProjectTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateProjectTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectTarget1, "", true)
	}

	if u.CreateProjectTarget2 != nil {
		return utils.MarshalJSON(u.CreateProjectTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectTarget: all fields are null")
}

type CreateProjectProjectsResponseType string

const (
	CreateProjectProjectsResponseTypeSystem    CreateProjectProjectsResponseType = "system"
	CreateProjectProjectsResponseTypeEncrypted CreateProjectProjectsResponseType = "encrypted"
	CreateProjectProjectsResponseTypePlain     CreateProjectProjectsResponseType = "plain"
	CreateProjectProjectsResponseTypeSensitive CreateProjectProjectsResponseType = "sensitive"
	CreateProjectProjectsResponseTypeSecret    CreateProjectProjectsResponseType = "secret"
)

func (e CreateProjectProjectsResponseType) ToPointer() *CreateProjectProjectsResponseType {
	return &e
}
func (e *CreateProjectProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = CreateProjectProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponseType: %v", v)
	}
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15TypeFlagsConnectionString CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type = "flags-connection-string"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type: %v", v)
	}
}

type ContentHint15 struct {
	Type      CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type `json:"type"`
	ProjectID string                                                                          `json:"projectId"`
}

func (o *ContentHint15) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type("")
	}
	return o.Type
}

func (o *ContentHint15) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14TypeIntegrationStoreSecret CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = "integration-store-secret"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type: %v", v)
	}
}

type ContentHint14 struct {
	Type                       CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type `json:"type"`
	StoreID                    string                                                                          `json:"storeId"`
	IntegrationID              string                                                                          `json:"integrationId"`
	IntegrationProductID       string                                                                          `json:"integrationProductId"`
	IntegrationConfigurationID string                                                                          `json:"integrationConfigurationId"`
}

func (o *ContentHint14) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type("")
	}
	return o.Type
}

func (o *ContentHint14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *ContentHint14) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *ContentHint14) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *ContentHint14) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13TypePostgresURLNoSsl CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = "postgres-url-no-ssl"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type: %v", v)
	}
}

type ContentHint13 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *ContentHint13) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type("")
	}
	return o.Type
}

func (o *ContentHint13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12TypePostgresDatabase CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = "postgres-database"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type: %v", v)
	}
}

type ContentHint12 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *ContentHint12) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type("")
	}
	return o.Type
}

func (o *ContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11TypePostgresPassword CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = "postgres-password"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type: %v", v)
	}
}

type ContentHint11 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *ContentHint11) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type("")
	}
	return o.Type
}

func (o *ContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10TypePostgresHost CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = "postgres-host"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type: %v", v)
	}
}

type CreateProjectContentHint10 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *CreateProjectContentHint10) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type("")
	}
	return o.Type
}

func (o *CreateProjectContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9TypePostgresUser CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = "postgres-user"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type: %v", v)
	}
}

type CreateProjectContentHint9 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *CreateProjectContentHint9) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type("")
	}
	return o.Type
}

func (o *CreateProjectContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8TypePostgresPrismaURL CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type = "postgres-prisma-url"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type: %v", v)
	}
}

type CreateProjectContentHint8 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *CreateProjectContentHint8) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type("")
	}
	return o.Type
}

func (o *CreateProjectContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvTypePostgresURLNonPooling CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = "postgres-url-non-pooling"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

type CreateProjectContentHint7 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *CreateProjectContentHint7) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyTypePostgresURL CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType = "postgres-url"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type CreateProjectContentHint6 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                     `json:"storeId"`
}

func (o *CreateProjectContentHint6) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200ApplicationJSONType string

const (
	CreateProjectContentHintProjectsResponse200ApplicationJSONTypeBlobReadWriteToken CreateProjectContentHintProjectsResponse200ApplicationJSONType = "blob-read-write-token"
)

func (e CreateProjectContentHintProjectsResponse200ApplicationJSONType) ToPointer() *CreateProjectContentHintProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreateProjectContentHintProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type CreateProjectContentHint5 struct {
	Type    CreateProjectContentHintProjectsResponse200ApplicationJSONType `json:"type"`
	StoreID string                                                         `json:"storeId"`
}

func (o *CreateProjectContentHint5) GetType() CreateProjectContentHintProjectsResponse200ApplicationJSONType {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponse200Type string

const (
	CreateProjectContentHintProjectsResponse200TypeRedisRestAPIReadOnlyToken CreateProjectContentHintProjectsResponse200Type = "redis-rest-api-read-only-token"
)

func (e CreateProjectContentHintProjectsResponse200Type) ToPointer() *CreateProjectContentHintProjectsResponse200Type {
	return &e
}
func (e *CreateProjectContentHintProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreateProjectContentHintProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponse200Type: %v", v)
	}
}

type CreateProjectContentHint4 struct {
	Type    CreateProjectContentHintProjectsResponse200Type `json:"type"`
	StoreID string                                          `json:"storeId"`
}

func (o *CreateProjectContentHint4) GetType() CreateProjectContentHintProjectsResponse200Type {
	if o == nil {
		return CreateProjectContentHintProjectsResponse200Type("")
	}
	return o.Type
}

func (o *CreateProjectContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsResponseType string

const (
	CreateProjectContentHintProjectsResponseTypeRedisRestAPIToken CreateProjectContentHintProjectsResponseType = "redis-rest-api-token"
)

func (e CreateProjectContentHintProjectsResponseType) ToPointer() *CreateProjectContentHintProjectsResponseType {
	return &e
}
func (e *CreateProjectContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreateProjectContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsResponseType: %v", v)
	}
}

type CreateProjectContentHint3 struct {
	Type    CreateProjectContentHintProjectsResponseType `json:"type"`
	StoreID string                                       `json:"storeId"`
}

func (o *CreateProjectContentHint3) GetType() CreateProjectContentHintProjectsResponseType {
	if o == nil {
		return CreateProjectContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintProjectsType string

const (
	CreateProjectContentHintProjectsTypeRedisRestAPIURL CreateProjectContentHintProjectsType = "redis-rest-api-url"
)

func (e CreateProjectContentHintProjectsType) ToPointer() *CreateProjectContentHintProjectsType {
	return &e
}
func (e *CreateProjectContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreateProjectContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintProjectsType: %v", v)
	}
}

type CreateProjectContentHint2 struct {
	Type    CreateProjectContentHintProjectsType `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *CreateProjectContentHint2) GetType() CreateProjectContentHintProjectsType {
	if o == nil {
		return CreateProjectContentHintProjectsType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintType string

const (
	CreateProjectContentHintTypeRedisURL CreateProjectContentHintType = "redis-url"
)

func (e CreateProjectContentHintType) ToPointer() *CreateProjectContentHintType {
	return &e
}
func (e *CreateProjectContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreateProjectContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectContentHintType: %v", v)
	}
}

type CreateProjectContentHint1 struct {
	Type    CreateProjectContentHintType `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *CreateProjectContentHint1) GetType() CreateProjectContentHintType {
	if o == nil {
		return CreateProjectContentHintType("")
	}
	return o.Type
}

func (o *CreateProjectContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintUnionType string

const (
	CreateProjectContentHintUnionTypeCreateProjectContentHint1  CreateProjectContentHintUnionType = "createProject_contentHint_1"
	CreateProjectContentHintUnionTypeCreateProjectContentHint2  CreateProjectContentHintUnionType = "createProject_contentHint_2"
	CreateProjectContentHintUnionTypeCreateProjectContentHint3  CreateProjectContentHintUnionType = "createProject_contentHint_3"
	CreateProjectContentHintUnionTypeCreateProjectContentHint4  CreateProjectContentHintUnionType = "createProject_contentHint_4"
	CreateProjectContentHintUnionTypeCreateProjectContentHint5  CreateProjectContentHintUnionType = "createProject_contentHint_5"
	CreateProjectContentHintUnionTypeCreateProjectContentHint6  CreateProjectContentHintUnionType = "createProject_contentHint_6"
	CreateProjectContentHintUnionTypeCreateProjectContentHint7  CreateProjectContentHintUnionType = "createProject_contentHint_7"
	CreateProjectContentHintUnionTypeCreateProjectContentHint8  CreateProjectContentHintUnionType = "createProject_contentHint_8"
	CreateProjectContentHintUnionTypeCreateProjectContentHint9  CreateProjectContentHintUnionType = "createProject_contentHint_9"
	CreateProjectContentHintUnionTypeCreateProjectContentHint10 CreateProjectContentHintUnionType = "createProject_contentHint_10"
	CreateProjectContentHintUnionTypeContentHint11              CreateProjectContentHintUnionType = "contentHint_11"
	CreateProjectContentHintUnionTypeContentHint12              CreateProjectContentHintUnionType = "contentHint_12"
	CreateProjectContentHintUnionTypeContentHint13              CreateProjectContentHintUnionType = "contentHint_13"
	CreateProjectContentHintUnionTypeContentHint14              CreateProjectContentHintUnionType = "contentHint_14"
	CreateProjectContentHintUnionTypeContentHint15              CreateProjectContentHintUnionType = "contentHint_15"
)

type CreateProjectContentHint struct {
	CreateProjectContentHint1  *CreateProjectContentHint1
	CreateProjectContentHint2  *CreateProjectContentHint2
	CreateProjectContentHint3  *CreateProjectContentHint3
	CreateProjectContentHint4  *CreateProjectContentHint4
	CreateProjectContentHint5  *CreateProjectContentHint5
	CreateProjectContentHint6  *CreateProjectContentHint6
	CreateProjectContentHint7  *CreateProjectContentHint7
	CreateProjectContentHint8  *CreateProjectContentHint8
	CreateProjectContentHint9  *CreateProjectContentHint9
	CreateProjectContentHint10 *CreateProjectContentHint10
	ContentHint11              *ContentHint11
	ContentHint12              *ContentHint12
	ContentHint13              *ContentHint13
	ContentHint14              *ContentHint14
	ContentHint15              *ContentHint15

	Type CreateProjectContentHintUnionType
}

func CreateCreateProjectContentHintCreateProjectContentHint1(createProjectContentHint1 CreateProjectContentHint1) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint1

	return CreateProjectContentHint{
		CreateProjectContentHint1: &createProjectContentHint1,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint2(createProjectContentHint2 CreateProjectContentHint2) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint2

	return CreateProjectContentHint{
		CreateProjectContentHint2: &createProjectContentHint2,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint3(createProjectContentHint3 CreateProjectContentHint3) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint3

	return CreateProjectContentHint{
		CreateProjectContentHint3: &createProjectContentHint3,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint4(createProjectContentHint4 CreateProjectContentHint4) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint4

	return CreateProjectContentHint{
		CreateProjectContentHint4: &createProjectContentHint4,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint5(createProjectContentHint5 CreateProjectContentHint5) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint5

	return CreateProjectContentHint{
		CreateProjectContentHint5: &createProjectContentHint5,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint6(createProjectContentHint6 CreateProjectContentHint6) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint6

	return CreateProjectContentHint{
		CreateProjectContentHint6: &createProjectContentHint6,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint7(createProjectContentHint7 CreateProjectContentHint7) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint7

	return CreateProjectContentHint{
		CreateProjectContentHint7: &createProjectContentHint7,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint8(createProjectContentHint8 CreateProjectContentHint8) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint8

	return CreateProjectContentHint{
		CreateProjectContentHint8: &createProjectContentHint8,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint9(createProjectContentHint9 CreateProjectContentHint9) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint9

	return CreateProjectContentHint{
		CreateProjectContentHint9: &createProjectContentHint9,
		Type:                      typ,
	}
}

func CreateCreateProjectContentHintCreateProjectContentHint10(createProjectContentHint10 CreateProjectContentHint10) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHint10

	return CreateProjectContentHint{
		CreateProjectContentHint10: &createProjectContentHint10,
		Type:                       typ,
	}
}

func CreateCreateProjectContentHintContentHint11(contentHint11 ContentHint11) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeContentHint11

	return CreateProjectContentHint{
		ContentHint11: &contentHint11,
		Type:          typ,
	}
}

func CreateCreateProjectContentHintContentHint12(contentHint12 ContentHint12) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeContentHint12

	return CreateProjectContentHint{
		ContentHint12: &contentHint12,
		Type:          typ,
	}
}

func CreateCreateProjectContentHintContentHint13(contentHint13 ContentHint13) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeContentHint13

	return CreateProjectContentHint{
		ContentHint13: &contentHint13,
		Type:          typ,
	}
}

func CreateCreateProjectContentHintContentHint14(contentHint14 ContentHint14) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeContentHint14

	return CreateProjectContentHint{
		ContentHint14: &contentHint14,
		Type:          typ,
	}
}

func CreateCreateProjectContentHintContentHint15(contentHint15 ContentHint15) CreateProjectContentHint {
	typ := CreateProjectContentHintUnionTypeContentHint15

	return CreateProjectContentHint{
		ContentHint15: &contentHint15,
		Type:          typ,
	}
}

func (u *CreateProjectContentHint) UnmarshalJSON(data []byte) error {

	var createProjectContentHint7 CreateProjectContentHint7 = CreateProjectContentHint7{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint7, "", true, true); err == nil {
		u.CreateProjectContentHint7 = &createProjectContentHint7
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint7
		return nil
	}

	var contentHint11 ContentHint11 = ContentHint11{}
	if err := utils.UnmarshalJSON(data, &contentHint11, "", true, true); err == nil {
		u.ContentHint11 = &contentHint11
		u.Type = CreateProjectContentHintUnionTypeContentHint11
		return nil
	}

	var createProjectContentHint3 CreateProjectContentHint3 = CreateProjectContentHint3{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint3, "", true, true); err == nil {
		u.CreateProjectContentHint3 = &createProjectContentHint3
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint3
		return nil
	}

	var createProjectContentHint4 CreateProjectContentHint4 = CreateProjectContentHint4{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint4, "", true, true); err == nil {
		u.CreateProjectContentHint4 = &createProjectContentHint4
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint4
		return nil
	}

	var createProjectContentHint5 CreateProjectContentHint5 = CreateProjectContentHint5{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint5, "", true, true); err == nil {
		u.CreateProjectContentHint5 = &createProjectContentHint5
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint5
		return nil
	}

	var createProjectContentHint6 CreateProjectContentHint6 = CreateProjectContentHint6{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint6, "", true, true); err == nil {
		u.CreateProjectContentHint6 = &createProjectContentHint6
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint6
		return nil
	}

	var createProjectContentHint2 CreateProjectContentHint2 = CreateProjectContentHint2{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint2, "", true, true); err == nil {
		u.CreateProjectContentHint2 = &createProjectContentHint2
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint2
		return nil
	}

	var createProjectContentHint9 CreateProjectContentHint9 = CreateProjectContentHint9{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint9, "", true, true); err == nil {
		u.CreateProjectContentHint9 = &createProjectContentHint9
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint9
		return nil
	}

	var createProjectContentHint1 CreateProjectContentHint1 = CreateProjectContentHint1{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint1, "", true, true); err == nil {
		u.CreateProjectContentHint1 = &createProjectContentHint1
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint1
		return nil
	}

	var createProjectContentHint10 CreateProjectContentHint10 = CreateProjectContentHint10{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint10, "", true, true); err == nil {
		u.CreateProjectContentHint10 = &createProjectContentHint10
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint10
		return nil
	}

	var createProjectContentHint8 CreateProjectContentHint8 = CreateProjectContentHint8{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHint8, "", true, true); err == nil {
		u.CreateProjectContentHint8 = &createProjectContentHint8
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHint8
		return nil
	}

	var contentHint12 ContentHint12 = ContentHint12{}
	if err := utils.UnmarshalJSON(data, &contentHint12, "", true, true); err == nil {
		u.ContentHint12 = &contentHint12
		u.Type = CreateProjectContentHintUnionTypeContentHint12
		return nil
	}

	var contentHint13 ContentHint13 = ContentHint13{}
	if err := utils.UnmarshalJSON(data, &contentHint13, "", true, true); err == nil {
		u.ContentHint13 = &contentHint13
		u.Type = CreateProjectContentHintUnionTypeContentHint13
		return nil
	}

	var contentHint15 ContentHint15 = ContentHint15{}
	if err := utils.UnmarshalJSON(data, &contentHint15, "", true, true); err == nil {
		u.ContentHint15 = &contentHint15
		u.Type = CreateProjectContentHintUnionTypeContentHint15
		return nil
	}

	var contentHint14 ContentHint14 = ContentHint14{}
	if err := utils.UnmarshalJSON(data, &contentHint14, "", true, true); err == nil {
		u.ContentHint14 = &contentHint14
		u.Type = CreateProjectContentHintUnionTypeContentHint14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectContentHint", string(data))
}

func (u CreateProjectContentHint) MarshalJSON() ([]byte, error) {
	if u.CreateProjectContentHint1 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint1, "", true)
	}

	if u.CreateProjectContentHint2 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint2, "", true)
	}

	if u.CreateProjectContentHint3 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint3, "", true)
	}

	if u.CreateProjectContentHint4 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint4, "", true)
	}

	if u.CreateProjectContentHint5 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint5, "", true)
	}

	if u.CreateProjectContentHint6 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint6, "", true)
	}

	if u.CreateProjectContentHint7 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint7, "", true)
	}

	if u.CreateProjectContentHint8 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint8, "", true)
	}

	if u.CreateProjectContentHint9 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint9, "", true)
	}

	if u.CreateProjectContentHint10 != nil {
		return utils.MarshalJSON(u.CreateProjectContentHint10, "", true)
	}

	if u.ContentHint11 != nil {
		return utils.MarshalJSON(u.ContentHint11, "", true)
	}

	if u.ContentHint12 != nil {
		return utils.MarshalJSON(u.ContentHint12, "", true)
	}

	if u.ContentHint13 != nil {
		return utils.MarshalJSON(u.ContentHint13, "", true)
	}

	if u.ContentHint14 != nil {
		return utils.MarshalJSON(u.ContentHint14, "", true)
	}

	if u.ContentHint15 != nil {
		return utils.MarshalJSON(u.ContentHint15, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectContentHint: all fields are null")
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvTypeFlagsSecret CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType = "flags-secret"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

// CreateProjectInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type CreateProjectInternalContentHint struct {
	Type CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *CreateProjectInternalContentHint) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

func (o *CreateProjectInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type CreateProjectEnv struct {
	Target *CreateProjectTarget              `json:"target,omitempty"`
	Type   CreateProjectProjectsResponseType `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                   `json:"sunsetSecretId,omitempty"`
	ID                *string                   `json:"id,omitempty"`
	Key               string                    `json:"key"`
	Value             string                    `json:"value"`
	ConfigurationID   *string                   `json:"configurationId,omitempty"`
	CreatedAt         *float64                  `json:"createdAt,omitempty"`
	UpdatedAt         *float64                  `json:"updatedAt,omitempty"`
	CreatedBy         *string                   `json:"createdBy,omitempty"`
	UpdatedBy         *string                   `json:"updatedBy,omitempty"`
	GitBranch         *string                   `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                   `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                   `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *CreateProjectContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *CreateProjectInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` and `vsmValue` are decrypted.
	Decrypted            *bool    `json:"decrypted,omitempty"`
	Comment              *string  `json:"comment,omitempty"`
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	VsmValue             *string  `json:"vsmValue,omitempty"`
}

func (o *CreateProjectEnv) GetTarget() *CreateProjectTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnv) GetType() CreateProjectProjectsResponseType {
	if o == nil {
		return CreateProjectProjectsResponseType("")
	}
	return o.Type
}

func (o *CreateProjectEnv) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *CreateProjectEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateProjectEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateProjectEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CreateProjectEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CreateProjectEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *CreateProjectEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *CreateProjectEnv) GetContentHint() *CreateProjectContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *CreateProjectEnv) GetInternalContentHint() *CreateProjectInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *CreateProjectEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *CreateProjectEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateProjectEnv) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *CreateProjectEnv) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

type CreateProjectCustomEnvironments struct {
}

type CreateProjectProjectsFramework string

const (
	CreateProjectProjectsFrameworkBlitzjs        CreateProjectProjectsFramework = "blitzjs"
	CreateProjectProjectsFrameworkNextjs         CreateProjectProjectsFramework = "nextjs"
	CreateProjectProjectsFrameworkGatsby         CreateProjectProjectsFramework = "gatsby"
	CreateProjectProjectsFrameworkRemix          CreateProjectProjectsFramework = "remix"
	CreateProjectProjectsFrameworkReactRouter    CreateProjectProjectsFramework = "react-router"
	CreateProjectProjectsFrameworkAstro          CreateProjectProjectsFramework = "astro"
	CreateProjectProjectsFrameworkHexo           CreateProjectProjectsFramework = "hexo"
	CreateProjectProjectsFrameworkEleventy       CreateProjectProjectsFramework = "eleventy"
	CreateProjectProjectsFrameworkDocusaurus2    CreateProjectProjectsFramework = "docusaurus-2"
	CreateProjectProjectsFrameworkDocusaurus     CreateProjectProjectsFramework = "docusaurus"
	CreateProjectProjectsFrameworkPreact         CreateProjectProjectsFramework = "preact"
	CreateProjectProjectsFrameworkSolidstart1    CreateProjectProjectsFramework = "solidstart-1"
	CreateProjectProjectsFrameworkSolidstart     CreateProjectProjectsFramework = "solidstart"
	CreateProjectProjectsFrameworkDojo           CreateProjectProjectsFramework = "dojo"
	CreateProjectProjectsFrameworkEmber          CreateProjectProjectsFramework = "ember"
	CreateProjectProjectsFrameworkVue            CreateProjectProjectsFramework = "vue"
	CreateProjectProjectsFrameworkScully         CreateProjectProjectsFramework = "scully"
	CreateProjectProjectsFrameworkIonicAngular   CreateProjectProjectsFramework = "ionic-angular"
	CreateProjectProjectsFrameworkAngular        CreateProjectProjectsFramework = "angular"
	CreateProjectProjectsFrameworkPolymer        CreateProjectProjectsFramework = "polymer"
	CreateProjectProjectsFrameworkSvelte         CreateProjectProjectsFramework = "svelte"
	CreateProjectProjectsFrameworkSveltekit      CreateProjectProjectsFramework = "sveltekit"
	CreateProjectProjectsFrameworkSveltekit1     CreateProjectProjectsFramework = "sveltekit-1"
	CreateProjectProjectsFrameworkIonicReact     CreateProjectProjectsFramework = "ionic-react"
	CreateProjectProjectsFrameworkCreateReactApp CreateProjectProjectsFramework = "create-react-app"
	CreateProjectProjectsFrameworkGridsome       CreateProjectProjectsFramework = "gridsome"
	CreateProjectProjectsFrameworkUmijs          CreateProjectProjectsFramework = "umijs"
	CreateProjectProjectsFrameworkSapper         CreateProjectProjectsFramework = "sapper"
	CreateProjectProjectsFrameworkSaber          CreateProjectProjectsFramework = "saber"
	CreateProjectProjectsFrameworkStencil        CreateProjectProjectsFramework = "stencil"
	CreateProjectProjectsFrameworkNuxtjs         CreateProjectProjectsFramework = "nuxtjs"
	CreateProjectProjectsFrameworkRedwoodjs      CreateProjectProjectsFramework = "redwoodjs"
	CreateProjectProjectsFrameworkHugo           CreateProjectProjectsFramework = "hugo"
	CreateProjectProjectsFrameworkJekyll         CreateProjectProjectsFramework = "jekyll"
	CreateProjectProjectsFrameworkBrunch         CreateProjectProjectsFramework = "brunch"
	CreateProjectProjectsFrameworkMiddleman      CreateProjectProjectsFramework = "middleman"
	CreateProjectProjectsFrameworkZola           CreateProjectProjectsFramework = "zola"
	CreateProjectProjectsFrameworkHydrogen       CreateProjectProjectsFramework = "hydrogen"
	CreateProjectProjectsFrameworkVite           CreateProjectProjectsFramework = "vite"
	CreateProjectProjectsFrameworkVitepress      CreateProjectProjectsFramework = "vitepress"
	CreateProjectProjectsFrameworkVuepress       CreateProjectProjectsFramework = "vuepress"
	CreateProjectProjectsFrameworkParcel         CreateProjectProjectsFramework = "parcel"
	CreateProjectProjectsFrameworkFasthtml       CreateProjectProjectsFramework = "fasthtml"
	CreateProjectProjectsFrameworkSanityV3       CreateProjectProjectsFramework = "sanity-v3"
	CreateProjectProjectsFrameworkSanity         CreateProjectProjectsFramework = "sanity"
	CreateProjectProjectsFrameworkStorybook      CreateProjectProjectsFramework = "storybook"
)

func (e CreateProjectProjectsFramework) ToPointer() *CreateProjectProjectsFramework {
	return &e
}
func (e *CreateProjectProjectsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProjectProjectsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsFramework: %v", v)
	}
}

type CreateProjectIPBuckets struct {
	Bucket       string   `json:"bucket"`
	SupportUntil *float64 `json:"supportUntil,omitempty"`
}

func (o *CreateProjectIPBuckets) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *CreateProjectIPBuckets) GetSupportUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.SupportUntil
}

type CreateProjectAliasAssignedType string

const (
	CreateProjectAliasAssignedTypeNumber  CreateProjectAliasAssignedType = "number"
	CreateProjectAliasAssignedTypeBoolean CreateProjectAliasAssignedType = "boolean"
)

type CreateProjectAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type CreateProjectAliasAssignedType
}

func CreateCreateProjectAliasAssignedNumber(number float64) CreateProjectAliasAssigned {
	typ := CreateProjectAliasAssignedTypeNumber

	return CreateProjectAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateCreateProjectAliasAssignedBoolean(boolean bool) CreateProjectAliasAssigned {
	typ := CreateProjectAliasAssignedTypeBoolean

	return CreateProjectAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateProjectAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CreateProjectAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CreateProjectAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectAliasAssigned", string(data))
}

func (u CreateProjectAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectAliasAssigned: all fields are null")
}

type CreateProjectAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateProjectAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProjectAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsTypeEndsWith   CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType = "endsWith"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsTypeStartsWith CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType = "startsWith"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsTypeEquals     CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType = "equals"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType: %v", v)
	}
}

type CreateProjectBranchMatcher struct {
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType `json:"type"`
	Pattern string                                                                           `json:"pattern"`
}

func (o *CreateProjectBranchMatcher) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyLatestDeploymentsType("")
	}
	return o.Type
}

func (o *CreateProjectBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type CreateProjectBuilds struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *CreateProjectBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *CreateProjectBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProjectBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type CreateProjectChecksConclusion string

const (
	CreateProjectChecksConclusionSucceeded CreateProjectChecksConclusion = "succeeded"
	CreateProjectChecksConclusionFailed    CreateProjectChecksConclusion = "failed"
	CreateProjectChecksConclusionSkipped   CreateProjectChecksConclusion = "skipped"
	CreateProjectChecksConclusionCanceled  CreateProjectChecksConclusion = "canceled"
)

func (e CreateProjectChecksConclusion) ToPointer() *CreateProjectChecksConclusion {
	return &e
}
func (e *CreateProjectChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateProjectChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectChecksConclusion: %v", v)
	}
}

type CreateProjectChecksState string

const (
	CreateProjectChecksStateRegistered CreateProjectChecksState = "registered"
	CreateProjectChecksStateRunning    CreateProjectChecksState = "running"
	CreateProjectChecksStateCompleted  CreateProjectChecksState = "completed"
)

func (e CreateProjectChecksState) ToPointer() *CreateProjectChecksState {
	return &e
}
func (e *CreateProjectChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateProjectChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectChecksState: %v", v)
	}
}

type CreateProjectCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *CreateProjectCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateProjectCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *CreateProjectCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *CreateProjectCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateProjectCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type CreateProjectOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *CreateProjectOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *CreateProjectOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *CreateProjectOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *CreateProjectOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *CreateProjectOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateProjectOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateProjectOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *CreateProjectOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateProjectOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type CreateProjectPlan string

const (
	CreateProjectPlanPro        CreateProjectPlan = "pro"
	CreateProjectPlanEnterprise CreateProjectPlan = "enterprise"
	CreateProjectPlanHobby      CreateProjectPlan = "hobby"
)

func (e CreateProjectPlan) ToPointer() *CreateProjectPlan {
	return &e
}
func (e *CreateProjectPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = CreateProjectPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectPlan: %v", v)
	}
}

type CreateProjectReadyState string

const (
	CreateProjectReadyStateBuilding     CreateProjectReadyState = "BUILDING"
	CreateProjectReadyStateError        CreateProjectReadyState = "ERROR"
	CreateProjectReadyStateInitializing CreateProjectReadyState = "INITIALIZING"
	CreateProjectReadyStateQueued       CreateProjectReadyState = "QUEUED"
	CreateProjectReadyStateReady        CreateProjectReadyState = "READY"
	CreateProjectReadyStateCanceled     CreateProjectReadyState = "CANCELED"
)

func (e CreateProjectReadyState) ToPointer() *CreateProjectReadyState {
	return &e
}
func (e *CreateProjectReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CreateProjectReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectReadyState: %v", v)
	}
}

type CreateProjectReadySubstate string

const (
	CreateProjectReadySubstateStaged   CreateProjectReadySubstate = "STAGED"
	CreateProjectReadySubstatePromoted CreateProjectReadySubstate = "PROMOTED"
)

func (e CreateProjectReadySubstate) ToPointer() *CreateProjectReadySubstate {
	return &e
}
func (e *CreateProjectReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CreateProjectReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectReadySubstate: %v", v)
	}
}

type CreateProjectProjectsResponse200Type string

const (
	CreateProjectProjectsResponse200TypeLambdas CreateProjectProjectsResponse200Type = "LAMBDAS"
)

func (e CreateProjectProjectsResponse200Type) ToPointer() *CreateProjectProjectsResponse200Type {
	return &e
}
func (e *CreateProjectProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateProjectProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200Type: %v", v)
	}
}

type CreateProjectLatestDeployments struct {
	ID                     string                         `json:"id"`
	Alias                  []string                       `json:"alias,omitempty"`
	AliasAssigned          *CreateProjectAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *CreateProjectAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                        `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                       `json:"automaticAliases,omitempty"`
	BranchMatcher          *CreateProjectBranchMatcher    `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                       `json:"buildingAt,omitempty"`
	Builds                 []CreateProjectBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *CreateProjectChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *CreateProjectChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                          `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                        `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                        `json:"createdAt"`
	CreatedIn              string                         `json:"createdIn"`
	Creator                *CreateProjectCreator          `json:"creator"`
	DeletedAt              *float64                       `json:"deletedAt,omitempty"`
	DeploymentHostname     string                         `json:"deploymentHostname"`
	Forced                 *bool                          `json:"forced,omitempty"`
	Name                   string                         `json:"name"`
	Meta                   map[string]string              `json:"meta,omitempty"`
	MonorepoManager        *string                        `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *CreateProjectOidcTokenClaims  `json:"oidcTokenClaims,omitempty"`
	Plan                   CreateProjectPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                 `json:"private"`
	ReadyAt                *float64                             `json:"readyAt,omitempty"`
	ReadyState             CreateProjectReadyState              `json:"readyState"`
	ReadySubstate          *CreateProjectReadySubstate          `json:"readySubstate,omitempty"`
	RequestedAt            *float64                             `json:"requestedAt,omitempty"`
	Target                 *string                              `json:"target,omitempty"`
	TeamID                 *string                              `json:"teamId,omitempty"`
	Type                   CreateProjectProjectsResponse200Type `json:"type"`
	URL                    string                               `json:"url"`
	UserID                 string                               `json:"userId"`
	WithCache              *bool                                `json:"withCache,omitempty"`
}

func (o *CreateProjectLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CreateProjectLatestDeployments) GetAliasAssigned() *CreateProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *CreateProjectLatestDeployments) GetAliasError() *CreateProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateProjectLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateProjectLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateProjectLatestDeployments) GetBranchMatcher() *CreateProjectBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *CreateProjectLatestDeployments) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *CreateProjectLatestDeployments) GetBuilds() []CreateProjectBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateProjectLatestDeployments) GetChecksConclusion() *CreateProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateProjectLatestDeployments) GetChecksState() *CreateProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateProjectLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProjectLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectLatestDeployments) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateProjectLatestDeployments) GetCreator() *CreateProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *CreateProjectLatestDeployments) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *CreateProjectLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *CreateProjectLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *CreateProjectLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateProjectLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateProjectLatestDeployments) GetOidcTokenClaims() *CreateProjectOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *CreateProjectLatestDeployments) GetPlan() CreateProjectPlan {
	if o == nil {
		return CreateProjectPlan("")
	}
	return o.Plan
}

func (o *CreateProjectLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateProjectLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateProjectLatestDeployments) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *CreateProjectLatestDeployments) GetReadyState() CreateProjectReadyState {
	if o == nil {
		return CreateProjectReadyState("")
	}
	return o.ReadyState
}

func (o *CreateProjectLatestDeployments) GetReadySubstate() *CreateProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateProjectLatestDeployments) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *CreateProjectLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectLatestDeployments) GetType() CreateProjectProjectsResponse200Type {
	if o == nil {
		return CreateProjectProjectsResponse200Type("")
	}
	return o.Type
}

func (o *CreateProjectLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateProjectLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateProjectLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type CreateProjectLinkProjectsResponseType string

const (
	CreateProjectLinkProjectsResponseTypeBitbucket CreateProjectLinkProjectsResponseType = "bitbucket"
)

func (e CreateProjectLinkProjectsResponseType) ToPointer() *CreateProjectLinkProjectsResponseType {
	return &e
}
func (e *CreateProjectLinkProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateProjectLinkProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectLinkProjectsResponseType: %v", v)
	}
}

type CreateProjectLinkProjectsResponseDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectLinkProjectsResponseDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLink3 struct {
	Name             *string                                        `json:"name,omitempty"`
	Slug             *string                                        `json:"slug,omitempty"`
	Owner            *string                                        `json:"owner,omitempty"`
	Type             *CreateProjectLinkProjectsResponseType         `json:"type,omitempty"`
	UUID             *string                                        `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                        `json:"workspaceUuid,omitempty"`
	CreatedAt        *float64                                       `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectLinkProjectsResponseDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                        `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                                       `json:"updatedAt,omitempty"`
	Sourceless       *bool                                          `json:"sourceless,omitempty"`
	ProductionBranch *string                                        `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLink3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateProjectLink3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProjectLink3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CreateProjectLink3) GetType() *CreateProjectLinkProjectsResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLink3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *CreateProjectLink3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *CreateProjectLink3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLink3) GetDeployHooks() []CreateProjectLinkProjectsResponseDeployHooks {
	if o == nil {
		return []CreateProjectLinkProjectsResponseDeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLink3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLink3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLink3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLink3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectLinkProjectsType string

const (
	CreateProjectLinkProjectsTypeGitlab CreateProjectLinkProjectsType = "gitlab"
)

func (e CreateProjectLinkProjectsType) ToPointer() *CreateProjectLinkProjectsType {
	return &e
}
func (e *CreateProjectLinkProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateProjectLinkProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectLinkProjectsType: %v", v)
	}
}

type CreateProjectLinkProjectsDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectLinkProjectsDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkProjectsDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectLinkProjectsDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectLinkProjectsDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectLinkProjectsDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLink2 struct {
	ProjectID                *string `json:"projectId,omitempty"`
	ProjectName              *string `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string `json:"projectNamespace,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
	ProjectOwnerID   *float64                               `json:"projectOwnerId,omitempty"`
	ProjectURL       *string                                `json:"projectUrl,omitempty"`
	Type             *CreateProjectLinkProjectsType         `json:"type,omitempty"`
	CreatedAt        *float64                               `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectLinkProjectsDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                               `json:"updatedAt,omitempty"`
	Sourceless       *bool                                  `json:"sourceless,omitempty"`
	ProductionBranch *string                                `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLink2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateProjectLink2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *CreateProjectLink2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *CreateProjectLink2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *CreateProjectLink2) GetProjectOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.ProjectOwnerID
}

func (o *CreateProjectLink2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *CreateProjectLink2) GetType() *CreateProjectLinkProjectsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLink2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLink2) GetDeployHooks() []CreateProjectLinkProjectsDeployHooks {
	if o == nil {
		return []CreateProjectLinkProjectsDeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLink2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLink2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLink2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLink2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectLinkType string

const (
	CreateProjectLinkTypeGithub CreateProjectLinkType = "github"
)

func (e CreateProjectLinkType) ToPointer() *CreateProjectLinkType {
	return &e
}
func (e *CreateProjectLinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateProjectLinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectLinkType: %v", v)
	}
}

type CreateProjectLinkDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectLinkDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectLinkDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectLinkDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectLinkDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLink1 struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                       `json:"repoOwnerId,omitempty"`
	Repo             *string                        `json:"repo,omitempty"`
	RepoID           *float64                       `json:"repoId,omitempty"`
	Type             *CreateProjectLinkType         `json:"type,omitempty"`
	CreatedAt        *float64                       `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectLinkDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                        `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                       `json:"updatedAt,omitempty"`
	Sourceless       *bool                          `json:"sourceless,omitempty"`
	ProductionBranch *string                        `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLink1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CreateProjectLink1) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *CreateProjectLink1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CreateProjectLink1) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *CreateProjectLink1) GetType() *CreateProjectLinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLink1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLink1) GetDeployHooks() []CreateProjectLinkDeployHooks {
	if o == nil {
		return []CreateProjectLinkDeployHooks{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLink1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLink1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLink1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLink1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectLinkUnionType string

const (
	CreateProjectLinkUnionTypeCreateProjectLink1 CreateProjectLinkUnionType = "createProject_link_1"
	CreateProjectLinkUnionTypeCreateProjectLink2 CreateProjectLinkUnionType = "createProject_link_2"
	CreateProjectLinkUnionTypeCreateProjectLink3 CreateProjectLinkUnionType = "createProject_link_3"
)

type CreateProjectLink struct {
	CreateProjectLink1 *CreateProjectLink1
	CreateProjectLink2 *CreateProjectLink2
	CreateProjectLink3 *CreateProjectLink3

	Type CreateProjectLinkUnionType
}

func CreateCreateProjectLinkCreateProjectLink1(createProjectLink1 CreateProjectLink1) CreateProjectLink {
	typ := CreateProjectLinkUnionTypeCreateProjectLink1

	return CreateProjectLink{
		CreateProjectLink1: &createProjectLink1,
		Type:               typ,
	}
}

func CreateCreateProjectLinkCreateProjectLink2(createProjectLink2 CreateProjectLink2) CreateProjectLink {
	typ := CreateProjectLinkUnionTypeCreateProjectLink2

	return CreateProjectLink{
		CreateProjectLink2: &createProjectLink2,
		Type:               typ,
	}
}

func CreateCreateProjectLinkCreateProjectLink3(createProjectLink3 CreateProjectLink3) CreateProjectLink {
	typ := CreateProjectLinkUnionTypeCreateProjectLink3

	return CreateProjectLink{
		CreateProjectLink3: &createProjectLink3,
		Type:               typ,
	}
}

func (u *CreateProjectLink) UnmarshalJSON(data []byte) error {

	var createProjectLink1 CreateProjectLink1 = CreateProjectLink1{}
	if err := utils.UnmarshalJSON(data, &createProjectLink1, "", true, true); err == nil {
		u.CreateProjectLink1 = &createProjectLink1
		u.Type = CreateProjectLinkUnionTypeCreateProjectLink1
		return nil
	}

	var createProjectLink3 CreateProjectLink3 = CreateProjectLink3{}
	if err := utils.UnmarshalJSON(data, &createProjectLink3, "", true, true); err == nil {
		u.CreateProjectLink3 = &createProjectLink3
		u.Type = CreateProjectLinkUnionTypeCreateProjectLink3
		return nil
	}

	var createProjectLink2 CreateProjectLink2 = CreateProjectLink2{}
	if err := utils.UnmarshalJSON(data, &createProjectLink2, "", true, true); err == nil {
		u.CreateProjectLink2 = &createProjectLink2
		u.Type = CreateProjectLinkUnionTypeCreateProjectLink2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectLink", string(data))
}

func (u CreateProjectLink) MarshalJSON() ([]byte, error) {
	if u.CreateProjectLink1 != nil {
		return utils.MarshalJSON(u.CreateProjectLink1, "", true)
	}

	if u.CreateProjectLink2 != nil {
		return utils.MarshalJSON(u.CreateProjectLink2, "", true)
	}

	if u.CreateProjectLink3 != nil {
		return utils.MarshalJSON(u.CreateProjectLink3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectLink: all fields are null")
}

type CreateProjectMicrofrontends2 struct {
	UpdatedAt float64 `json:"updatedAt"`
	GroupIds  []any   `json:"groupIds"`
	Enabled   bool    `json:"enabled"`
}

func (o *CreateProjectMicrofrontends2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateProjectMicrofrontends2) GetGroupIds() []any {
	if o == nil {
		return []any{}
	}
	return o.GroupIds
}

func (o *CreateProjectMicrofrontends2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type CreateProjectMicrofrontends1 struct {
	// Timestamp when the microfrontends settings were last updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether microfrontends are enabled for this project.
	Enabled bool `json:"enabled"`
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// Whether observability data should be routed to this microfrontend project or a root project.
	RouteObservabilityToThisProject *bool `json:"routeObservabilityToThisProject,omitempty"`
}

func (o *CreateProjectMicrofrontends1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateProjectMicrofrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *CreateProjectMicrofrontends1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *CreateProjectMicrofrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *CreateProjectMicrofrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *CreateProjectMicrofrontends1) GetRouteObservabilityToThisProject() *bool {
	if o == nil {
		return nil
	}
	return o.RouteObservabilityToThisProject
}

type CreateProjectMicrofrontendsType string

const (
	CreateProjectMicrofrontendsTypeCreateProjectMicrofrontends1 CreateProjectMicrofrontendsType = "createProject_microfrontends_1"
	CreateProjectMicrofrontendsTypeCreateProjectMicrofrontends2 CreateProjectMicrofrontendsType = "createProject_microfrontends_2"
)

type CreateProjectMicrofrontends struct {
	CreateProjectMicrofrontends1 *CreateProjectMicrofrontends1
	CreateProjectMicrofrontends2 *CreateProjectMicrofrontends2

	Type CreateProjectMicrofrontendsType
}

func CreateCreateProjectMicrofrontendsCreateProjectMicrofrontends1(createProjectMicrofrontends1 CreateProjectMicrofrontends1) CreateProjectMicrofrontends {
	typ := CreateProjectMicrofrontendsTypeCreateProjectMicrofrontends1

	return CreateProjectMicrofrontends{
		CreateProjectMicrofrontends1: &createProjectMicrofrontends1,
		Type:                         typ,
	}
}

func CreateCreateProjectMicrofrontendsCreateProjectMicrofrontends2(createProjectMicrofrontends2 CreateProjectMicrofrontends2) CreateProjectMicrofrontends {
	typ := CreateProjectMicrofrontendsTypeCreateProjectMicrofrontends2

	return CreateProjectMicrofrontends{
		CreateProjectMicrofrontends2: &createProjectMicrofrontends2,
		Type:                         typ,
	}
}

func (u *CreateProjectMicrofrontends) UnmarshalJSON(data []byte) error {

	var createProjectMicrofrontends2 CreateProjectMicrofrontends2 = CreateProjectMicrofrontends2{}
	if err := utils.UnmarshalJSON(data, &createProjectMicrofrontends2, "", true, true); err == nil {
		u.CreateProjectMicrofrontends2 = &createProjectMicrofrontends2
		u.Type = CreateProjectMicrofrontendsTypeCreateProjectMicrofrontends2
		return nil
	}

	var createProjectMicrofrontends1 CreateProjectMicrofrontends1 = CreateProjectMicrofrontends1{}
	if err := utils.UnmarshalJSON(data, &createProjectMicrofrontends1, "", true, true); err == nil {
		u.CreateProjectMicrofrontends1 = &createProjectMicrofrontends1
		u.Type = CreateProjectMicrofrontendsTypeCreateProjectMicrofrontends1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectMicrofrontends", string(data))
}

func (u CreateProjectMicrofrontends) MarshalJSON() ([]byte, error) {
	if u.CreateProjectMicrofrontends1 != nil {
		return utils.MarshalJSON(u.CreateProjectMicrofrontends1, "", true)
	}

	if u.CreateProjectMicrofrontends2 != nil {
		return utils.MarshalJSON(u.CreateProjectMicrofrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectMicrofrontends: all fields are null")
}

type CreateProjectNodeVersion string

const (
	CreateProjectNodeVersionTwentyTwoX CreateProjectNodeVersion = "22.x"
	CreateProjectNodeVersionTwentyX    CreateProjectNodeVersion = "20.x"
	CreateProjectNodeVersionEighteenX  CreateProjectNodeVersion = "18.x"
	CreateProjectNodeVersionSixteenX   CreateProjectNodeVersion = "16.x"
	CreateProjectNodeVersionFourteenX  CreateProjectNodeVersion = "14.x"
	CreateProjectNodeVersionTwelveX    CreateProjectNodeVersion = "12.x"
	CreateProjectNodeVersionTenX       CreateProjectNodeVersion = "10.x"
	CreateProjectNodeVersionEight10X   CreateProjectNodeVersion = "8.10.x"
)

func (e CreateProjectNodeVersion) ToPointer() *CreateProjectNodeVersion {
	return &e
}
func (e *CreateProjectNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = CreateProjectNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectNodeVersion: %v", v)
	}
}

type CreateProjectPaths struct {
	Value string `json:"value"`
}

func (o *CreateProjectPaths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProjectOptionsAllowlist struct {
	Paths []CreateProjectPaths `json:"paths"`
}

func (o *CreateProjectOptionsAllowlist) GetPaths() []CreateProjectPaths {
	if o == nil {
		return []CreateProjectPaths{}
	}
	return o.Paths
}

type CreateProjectPasswordProtection struct {
}

type CreateProjectFunctionDefaultMemoryType string

const (
	CreateProjectFunctionDefaultMemoryTypeStandardLegacy CreateProjectFunctionDefaultMemoryType = "standard_legacy"
	CreateProjectFunctionDefaultMemoryTypeStandard       CreateProjectFunctionDefaultMemoryType = "standard"
	CreateProjectFunctionDefaultMemoryTypePerformance    CreateProjectFunctionDefaultMemoryType = "performance"
)

func (e CreateProjectFunctionDefaultMemoryType) ToPointer() *CreateProjectFunctionDefaultMemoryType {
	return &e
}
func (e *CreateProjectFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = CreateProjectFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectFunctionDefaultMemoryType: %v", v)
	}
}

type CreateProjectResourceConfig struct {
	Fluid                      *bool                                   `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *CreateProjectFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                   `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                   `json:"elasticConcurrencyEnabled,omitempty"`
}

func (o *CreateProjectResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *CreateProjectResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *CreateProjectResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *CreateProjectResourceConfig) GetFunctionDefaultMemoryType() *CreateProjectFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *CreateProjectResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *CreateProjectResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

// CreateProjectStages - An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
type CreateProjectStages struct {
	// The percentage of traffic to serve to the new deployment
	TargetPercentage float64 `json:"targetPercentage"`
}

func (o *CreateProjectStages) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

type CreateProjectRollingRelease struct {
	// The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
	Target string `json:"target"`
	// minutesToRelease is the total time to gradually shift percentages. This value overrides stages and instead creates a single smooth 0-100 stage. So once we have fetched the document with the start time, subtract from the current time, and divide by total minutesToRelease, to determine what percentage of traffic the new deployment should be serving. There is no approval required, and for the case of Vercel, it would just slowly shift traffic 0 to 100%.
	MinutesToRelease *float64 `json:"minutesToRelease,omitempty"`
	// An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
	Stages []CreateProjectStages `json:"stages,omitempty"`
}

func (o *CreateProjectRollingRelease) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *CreateProjectRollingRelease) GetMinutesToRelease() *float64 {
	if o == nil {
		return nil
	}
	return o.MinutesToRelease
}

func (o *CreateProjectRollingRelease) GetStages() []CreateProjectStages {
	if o == nil {
		return nil
	}
	return o.Stages
}

type CreateProjectProjectsFunctionDefaultMemoryType string

const (
	CreateProjectProjectsFunctionDefaultMemoryTypeStandardLegacy CreateProjectProjectsFunctionDefaultMemoryType = "standard_legacy"
	CreateProjectProjectsFunctionDefaultMemoryTypeStandard       CreateProjectProjectsFunctionDefaultMemoryType = "standard"
	CreateProjectProjectsFunctionDefaultMemoryTypePerformance    CreateProjectProjectsFunctionDefaultMemoryType = "performance"
)

func (e CreateProjectProjectsFunctionDefaultMemoryType) ToPointer() *CreateProjectProjectsFunctionDefaultMemoryType {
	return &e
}
func (e *CreateProjectProjectsFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = CreateProjectProjectsFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsFunctionDefaultMemoryType: %v", v)
	}
}

type CreateProjectDefaultResourceConfig struct {
	Fluid                      *bool                                           `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                        `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                        `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *CreateProjectProjectsFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                           `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                           `json:"elasticConcurrencyEnabled,omitempty"`
}

func (o *CreateProjectDefaultResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *CreateProjectDefaultResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *CreateProjectDefaultResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *CreateProjectDefaultResourceConfig) GetFunctionDefaultMemoryType() *CreateProjectProjectsFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *CreateProjectDefaultResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *CreateProjectDefaultResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

type CreateProjectDeploymentType string

const (
	CreateProjectDeploymentTypePreview                          CreateProjectDeploymentType = "preview"
	CreateProjectDeploymentTypeAll                              CreateProjectDeploymentType = "all"
	CreateProjectDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e CreateProjectDeploymentType) ToPointer() *CreateProjectDeploymentType {
	return &e
}
func (e *CreateProjectDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = CreateProjectDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectDeploymentType: %v", v)
	}
}

type CreateProjectSsoProtection struct {
	DeploymentType CreateProjectDeploymentType `json:"deploymentType"`
}

func (o *CreateProjectSsoProtection) GetDeploymentType() CreateProjectDeploymentType {
	if o == nil {
		return CreateProjectDeploymentType("")
	}
	return o.DeploymentType
}

type CreateProjectProjectsAliasAssignedType string

const (
	CreateProjectProjectsAliasAssignedTypeNumber  CreateProjectProjectsAliasAssignedType = "number"
	CreateProjectProjectsAliasAssignedTypeBoolean CreateProjectProjectsAliasAssignedType = "boolean"
)

type CreateProjectProjectsAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type CreateProjectProjectsAliasAssignedType
}

func CreateCreateProjectProjectsAliasAssignedNumber(number float64) CreateProjectProjectsAliasAssigned {
	typ := CreateProjectProjectsAliasAssignedTypeNumber

	return CreateProjectProjectsAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateCreateProjectProjectsAliasAssignedBoolean(boolean bool) CreateProjectProjectsAliasAssigned {
	typ := CreateProjectProjectsAliasAssignedTypeBoolean

	return CreateProjectProjectsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateProjectProjectsAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CreateProjectProjectsAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CreateProjectProjectsAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectProjectsAliasAssigned", string(data))
}

func (u CreateProjectProjectsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectProjectsAliasAssigned: all fields are null")
}

type CreateProjectProjectsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateProjectProjectsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProjectProjectsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsTypeEndsWith   CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType = "endsWith"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsTypeStartsWith CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType = "startsWith"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsTypeEquals     CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType = "equals"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType: %v", v)
	}
}

type CreateProjectProjectsBranchMatcher struct {
	Type    CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType `json:"type"`
	Pattern string                                                                 `json:"pattern"`
}

func (o *CreateProjectProjectsBranchMatcher) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyTargetsType("")
	}
	return o.Type
}

func (o *CreateProjectProjectsBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type CreateProjectProjectsBuilds struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *CreateProjectProjectsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *CreateProjectProjectsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProjectProjectsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type CreateProjectProjectsChecksConclusion string

const (
	CreateProjectProjectsChecksConclusionSucceeded CreateProjectProjectsChecksConclusion = "succeeded"
	CreateProjectProjectsChecksConclusionFailed    CreateProjectProjectsChecksConclusion = "failed"
	CreateProjectProjectsChecksConclusionSkipped   CreateProjectProjectsChecksConclusion = "skipped"
	CreateProjectProjectsChecksConclusionCanceled  CreateProjectProjectsChecksConclusion = "canceled"
)

func (e CreateProjectProjectsChecksConclusion) ToPointer() *CreateProjectProjectsChecksConclusion {
	return &e
}
func (e *CreateProjectProjectsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateProjectProjectsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsChecksConclusion: %v", v)
	}
}

type CreateProjectProjectsChecksState string

const (
	CreateProjectProjectsChecksStateRegistered CreateProjectProjectsChecksState = "registered"
	CreateProjectProjectsChecksStateRunning    CreateProjectProjectsChecksState = "running"
	CreateProjectProjectsChecksStateCompleted  CreateProjectProjectsChecksState = "completed"
)

func (e CreateProjectProjectsChecksState) ToPointer() *CreateProjectProjectsChecksState {
	return &e
}
func (e *CreateProjectProjectsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateProjectProjectsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsChecksState: %v", v)
	}
}

type CreateProjectProjectsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *CreateProjectProjectsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateProjectProjectsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *CreateProjectProjectsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *CreateProjectProjectsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateProjectProjectsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type CreateProjectProjectsOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *CreateProjectProjectsOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *CreateProjectProjectsOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *CreateProjectProjectsOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *CreateProjectProjectsOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *CreateProjectProjectsOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateProjectProjectsOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateProjectProjectsOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *CreateProjectProjectsOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateProjectProjectsOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type CreateProjectProjectsPlan string

const (
	CreateProjectProjectsPlanPro        CreateProjectProjectsPlan = "pro"
	CreateProjectProjectsPlanEnterprise CreateProjectProjectsPlan = "enterprise"
	CreateProjectProjectsPlanHobby      CreateProjectProjectsPlan = "hobby"
)

func (e CreateProjectProjectsPlan) ToPointer() *CreateProjectProjectsPlan {
	return &e
}
func (e *CreateProjectProjectsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = CreateProjectProjectsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsPlan: %v", v)
	}
}

type CreateProjectProjectsReadyState string

const (
	CreateProjectProjectsReadyStateBuilding     CreateProjectProjectsReadyState = "BUILDING"
	CreateProjectProjectsReadyStateError        CreateProjectProjectsReadyState = "ERROR"
	CreateProjectProjectsReadyStateInitializing CreateProjectProjectsReadyState = "INITIALIZING"
	CreateProjectProjectsReadyStateQueued       CreateProjectProjectsReadyState = "QUEUED"
	CreateProjectProjectsReadyStateReady        CreateProjectProjectsReadyState = "READY"
	CreateProjectProjectsReadyStateCanceled     CreateProjectProjectsReadyState = "CANCELED"
)

func (e CreateProjectProjectsReadyState) ToPointer() *CreateProjectProjectsReadyState {
	return &e
}
func (e *CreateProjectProjectsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CreateProjectProjectsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsReadyState: %v", v)
	}
}

type CreateProjectProjectsReadySubstate string

const (
	CreateProjectProjectsReadySubstateStaged   CreateProjectProjectsReadySubstate = "STAGED"
	CreateProjectProjectsReadySubstatePromoted CreateProjectProjectsReadySubstate = "PROMOTED"
)

func (e CreateProjectProjectsReadySubstate) ToPointer() *CreateProjectProjectsReadySubstate {
	return &e
}
func (e *CreateProjectProjectsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = CreateProjectProjectsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsReadySubstate: %v", v)
	}
}

type CreateProjectProjectsResponse200ApplicationJSONType string

const (
	CreateProjectProjectsResponse200ApplicationJSONTypeLambdas CreateProjectProjectsResponse200ApplicationJSONType = "LAMBDAS"
)

func (e CreateProjectProjectsResponse200ApplicationJSONType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateProjectProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type CreateProjectTargets struct {
	ID                     string                                 `json:"id"`
	Alias                  []string                               `json:"alias,omitempty"`
	AliasAssigned          *CreateProjectProjectsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *CreateProjectProjectsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                               `json:"automaticAliases,omitempty"`
	BranchMatcher          *CreateProjectProjectsBranchMatcher    `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                               `json:"buildingAt,omitempty"`
	Builds                 []CreateProjectProjectsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *CreateProjectProjectsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *CreateProjectProjectsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                  `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                                `json:"createdAt"`
	CreatedIn              string                                 `json:"createdIn"`
	Creator                *CreateProjectProjectsCreator          `json:"creator"`
	DeletedAt              *float64                               `json:"deletedAt,omitempty"`
	DeploymentHostname     string                                 `json:"deploymentHostname"`
	Forced                 *bool                                  `json:"forced,omitempty"`
	Name                   string                                 `json:"name"`
	Meta                   map[string]string                      `json:"meta,omitempty"`
	MonorepoManager        *string                                `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *CreateProjectProjectsOidcTokenClaims  `json:"oidcTokenClaims,omitempty"`
	Plan                   CreateProjectProjectsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                               `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                                `json:"private"`
	ReadyAt                *float64                                            `json:"readyAt,omitempty"`
	ReadyState             CreateProjectProjectsReadyState                     `json:"readyState"`
	ReadySubstate          *CreateProjectProjectsReadySubstate                 `json:"readySubstate,omitempty"`
	RequestedAt            *float64                                            `json:"requestedAt,omitempty"`
	Target                 *string                                             `json:"target,omitempty"`
	TeamID                 *string                                             `json:"teamId,omitempty"`
	Type                   CreateProjectProjectsResponse200ApplicationJSONType `json:"type"`
	URL                    string                                              `json:"url"`
	UserID                 string                                              `json:"userId"`
	WithCache              *bool                                               `json:"withCache,omitempty"`
}

func (o *CreateProjectTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CreateProjectTargets) GetAliasAssigned() *CreateProjectProjectsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *CreateProjectTargets) GetAliasError() *CreateProjectProjectsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateProjectTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateProjectTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateProjectTargets) GetBranchMatcher() *CreateProjectProjectsBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *CreateProjectTargets) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *CreateProjectTargets) GetBuilds() []CreateProjectProjectsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateProjectTargets) GetChecksConclusion() *CreateProjectProjectsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateProjectTargets) GetChecksState() *CreateProjectProjectsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateProjectTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProjectTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectTargets) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateProjectTargets) GetCreator() *CreateProjectProjectsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *CreateProjectTargets) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *CreateProjectTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *CreateProjectTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *CreateProjectTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateProjectTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateProjectTargets) GetOidcTokenClaims() *CreateProjectProjectsOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *CreateProjectTargets) GetPlan() CreateProjectProjectsPlan {
	if o == nil {
		return CreateProjectProjectsPlan("")
	}
	return o.Plan
}

func (o *CreateProjectTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateProjectTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateProjectTargets) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *CreateProjectTargets) GetReadyState() CreateProjectProjectsReadyState {
	if o == nil {
		return CreateProjectProjectsReadyState("")
	}
	return o.ReadyState
}

func (o *CreateProjectTargets) GetReadySubstate() *CreateProjectProjectsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateProjectTargets) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *CreateProjectTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectTargets) GetType() CreateProjectProjectsResponse200ApplicationJSONType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *CreateProjectTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateProjectTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateProjectTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type CreateProjectPermissions struct {
	User                                     []components.ACLAction `json:"user,omitempty"`
	UserConnection                           []components.ACLAction `json:"userConnection,omitempty"`
	UserSudo                                 []components.ACLAction `json:"userSudo,omitempty"`
	WebAuthn                                 []components.ACLAction `json:"webAuthn,omitempty"`
	Oauth2Connection                         []components.ACLAction `json:"oauth2Connection,omitempty"`
	AccessGroup                              []components.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []components.ACLAction `json:"aliasGlobal,omitempty"`
	AnalyticsSampling                        []components.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []components.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []components.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []components.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []components.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []components.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []components.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []components.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []components.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []components.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []components.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []components.ACLAction `json:"blob,omitempty"`
	Budget                                   []components.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []components.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []components.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []components.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []components.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []components.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []components.ACLAction `json:"connectConfiguration,omitempty"`
	Domain                                   []components.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []components.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []components.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []components.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []components.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []components.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []components.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []components.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []components.ACLAction `json:"domainTransferIn,omitempty"`
	Event                                    []components.ACLAction `json:"event,omitempty"`
	OwnEvent                                 []components.ACLAction `json:"ownEvent,omitempty"`
	SensitiveEnvironmentVariablePolicy       []components.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	FileUpload                               []components.ACLAction `json:"fileUpload,omitempty"`
	FlagsExplorerSubscription                []components.ACLAction `json:"flagsExplorerSubscription,omitempty"`
	GitRepository                            []components.ACLAction `json:"gitRepository,omitempty"`
	IPBlocking                               []components.ACLAction `json:"ipBlocking,omitempty"`
	ImageOptimizationNewPrice                []components.ACLAction `json:"imageOptimizationNewPrice,omitempty"`
	Integration                              []components.ACLAction `json:"integration,omitempty"`
	IntegrationAccount                       []components.ACLAction `json:"integrationAccount,omitempty"`
	IntegrationConfiguration                 []components.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationTransfer         []components.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationConfigurationProjects         []components.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationVercelConfigurationOverride   []components.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IntegrationConfigurationRole             []components.ACLAction `json:"integrationConfigurationRole,omitempty"`
	IntegrationSSOSession                    []components.ACLAction `json:"integrationSSOSession,omitempty"`
	IntegrationResource                      []components.ACLAction `json:"integrationResource,omitempty"`
	IntegrationEvent                         []components.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []components.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationDeploymentAction              []components.ACLAction `json:"integrationDeploymentAction,omitempty"`
	MarketplaceInstallationMember            []components.ACLAction `json:"marketplaceInstallationMember,omitempty"`
	MarketplaceBillingData                   []components.ACLAction `json:"marketplaceBillingData,omitempty"`
	MarketplaceInvoice                       []components.ACLAction `json:"marketplaceInvoice,omitempty"`
	MarketplaceExperimentationItem           []components.ACLAction `json:"marketplaceExperimentationItem,omitempty"`
	MarketplaceExperimentationEdgeConfigData []components.ACLAction `json:"marketplaceExperimentationEdgeConfigData,omitempty"`
	JobGlobal                                []components.ACLAction `json:"jobGlobal,omitempty"`
	Drain                                    []components.ACLAction `json:"drain,omitempty"`
	LogDrain                                 []components.ACLAction `json:"logDrain,omitempty"`
	Monitoring                               []components.ACLAction `json:"Monitoring,omitempty"`
	MonitoringSettings                       []components.ACLAction `json:"monitoringSettings,omitempty"`
	MonitoringQuery                          []components.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringChart                          []components.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringAlert                          []components.ACLAction `json:"monitoringAlert,omitempty"`
	NotificationDeploymentFailed             []components.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []components.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []components.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []components.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []components.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []components.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []components.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []components.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationMonitoringAlert              []components.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	NotificationPaymentFailed                []components.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []components.ACLAction `json:"notificationUsageAlert,omitempty"`
	NotificationCustomerBudget               []components.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationStatementOfReasons           []components.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	ObservabilityConfiguration               []components.ACLAction `json:"observabilityConfiguration,omitempty"`
	OpenTelemetryEndpoint                    []components.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	PaymentMethod                            []components.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []components.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []components.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []components.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []components.ACLAction `json:"proTrialOnboarding,omitempty"`
	SharedEnvVars                            []components.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []components.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []components.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []components.ACLAction `json:"spaceRun,omitempty"`
	PasswordProtectionInvoiceItem            []components.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	RateLimit                                []components.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []components.ACLAction `json:"redis,omitempty"`
	Repository                               []components.ACLAction `json:"repository,omitempty"`
	RemoteCaching                            []components.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []components.ACLAction `json:"samlConfig,omitempty"`
	Secret                                   []components.ACLAction `json:"secret,omitempty"`
	RedisStoreTokenSet                       []components.ACLAction `json:"redisStoreTokenSet,omitempty"`
	BlobStoreTokenSet                        []components.ACLAction `json:"blobStoreTokenSet,omitempty"`
	PostgresStoreTokenSet                    []components.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	IntegrationStoreTokenSet                 []components.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationResourceReplCommand           []components.ACLAction `json:"integrationResourceReplCommand,omitempty"`
	StoreTransfer                            []components.ACLAction `json:"storeTransfer,omitempty"`
	SupportCase                              []components.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []components.ACLAction `json:"supportCaseComment,omitempty"`
	DataCacheBillingSettings                 []components.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	Team                                     []components.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []components.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []components.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamGitExclusivity                       []components.ACLAction `json:"teamGitExclusivity,omitempty"`
	TeamInvite                               []components.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []components.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []components.ACLAction `json:"teamJoin,omitempty"`
	TeamMicrofrontends                       []components.ACLAction `json:"teamMicrofrontends,omitempty"`
	TeamOwnMembership                        []components.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []components.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []components.ACLAction `json:"token,omitempty"`
	Usage                                    []components.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []components.ACLAction `json:"usageCycle,omitempty"`
	VpcPeeringConnection                     []components.ACLAction `json:"vpcPeeringConnection,omitempty"`
	WebAnalyticsPlan                         []components.ACLAction `json:"webAnalyticsPlan,omitempty"`
	EdgeConfig                               []components.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []components.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []components.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []components.ACLAction `json:"edgeConfigToken,omitempty"`
	Webhook                                  []components.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []components.ACLAction `json:"webhook-event,omitempty"`
	EndpointVerification                     []components.ACLAction `json:"endpointVerification,omitempty"`
	ProjectTransferIn                        []components.ACLAction `json:"projectTransferIn,omitempty"`
	Oauth2Application                        []components.ACLAction `json:"oauth2Application,omitempty"`
	AliasProject                             []components.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []components.ACLAction `json:"aliasProtectionBypass,omitempty"`
	ProductionAliasProtectionBypass          []components.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	ConnectConfigurationLink                 []components.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheNamespace                       []components.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []components.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []components.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []components.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []components.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentProductionGit                  []components.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentV0                             []components.ACLAction `json:"deploymentV0,omitempty"`
	DeploymentPreview                        []components.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []components.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentPromote                        []components.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []components.ACLAction `json:"deploymentRollback,omitempty"`
	Environments                             []components.ACLAction `json:"environments,omitempty"`
	Logs                                     []components.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []components.ACLAction `json:"logsPreset,omitempty"`
	PasswordProtection                       []components.ACLAction `json:"passwordProtection,omitempty"`
	OptionsAllowlist                         []components.ACLAction `json:"optionsAllowlist,omitempty"`
	Job                                      []components.ACLAction `json:"job,omitempty"`
	ObservabilityData                        []components.ACLAction `json:"observabilityData,omitempty"`
	Project                                  []components.ACLAction `json:"project,omitempty"`
	ProjectFromV0                            []components.ACLAction `json:"projectFromV0,omitempty"`
	ProjectAccessGroup                       []components.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []components.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectDeploymentHook                    []components.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []components.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []components.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectDomainCheckConfig                 []components.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectEnvVars                           []components.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []components.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []components.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectFlags                             []components.ACLAction `json:"projectFlags,omitempty"`
	ProjectID                                []components.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []components.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []components.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []components.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []components.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []components.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []components.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectTransfer                          []components.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferOut                       []components.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectProtectionBypass                  []components.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectUsage                             []components.ACLAction `json:"projectUsage,omitempty"`
	ProjectAnalyticsUsage                    []components.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectSupportCase                       []components.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []components.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectDeploymentExpiration              []components.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectRollingRelease                    []components.ACLAction `json:"projectRollingRelease,omitempty"`
	ProjectTier                              []components.ACLAction `json:"projectTier,omitempty"`
	SeawallConfig                            []components.ACLAction `json:"seawallConfig,omitempty"`
	SkewProtection                           []components.ACLAction `json:"skewProtection,omitempty"`
	Analytics                                []components.ACLAction `json:"analytics,omitempty"`
	TrustedIps                               []components.ACLAction `json:"trustedIps,omitempty"`
	WebAnalytics                             []components.ACLAction `json:"webAnalytics,omitempty"`
	SharedEnvVarConnection                   []components.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	Sonar                                    []components.ACLAction `json:"sonar,omitempty"`
}

func (o *CreateProjectPermissions) GetUser() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *CreateProjectPermissions) GetUserConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *CreateProjectPermissions) GetUserSudo() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserSudo
}

func (o *CreateProjectPermissions) GetWebAuthn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *CreateProjectPermissions) GetOauth2Connection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *CreateProjectPermissions) GetAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *CreateProjectPermissions) GetAliasGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *CreateProjectPermissions) GetAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *CreateProjectPermissions) GetAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *CreateProjectPermissions) GetAuditLog() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *CreateProjectPermissions) GetBillingAddress() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreateProjectPermissions) GetBillingInformation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *CreateProjectPermissions) GetBillingInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *CreateProjectPermissions) GetBillingInvoiceEmailRecipient() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *CreateProjectPermissions) GetBillingInvoiceLanguage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *CreateProjectPermissions) GetBillingPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *CreateProjectPermissions) GetBillingPurchaseOrder() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *CreateProjectPermissions) GetBillingTaxID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *CreateProjectPermissions) GetBlob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *CreateProjectPermissions) GetBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *CreateProjectPermissions) GetCacheArtifact() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *CreateProjectPermissions) GetCacheArtifactUsageEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *CreateProjectPermissions) GetCodeChecks() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *CreateProjectPermissions) GetConcurrentBuilds() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *CreateProjectPermissions) GetConnect() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *CreateProjectPermissions) GetConnectConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *CreateProjectPermissions) GetDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *CreateProjectPermissions) GetDomainAcceptDelegation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *CreateProjectPermissions) GetDomainAuthCodes() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *CreateProjectPermissions) GetDomainCertificate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *CreateProjectPermissions) GetDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *CreateProjectPermissions) GetDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *CreateProjectPermissions) GetDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *CreateProjectPermissions) GetDomainRecord() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *CreateProjectPermissions) GetDomainTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *CreateProjectPermissions) GetEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *CreateProjectPermissions) GetOwnEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *CreateProjectPermissions) GetSensitiveEnvironmentVariablePolicy() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *CreateProjectPermissions) GetFileUpload() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *CreateProjectPermissions) GetFlagsExplorerSubscription() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerSubscription
}

func (o *CreateProjectPermissions) GetGitRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *CreateProjectPermissions) GetIPBlocking() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *CreateProjectPermissions) GetImageOptimizationNewPrice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationNewPrice
}

func (o *CreateProjectPermissions) GetIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *CreateProjectPermissions) GetIntegrationAccount() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationAccount
}

func (o *CreateProjectPermissions) GetIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *CreateProjectPermissions) GetIntegrationConfigurationTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *CreateProjectPermissions) GetIntegrationConfigurationProjects() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *CreateProjectPermissions) GetIntegrationVercelConfigurationOverride() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *CreateProjectPermissions) GetIntegrationConfigurationRole() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationRole
}

func (o *CreateProjectPermissions) GetIntegrationSSOSession() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationSSOSession
}

func (o *CreateProjectPermissions) GetIntegrationResource() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResource
}

func (o *CreateProjectPermissions) GetIntegrationEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *CreateProjectPermissions) GetIntegrationResourceSecrets() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *CreateProjectPermissions) GetIntegrationDeploymentAction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationDeploymentAction
}

func (o *CreateProjectPermissions) GetMarketplaceInstallationMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInstallationMember
}

func (o *CreateProjectPermissions) GetMarketplaceBillingData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *CreateProjectPermissions) GetMarketplaceInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInvoice
}

func (o *CreateProjectPermissions) GetMarketplaceExperimentationItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationItem
}

func (o *CreateProjectPermissions) GetMarketplaceExperimentationEdgeConfigData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationEdgeConfigData
}

func (o *CreateProjectPermissions) GetJobGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *CreateProjectPermissions) GetDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Drain
}

func (o *CreateProjectPermissions) GetLogDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *CreateProjectPermissions) GetMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *CreateProjectPermissions) GetMonitoringSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *CreateProjectPermissions) GetMonitoringQuery() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *CreateProjectPermissions) GetMonitoringChart() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *CreateProjectPermissions) GetMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *CreateProjectPermissions) GetNotificationDeploymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *CreateProjectPermissions) GetNotificationDomainConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *CreateProjectPermissions) GetNotificationDomainExpire() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *CreateProjectPermissions) GetNotificationDomainMoved() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *CreateProjectPermissions) GetNotificationDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *CreateProjectPermissions) GetNotificationDomainRenewal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *CreateProjectPermissions) GetNotificationDomainTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *CreateProjectPermissions) GetNotificationDomainUnverified() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *CreateProjectPermissions) GetNotificationMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *CreateProjectPermissions) GetNotificationPaymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *CreateProjectPermissions) GetNotificationUsageAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *CreateProjectPermissions) GetNotificationCustomerBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *CreateProjectPermissions) GetNotificationStatementOfReasons() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *CreateProjectPermissions) GetObservabilityConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityConfiguration
}

func (o *CreateProjectPermissions) GetOpenTelemetryEndpoint() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *CreateProjectPermissions) GetPaymentMethod() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *CreateProjectPermissions) GetPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateProjectPermissions) GetPostgres() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *CreateProjectPermissions) GetPreviewDeploymentSuffix() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *CreateProjectPermissions) GetProTrialOnboarding() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *CreateProjectPermissions) GetSharedEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *CreateProjectPermissions) GetSharedEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *CreateProjectPermissions) GetSpace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *CreateProjectPermissions) GetSpaceRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *CreateProjectPermissions) GetPasswordProtectionInvoiceItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *CreateProjectPermissions) GetRateLimit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *CreateProjectPermissions) GetRedis() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *CreateProjectPermissions) GetRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *CreateProjectPermissions) GetRemoteCaching() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *CreateProjectPermissions) GetSamlConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *CreateProjectPermissions) GetSecret() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateProjectPermissions) GetRedisStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *CreateProjectPermissions) GetBlobStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *CreateProjectPermissions) GetPostgresStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *CreateProjectPermissions) GetIntegrationStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *CreateProjectPermissions) GetIntegrationResourceReplCommand() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceReplCommand
}

func (o *CreateProjectPermissions) GetStoreTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.StoreTransfer
}

func (o *CreateProjectPermissions) GetSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *CreateProjectPermissions) GetSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *CreateProjectPermissions) GetDataCacheBillingSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *CreateProjectPermissions) GetTeam() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CreateProjectPermissions) GetTeamAccessRequest() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *CreateProjectPermissions) GetTeamFellowMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *CreateProjectPermissions) GetTeamGitExclusivity() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamGitExclusivity
}

func (o *CreateProjectPermissions) GetTeamInvite() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *CreateProjectPermissions) GetTeamInviteCode() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *CreateProjectPermissions) GetTeamJoin() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *CreateProjectPermissions) GetTeamMicrofrontends() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMicrofrontends
}

func (o *CreateProjectPermissions) GetTeamOwnMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *CreateProjectPermissions) GetTeamOwnMembershipDisconnectSAML() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *CreateProjectPermissions) GetToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *CreateProjectPermissions) GetUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *CreateProjectPermissions) GetUsageCycle() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *CreateProjectPermissions) GetVpcPeeringConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VpcPeeringConnection
}

func (o *CreateProjectPermissions) GetWebAnalyticsPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *CreateProjectPermissions) GetEdgeConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *CreateProjectPermissions) GetEdgeConfigItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *CreateProjectPermissions) GetEdgeConfigSchema() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *CreateProjectPermissions) GetEdgeConfigToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *CreateProjectPermissions) GetWebhook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *CreateProjectPermissions) GetWebhookEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

func (o *CreateProjectPermissions) GetEndpointVerification() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *CreateProjectPermissions) GetProjectTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *CreateProjectPermissions) GetOauth2Application() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *CreateProjectPermissions) GetAliasProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *CreateProjectPermissions) GetAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *CreateProjectPermissions) GetProductionAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *CreateProjectPermissions) GetConnectConfigurationLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *CreateProjectPermissions) GetDataCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *CreateProjectPermissions) GetDeployment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *CreateProjectPermissions) GetDeploymentCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *CreateProjectPermissions) GetDeploymentCheckPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *CreateProjectPermissions) GetDeploymentCheckReRunFromProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *CreateProjectPermissions) GetDeploymentProductionGit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *CreateProjectPermissions) GetDeploymentV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentV0
}

func (o *CreateProjectPermissions) GetDeploymentPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *CreateProjectPermissions) GetDeploymentPrivate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *CreateProjectPermissions) GetDeploymentPromote() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *CreateProjectPermissions) GetDeploymentRollback() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *CreateProjectPermissions) GetEnvironments() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *CreateProjectPermissions) GetLogs() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *CreateProjectPermissions) GetLogsPreset() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *CreateProjectPermissions) GetPasswordProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *CreateProjectPermissions) GetOptionsAllowlist() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *CreateProjectPermissions) GetJob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *CreateProjectPermissions) GetObservabilityData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityData
}

func (o *CreateProjectPermissions) GetProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateProjectPermissions) GetProjectFromV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFromV0
}

func (o *CreateProjectPermissions) GetProjectAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *CreateProjectPermissions) GetProjectAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *CreateProjectPermissions) GetProjectDeploymentHook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *CreateProjectPermissions) GetProjectDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *CreateProjectPermissions) GetProjectDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *CreateProjectPermissions) GetProjectDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *CreateProjectPermissions) GetProjectEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *CreateProjectPermissions) GetProjectEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *CreateProjectPermissions) GetProjectEnvVarsUnownedByIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *CreateProjectPermissions) GetProjectFlags() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFlags
}

func (o *CreateProjectPermissions) GetProjectID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateProjectPermissions) GetProjectIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *CreateProjectPermissions) GetProjectLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *CreateProjectPermissions) GetProjectMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *CreateProjectPermissions) GetProjectMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *CreateProjectPermissions) GetProjectPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *CreateProjectPermissions) GetProjectProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *CreateProjectPermissions) GetProjectTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *CreateProjectPermissions) GetProjectTransferOut() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *CreateProjectPermissions) GetProjectProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *CreateProjectPermissions) GetProjectUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *CreateProjectPermissions) GetProjectAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *CreateProjectPermissions) GetProjectSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *CreateProjectPermissions) GetProjectSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *CreateProjectPermissions) GetProjectDeploymentExpiration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *CreateProjectPermissions) GetProjectRollingRelease() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectRollingRelease
}

func (o *CreateProjectPermissions) GetProjectTier() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTier
}

func (o *CreateProjectPermissions) GetSeawallConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *CreateProjectPermissions) GetSkewProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *CreateProjectPermissions) GetAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateProjectPermissions) GetTrustedIps() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *CreateProjectPermissions) GetWebAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *CreateProjectPermissions) GetSharedEnvVarConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *CreateProjectPermissions) GetSonar() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Sonar
}

type CreateProjectLastRollbackTarget struct {
}

type CreateProjectJobStatus string

const (
	CreateProjectJobStatusSucceeded  CreateProjectJobStatus = "succeeded"
	CreateProjectJobStatusFailed     CreateProjectJobStatus = "failed"
	CreateProjectJobStatusSkipped    CreateProjectJobStatus = "skipped"
	CreateProjectJobStatusPending    CreateProjectJobStatus = "pending"
	CreateProjectJobStatusInProgress CreateProjectJobStatus = "in-progress"
)

func (e CreateProjectJobStatus) ToPointer() *CreateProjectJobStatus {
	return &e
}
func (e *CreateProjectJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = CreateProjectJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectJobStatus: %v", v)
	}
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodyType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyTypePromote  CreateProjectProjectsResponse200ApplicationJSONResponseBodyType = "promote"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodyTypeRollback CreateProjectProjectsResponse200ApplicationJSONResponseBodyType = "rollback"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type CreateProjectLastAliasRequest struct {
	FromDeploymentID string                                                          `json:"fromDeploymentId"`
	ToDeploymentID   string                                                          `json:"toDeploymentId"`
	JobStatus        CreateProjectJobStatus                                          `json:"jobStatus"`
	RequestedAt      float64                                                         `json:"requestedAt"`
	Type             CreateProjectProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
}

func (o *CreateProjectLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *CreateProjectLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *CreateProjectLastAliasRequest) GetJobStatus() CreateProjectJobStatus {
	if o == nil {
		return CreateProjectJobStatus("")
	}
	return o.JobStatus
}

func (o *CreateProjectLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *CreateProjectLastAliasRequest) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

type CreateProjectScope string

const (
	CreateProjectScopeAutomationBypass CreateProjectScope = "automation-bypass"
)

func (e CreateProjectScope) ToPointer() *CreateProjectScope {
	return &e
}
func (e *CreateProjectScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = CreateProjectScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectScope: %v", v)
	}
}

type CreateProjectProtectionBypass struct {
	CreatedAt float64            `json:"createdAt"`
	CreatedBy string             `json:"createdBy"`
	Scope     CreateProjectScope `json:"scope"`
}

func (o *CreateProjectProtectionBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectProtectionBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *CreateProjectProtectionBypass) GetScope() CreateProjectScope {
	if o == nil {
		return CreateProjectScope("")
	}
	return o.Scope
}

type CreateProjectTrustedIpsProjectsDeploymentType string

const (
	CreateProjectTrustedIpsProjectsDeploymentTypeProduction                       CreateProjectTrustedIpsProjectsDeploymentType = "production"
	CreateProjectTrustedIpsProjectsDeploymentTypePreview                          CreateProjectTrustedIpsProjectsDeploymentType = "preview"
	CreateProjectTrustedIpsProjectsDeploymentTypeAll                              CreateProjectTrustedIpsProjectsDeploymentType = "all"
	CreateProjectTrustedIpsProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectTrustedIpsProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e CreateProjectTrustedIpsProjectsDeploymentType) ToPointer() *CreateProjectTrustedIpsProjectsDeploymentType {
	return &e
}
func (e *CreateProjectTrustedIpsProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = CreateProjectTrustedIpsProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTrustedIpsProjectsDeploymentType: %v", v)
	}
}

type CreateProjectTrustedIps2 struct {
	DeploymentType CreateProjectTrustedIpsProjectsDeploymentType `json:"deploymentType"`
}

func (o *CreateProjectTrustedIps2) GetDeploymentType() CreateProjectTrustedIpsProjectsDeploymentType {
	if o == nil {
		return CreateProjectTrustedIpsProjectsDeploymentType("")
	}
	return o.DeploymentType
}

type CreateProjectTrustedIpsDeploymentType string

const (
	CreateProjectTrustedIpsDeploymentTypeProduction                       CreateProjectTrustedIpsDeploymentType = "production"
	CreateProjectTrustedIpsDeploymentTypePreview                          CreateProjectTrustedIpsDeploymentType = "preview"
	CreateProjectTrustedIpsDeploymentTypeAll                              CreateProjectTrustedIpsDeploymentType = "all"
	CreateProjectTrustedIpsDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectTrustedIpsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e CreateProjectTrustedIpsDeploymentType) ToPointer() *CreateProjectTrustedIpsDeploymentType {
	return &e
}
func (e *CreateProjectTrustedIpsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = CreateProjectTrustedIpsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTrustedIpsDeploymentType: %v", v)
	}
}

type TrustedIpsAddresses struct {
	Value string  `json:"value"`
	Note  *string `json:"note,omitempty"`
}

func (o *TrustedIpsAddresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *TrustedIpsAddresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

type TrustedIpsProtectionMode string

const (
	TrustedIpsProtectionModeAdditional TrustedIpsProtectionMode = "additional"
	TrustedIpsProtectionModeExclusive  TrustedIpsProtectionMode = "exclusive"
)

func (e TrustedIpsProtectionMode) ToPointer() *TrustedIpsProtectionMode {
	return &e
}
func (e *TrustedIpsProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = TrustedIpsProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustedIpsProtectionMode: %v", v)
	}
}

type CreateProjectTrustedIps1 struct {
	DeploymentType CreateProjectTrustedIpsDeploymentType `json:"deploymentType"`
	Addresses      []TrustedIpsAddresses                 `json:"addresses"`
	ProtectionMode TrustedIpsProtectionMode              `json:"protectionMode"`
}

func (o *CreateProjectTrustedIps1) GetDeploymentType() CreateProjectTrustedIpsDeploymentType {
	if o == nil {
		return CreateProjectTrustedIpsDeploymentType("")
	}
	return o.DeploymentType
}

func (o *CreateProjectTrustedIps1) GetAddresses() []TrustedIpsAddresses {
	if o == nil {
		return []TrustedIpsAddresses{}
	}
	return o.Addresses
}

func (o *CreateProjectTrustedIps1) GetProtectionMode() TrustedIpsProtectionMode {
	if o == nil {
		return TrustedIpsProtectionMode("")
	}
	return o.ProtectionMode
}

type CreateProjectTrustedIpsType string

const (
	CreateProjectTrustedIpsTypeCreateProjectTrustedIps1 CreateProjectTrustedIpsType = "createProject_trustedIps_1"
	CreateProjectTrustedIpsTypeCreateProjectTrustedIps2 CreateProjectTrustedIpsType = "createProject_trustedIps_2"
)

type CreateProjectTrustedIps struct {
	CreateProjectTrustedIps1 *CreateProjectTrustedIps1
	CreateProjectTrustedIps2 *CreateProjectTrustedIps2

	Type CreateProjectTrustedIpsType
}

func CreateCreateProjectTrustedIpsCreateProjectTrustedIps1(createProjectTrustedIps1 CreateProjectTrustedIps1) CreateProjectTrustedIps {
	typ := CreateProjectTrustedIpsTypeCreateProjectTrustedIps1

	return CreateProjectTrustedIps{
		CreateProjectTrustedIps1: &createProjectTrustedIps1,
		Type:                     typ,
	}
}

func CreateCreateProjectTrustedIpsCreateProjectTrustedIps2(createProjectTrustedIps2 CreateProjectTrustedIps2) CreateProjectTrustedIps {
	typ := CreateProjectTrustedIpsTypeCreateProjectTrustedIps2

	return CreateProjectTrustedIps{
		CreateProjectTrustedIps2: &createProjectTrustedIps2,
		Type:                     typ,
	}
}

func (u *CreateProjectTrustedIps) UnmarshalJSON(data []byte) error {

	var createProjectTrustedIps2 CreateProjectTrustedIps2 = CreateProjectTrustedIps2{}
	if err := utils.UnmarshalJSON(data, &createProjectTrustedIps2, "", true, true); err == nil {
		u.CreateProjectTrustedIps2 = &createProjectTrustedIps2
		u.Type = CreateProjectTrustedIpsTypeCreateProjectTrustedIps2
		return nil
	}

	var createProjectTrustedIps1 CreateProjectTrustedIps1 = CreateProjectTrustedIps1{}
	if err := utils.UnmarshalJSON(data, &createProjectTrustedIps1, "", true, true); err == nil {
		u.CreateProjectTrustedIps1 = &createProjectTrustedIps1
		u.Type = CreateProjectTrustedIpsTypeCreateProjectTrustedIps1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectTrustedIps", string(data))
}

func (u CreateProjectTrustedIps) MarshalJSON() ([]byte, error) {
	if u.CreateProjectTrustedIps1 != nil {
		return utils.MarshalJSON(u.CreateProjectTrustedIps1, "", true)
	}

	if u.CreateProjectTrustedIps2 != nil {
		return utils.MarshalJSON(u.CreateProjectTrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectTrustedIps: all fields are null")
}

type CreateProjectGitComments struct {
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
}

func (o *CreateProjectGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

func (o *CreateProjectGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

// CreateProjectCreateDeployments - Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
type CreateProjectCreateDeployments string

const (
	CreateProjectCreateDeploymentsEnabled  CreateProjectCreateDeployments = "enabled"
	CreateProjectCreateDeploymentsDisabled CreateProjectCreateDeployments = "disabled"
)

func (e CreateProjectCreateDeployments) ToPointer() *CreateProjectCreateDeployments {
	return &e
}
func (e *CreateProjectCreateDeployments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = CreateProjectCreateDeployments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectCreateDeployments: %v", v)
	}
}

type CreateProjectGitProviderOptions struct {
	// Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
	CreateDeployments CreateProjectCreateDeployments `json:"createDeployments"`
}

func (o *CreateProjectGitProviderOptions) GetCreateDeployments() CreateProjectCreateDeployments {
	if o == nil {
		return CreateProjectCreateDeployments("")
	}
	return o.CreateDeployments
}

type CreateProjectWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *CreateProjectWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProjectWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *CreateProjectWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type CreateProjectSrc2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *CreateProjectSrc2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectSrc2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectSrc2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectSrc2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectSrc2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectSrc2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectSrc2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CreateProjectSrc2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectSrc2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectSrc2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectSrc2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateProjectSrcType string

const (
	CreateProjectSrcTypeStr               CreateProjectSrcType = "str"
	CreateProjectSrcTypeCreateProjectSrc2 CreateProjectSrcType = "createProject_src_2"
)

type CreateProjectSrc struct {
	Str               *string
	CreateProjectSrc2 *CreateProjectSrc2

	Type CreateProjectSrcType
}

func CreateCreateProjectSrcStr(str string) CreateProjectSrc {
	typ := CreateProjectSrcTypeStr

	return CreateProjectSrc{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectSrcCreateProjectSrc2(createProjectSrc2 CreateProjectSrc2) CreateProjectSrc {
	typ := CreateProjectSrcTypeCreateProjectSrc2

	return CreateProjectSrc{
		CreateProjectSrc2: &createProjectSrc2,
		Type:              typ,
	}
}

func (u *CreateProjectSrc) UnmarshalJSON(data []byte) error {

	var createProjectSrc2 CreateProjectSrc2 = CreateProjectSrc2{}
	if err := utils.UnmarshalJSON(data, &createProjectSrc2, "", true, true); err == nil {
		u.CreateProjectSrc2 = &createProjectSrc2
		u.Type = CreateProjectSrcTypeCreateProjectSrc2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectSrcTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectSrc", string(data))
}

func (u CreateProjectSrc) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectSrc2 != nil {
		return utils.MarshalJSON(u.CreateProjectSrc2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectSrc: all fields are null")
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypePath               CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "path"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHost               CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "host"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeMethod             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "method"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHeader             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "header"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeCookie             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "cookie"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeQuery              CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "query"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeIPAddress          CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "ip_address"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeProtocol           CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "protocol"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeScheme             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "scheme"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeEnvironment        CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "environment"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeRegion             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "region"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeInitialRequestPath CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "initial_request_path"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType: %v", v)
	}
}

type CreateProjectValue2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *CreateProjectValue2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectValue2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectValue2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectValue2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectValue2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectValue2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectValue2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CreateProjectValue2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectValue2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectValue2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectValue2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateProjectValueType string

const (
	CreateProjectValueTypeStr                 CreateProjectValueType = "str"
	CreateProjectValueTypeCreateProjectValue2 CreateProjectValueType = "createProject_value_2"
)

type CreateProjectValue struct {
	Str                 *string
	CreateProjectValue2 *CreateProjectValue2

	Type CreateProjectValueType
}

func CreateCreateProjectValueStr(str string) CreateProjectValue {
	typ := CreateProjectValueTypeStr

	return CreateProjectValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectValueCreateProjectValue2(createProjectValue2 CreateProjectValue2) CreateProjectValue {
	typ := CreateProjectValueTypeCreateProjectValue2

	return CreateProjectValue{
		CreateProjectValue2: &createProjectValue2,
		Type:                typ,
	}
}

func (u *CreateProjectValue) UnmarshalJSON(data []byte) error {

	var createProjectValue2 CreateProjectValue2 = CreateProjectValue2{}
	if err := utils.UnmarshalJSON(data, &createProjectValue2, "", true, true); err == nil {
		u.CreateProjectValue2 = &createProjectValue2
		u.Type = CreateProjectValueTypeCreateProjectValue2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectValue", string(data))
}

func (u CreateProjectValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectValue2 != nil {
		return utils.MarshalJSON(u.CreateProjectValue2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectValue: all fields are null")
}

type CreateProjectHas struct {
	Type  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType `json:"type"`
	Key   *string                                                                 `json:"key,omitempty"`
	Value *CreateProjectValue                                                     `json:"value,omitempty"`
}

func (o *CreateProjectHas) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType("")
	}
	return o.Type
}

func (o *CreateProjectHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectHas) GetValue() *CreateProjectValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType string

const (
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypePath               CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "path"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHost               CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "host"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeMethod             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "method"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHeader             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "header"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeCookie             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "cookie"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeQuery              CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "query"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeIPAddress          CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "ip_address"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeProtocol           CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "protocol"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeScheme             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "scheme"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeEnvironment        CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "environment"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeRegion             CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "region"
	CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeInitialRequestPath CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "initial_request_path"
)

func (e CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) ToPointer() *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	return &e
}
func (e *CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType: %v", v)
	}
}

type CreateProjectValueProjects2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *CreateProjectValueProjects2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectValueProjects2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectValueProjects2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectValueProjects2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectValueProjects2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectValueProjects2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectValueProjects2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CreateProjectValueProjects2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectValueProjects2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectValueProjects2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectValueProjects2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateProjectProjectsValueType string

const (
	CreateProjectProjectsValueTypeStr                         CreateProjectProjectsValueType = "str"
	CreateProjectProjectsValueTypeCreateProjectValueProjects2 CreateProjectProjectsValueType = "createProject_value_projects_2"
)

type CreateProjectProjectsValue struct {
	Str                         *string
	CreateProjectValueProjects2 *CreateProjectValueProjects2

	Type CreateProjectProjectsValueType
}

func CreateCreateProjectProjectsValueStr(str string) CreateProjectProjectsValue {
	typ := CreateProjectProjectsValueTypeStr

	return CreateProjectProjectsValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectProjectsValueCreateProjectValueProjects2(createProjectValueProjects2 CreateProjectValueProjects2) CreateProjectProjectsValue {
	typ := CreateProjectProjectsValueTypeCreateProjectValueProjects2

	return CreateProjectProjectsValue{
		CreateProjectValueProjects2: &createProjectValueProjects2,
		Type:                        typ,
	}
}

func (u *CreateProjectProjectsValue) UnmarshalJSON(data []byte) error {

	var createProjectValueProjects2 CreateProjectValueProjects2 = CreateProjectValueProjects2{}
	if err := utils.UnmarshalJSON(data, &createProjectValueProjects2, "", true, true); err == nil {
		u.CreateProjectValueProjects2 = &createProjectValueProjects2
		u.Type = CreateProjectProjectsValueTypeCreateProjectValueProjects2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectProjectsValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectProjectsValue", string(data))
}

func (u CreateProjectProjectsValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectValueProjects2 != nil {
		return utils.MarshalJSON(u.CreateProjectValueProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectProjectsValue: all fields are null")
}

type CreateProjectMissing struct {
	Type  CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType `json:"type"`
	Key   *string                                                                               `json:"key,omitempty"`
	Value *CreateProjectProjectsValue                                                           `json:"value,omitempty"`
}

func (o *CreateProjectMissing) GetType() CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	if o == nil {
		return CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType("")
	}
	return o.Type
}

func (o *CreateProjectMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectMissing) GetValue() *CreateProjectProjectsValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateProjectHandle string

const (
	CreateProjectHandleInit     CreateProjectHandle = "init"
	CreateProjectHandleFinalize CreateProjectHandle = "finalize"
)

func (e CreateProjectHandle) ToPointer() *CreateProjectHandle {
	return &e
}
func (e *CreateProjectHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = CreateProjectHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectHandle: %v", v)
	}
}

type CreateProjectProjectsAction string

const (
	CreateProjectProjectsActionDeny      CreateProjectProjectsAction = "deny"
	CreateProjectProjectsActionChallenge CreateProjectProjectsAction = "challenge"
	CreateProjectProjectsActionLog       CreateProjectProjectsAction = "log"
	CreateProjectProjectsActionBypass    CreateProjectProjectsAction = "bypass"
	CreateProjectProjectsActionRateLimit CreateProjectProjectsAction = "rate_limit"
	CreateProjectProjectsActionRedirect  CreateProjectProjectsAction = "redirect"
)

func (e CreateProjectProjectsAction) ToPointer() *CreateProjectProjectsAction {
	return &e
}
func (e *CreateProjectProjectsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = CreateProjectProjectsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsAction: %v", v)
	}
}

type CreateProjectAlgo string

const (
	CreateProjectAlgoFixedWindow CreateProjectAlgo = "fixed_window"
	CreateProjectAlgoTokenBucket CreateProjectAlgo = "token_bucket"
)

func (e CreateProjectAlgo) ToPointer() *CreateProjectAlgo {
	return &e
}
func (e *CreateProjectAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = CreateProjectAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectAlgo: %v", v)
	}
}

type CreateProjectErl struct {
	Algo   CreateProjectAlgo `json:"algo"`
	Window float64           `json:"window"`
	Limit  float64           `json:"limit"`
	Keys   []string          `json:"keys"`
}

func (o *CreateProjectErl) GetAlgo() CreateProjectAlgo {
	if o == nil {
		return CreateProjectAlgo("")
	}
	return o.Algo
}

func (o *CreateProjectErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *CreateProjectErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *CreateProjectErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

type CreateProjectMitigate struct {
	Action CreateProjectProjectsAction `json:"action"`
	RuleID string                      `json:"rule_id"`
	TTL    *float64                    `json:"ttl,omitempty"`
	Erl    *CreateProjectErl           `json:"erl,omitempty"`
}

func (o *CreateProjectMitigate) GetAction() CreateProjectProjectsAction {
	if o == nil {
		return CreateProjectProjectsAction("")
	}
	return o.Action
}

func (o *CreateProjectMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *CreateProjectMitigate) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateProjectMitigate) GetErl() *CreateProjectErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

type CreateProjectFirewallRoutes struct {
	Src      *CreateProjectSrc      `json:"src,omitempty"`
	Has      []CreateProjectHas     `json:"has,omitempty"`
	Missing  []CreateProjectMissing `json:"missing,omitempty"`
	Dest     *string                `json:"dest,omitempty"`
	Status   *float64               `json:"status,omitempty"`
	Handle   *CreateProjectHandle   `json:"handle,omitempty"`
	Mitigate *CreateProjectMitigate `json:"mitigate,omitempty"`
}

func (o *CreateProjectFirewallRoutes) GetSrc() *CreateProjectSrc {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProjectFirewallRoutes) GetHas() []CreateProjectHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateProjectFirewallRoutes) GetMissing() []CreateProjectMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateProjectFirewallRoutes) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateProjectFirewallRoutes) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateProjectFirewallRoutes) GetHandle() *CreateProjectHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *CreateProjectFirewallRoutes) GetMitigate() *CreateProjectMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type CreateProjectAction string

const (
	CreateProjectActionDeny      CreateProjectAction = "deny"
	CreateProjectActionChallenge CreateProjectAction = "challenge"
	CreateProjectActionLog       CreateProjectAction = "log"
)

func (e CreateProjectAction) ToPointer() *CreateProjectAction {
	return &e
}
func (e *CreateProjectAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = CreateProjectAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectAction: %v", v)
	}
}

type CreateProjectManagedRules struct {
	Active bool                 `json:"active"`
	Action *CreateProjectAction `json:"action,omitempty"`
}

func (o *CreateProjectManagedRules) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *CreateProjectManagedRules) GetAction() *CreateProjectAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type CreateProjectSecurity struct {
	AttackModeEnabled      *bool                                `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                             `json:"attackModeUpdatedAt,omitempty"`
	FirewallEnabled        *bool                                `json:"firewallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                             `json:"firewallUpdatedAt,omitempty"`
	AttackModeActiveUntil  *float64                             `json:"attackModeActiveUntil,omitempty"`
	FirewallConfigVersion  *float64                             `json:"firewallConfigVersion,omitempty"`
	FirewallRoutes         []CreateProjectFirewallRoutes        `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                                `json:"firewallSeawallEnabled,omitempty"`
	Ja3Enabled             *bool                                `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                                `json:"ja4Enabled,omitempty"`
	FirewallBypassIps      []string                             `json:"firewallBypassIps,omitempty"`
	ManagedRules           map[string]CreateProjectManagedRules `json:"managedRules,omitempty"`
}

func (o *CreateProjectSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *CreateProjectSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *CreateProjectSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *CreateProjectSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *CreateProjectSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *CreateProjectSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *CreateProjectSecurity) GetFirewallRoutes() []CreateProjectFirewallRoutes {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *CreateProjectSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *CreateProjectSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *CreateProjectSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

func (o *CreateProjectSecurity) GetFirewallBypassIps() []string {
	if o == nil {
		return nil
	}
	return o.FirewallBypassIps
}

func (o *CreateProjectSecurity) GetManagedRules() map[string]CreateProjectManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

// CreateProjectIssuerMode - - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
type CreateProjectIssuerMode string

const (
	CreateProjectIssuerModeTeam   CreateProjectIssuerMode = "team"
	CreateProjectIssuerModeGlobal CreateProjectIssuerMode = "global"
)

func (e CreateProjectIssuerMode) ToPointer() *CreateProjectIssuerMode {
	return &e
}
func (e *CreateProjectIssuerMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = CreateProjectIssuerMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectIssuerMode: %v", v)
	}
}

type CreateProjectOidcTokenConfig struct {
	Enabled bool `json:"enabled"`
	// - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
	IssuerMode *CreateProjectIssuerMode `json:"issuerMode,omitempty"`
}

func (o *CreateProjectOidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *CreateProjectOidcTokenConfig) GetIssuerMode() *CreateProjectIssuerMode {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

type CreateProjectTier string

const (
	CreateProjectTierStandard CreateProjectTier = "standard"
	CreateProjectTierAdvanced CreateProjectTier = "advanced"
	CreateProjectTierCritical CreateProjectTier = "critical"
)

func (e CreateProjectTier) ToPointer() *CreateProjectTier {
	return &e
}
func (e *CreateProjectTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "advanced":
		fallthrough
	case "critical":
		*e = CreateProjectTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTier: %v", v)
	}
}

// CreateProjectResponseBody - The project was successfuly created
type CreateProjectResponseBody struct {
	AccountID                            string                                   `json:"accountId"`
	Analytics                            *CreateProjectAnalytics                  `json:"analytics,omitempty"`
	SpeedInsights                        *CreateProjectSpeedInsights              `json:"speedInsights,omitempty"`
	AutoExposeSystemEnvs                 *bool                                    `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains              *bool                                    `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy     *string                                  `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	BuildCommand                         *string                                  `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep          *string                                  `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectConfigurationID               *string                                  `json:"connectConfigurationId,omitempty"`
	ConnectBuildsEnabled                 *bool                                    `json:"connectBuildsEnabled,omitempty"`
	CreatedAt                            *float64                                 `json:"createdAt,omitempty"`
	CustomerSupportCodeVisibility        *bool                                    `json:"customerSupportCodeVisibility,omitempty"`
	Crons                                *CreateProjectCrons                      `json:"crons,omitempty"`
	DataCache                            *CreateProjectDataCache                  `json:"dataCache,omitempty"`
	DeploymentExpiration                 *CreateProjectDeploymentExpiration       `json:"deploymentExpiration,omitempty"`
	DevCommand                           *string                                  `json:"devCommand,omitempty"`
	DirectoryListing                     bool                                     `json:"directoryListing"`
	InstallCommand                       *string                                  `json:"installCommand,omitempty"`
	Env                                  []CreateProjectEnv                       `json:"env,omitempty"`
	CustomEnvironments                   []CreateProjectCustomEnvironments        `json:"customEnvironments,omitempty"`
	Framework                            *CreateProjectProjectsFramework          `json:"framework,omitempty"`
	GitForkProtection                    *bool                                    `json:"gitForkProtection,omitempty"`
	GitLFS                               *bool                                    `json:"gitLFS,omitempty"`
	ID                                   string                                   `json:"id"`
	IPBuckets                            []CreateProjectIPBuckets                 `json:"ipBuckets,omitempty"`
	LatestDeployments                    []CreateProjectLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                                 *CreateProjectLink                       `json:"link,omitempty"`
	Microfrontends                       *CreateProjectMicrofrontends             `json:"microfrontends,omitempty"`
	Name                                 string                                   `json:"name"`
	NodeVersion                          CreateProjectNodeVersion                 `json:"nodeVersion"`
	OptionsAllowlist                     *CreateProjectOptionsAllowlist           `json:"optionsAllowlist,omitempty"`
	OutputDirectory                      *string                                  `json:"outputDirectory,omitempty"`
	PassiveConnectConfigurationID        *string                                  `json:"passiveConnectConfigurationId,omitempty"`
	PasswordProtection                   *CreateProjectPasswordProtection         `json:"passwordProtection,omitempty"`
	ProductionDeploymentsFastLane        *bool                                    `json:"productionDeploymentsFastLane,omitempty"`
	PublicSource                         *bool                                    `json:"publicSource,omitempty"`
	ResourceConfig                       CreateProjectResourceConfig              `json:"resourceConfig"`
	RollingRelease                       *CreateProjectRollingRelease             `json:"rollingRelease,omitempty"`
	DefaultResourceConfig                CreateProjectDefaultResourceConfig       `json:"defaultResourceConfig"`
	RootDirectory                        *string                                  `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion             *string                                  `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                    `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                 `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                 `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                    `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                    `json:"sourceFilesOutsideRootDirectory,omitempty"`
	EnableAffectedProjectsDeployments    *bool                                    `json:"enableAffectedProjectsDeployments,omitempty"`
	SsoProtection                        *CreateProjectSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                              map[string]*CreateProjectTargets         `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                 `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                 `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                  `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                  `json:"transferredFromAccountId,omitempty"`
	UpdatedAt                            *float64                                 `json:"updatedAt,omitempty"`
	Live                                 *bool                                    `json:"live,omitempty"`
	EnablePreviewFeedback                *bool                                    `json:"enablePreviewFeedback,omitempty"`
	EnableProductionFeedback             *bool                                    `json:"enableProductionFeedback,omitempty"`
	Permissions                          *CreateProjectPermissions                `json:"permissions,omitempty"`
	LastRollbackTarget                   *CreateProjectLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LastAliasRequest                     *CreateProjectLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	ProtectionBypass                     map[string]CreateProjectProtectionBypass `json:"protectionBypass,omitempty"`
	HasActiveBranches                    *bool                                    `json:"hasActiveBranches,omitempty"`
	TrustedIps                           *CreateProjectTrustedIps                 `json:"trustedIps,omitempty"`
	GitComments                          *CreateProjectGitComments                `json:"gitComments,omitempty"`
	GitProviderOptions                   *CreateProjectGitProviderOptions         `json:"gitProviderOptions,omitempty"`
	Paused                               *bool                                    `json:"paused,omitempty"`
	ConcurrencyBucketName                *string                                  `json:"concurrencyBucketName,omitempty"`
	WebAnalytics                         *CreateProjectWebAnalytics               `json:"webAnalytics,omitempty"`
	Security                             *CreateProjectSecurity                   `json:"security,omitempty"`
	OidcTokenConfig                      *CreateProjectOidcTokenConfig            `json:"oidcTokenConfig,omitempty"`
	Tier                                 *CreateProjectTier                       `json:"tier,omitempty"`
}

func (o *CreateProjectResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreateProjectResponseBody) GetAnalytics() *CreateProjectAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateProjectResponseBody) GetSpeedInsights() *CreateProjectSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *CreateProjectResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *CreateProjectResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CreateProjectResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *CreateProjectResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProjectResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProjectResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProjectResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *CreateProjectResponseBody) GetCrons() *CreateProjectCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CreateProjectResponseBody) GetDataCache() *CreateProjectDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *CreateProjectResponseBody) GetDeploymentExpiration() *CreateProjectDeploymentExpiration {
	if o == nil {
		return nil
	}
	return o.DeploymentExpiration
}

func (o *CreateProjectResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProjectResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *CreateProjectResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProjectResponseBody) GetEnv() []CreateProjectEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateProjectResponseBody) GetCustomEnvironments() []CreateProjectCustomEnvironments {
	if o == nil {
		return nil
	}
	return o.CustomEnvironments
}

func (o *CreateProjectResponseBody) GetFramework() *CreateProjectProjectsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProjectResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *CreateProjectResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *CreateProjectResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectResponseBody) GetIPBuckets() []CreateProjectIPBuckets {
	if o == nil {
		return nil
	}
	return o.IPBuckets
}

func (o *CreateProjectResponseBody) GetLatestDeployments() []CreateProjectLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *CreateProjectResponseBody) GetLink() *CreateProjectLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateProjectResponseBody) GetMicrofrontends() *CreateProjectMicrofrontends {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *CreateProjectResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectResponseBody) GetNodeVersion() CreateProjectNodeVersion {
	if o == nil {
		return CreateProjectNodeVersion("")
	}
	return o.NodeVersion
}

func (o *CreateProjectResponseBody) GetOptionsAllowlist() *CreateProjectOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *CreateProjectResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProjectResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *CreateProjectResponseBody) GetPasswordProtection() *CreateProjectPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *CreateProjectResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *CreateProjectResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProjectResponseBody) GetResourceConfig() CreateProjectResourceConfig {
	if o == nil {
		return CreateProjectResourceConfig{}
	}
	return o.ResourceConfig
}

func (o *CreateProjectResponseBody) GetRollingRelease() *CreateProjectRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

func (o *CreateProjectResponseBody) GetDefaultResourceConfig() CreateProjectDefaultResourceConfig {
	if o == nil {
		return CreateProjectDefaultResourceConfig{}
	}
	return o.DefaultResourceConfig
}

func (o *CreateProjectResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProjectResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProjectResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *CreateProjectResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *CreateProjectResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *CreateProjectResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *CreateProjectResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *CreateProjectResponseBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *CreateProjectResponseBody) GetSsoProtection() *CreateProjectSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *CreateProjectResponseBody) GetTargets() map[string]*CreateProjectTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *CreateProjectResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *CreateProjectResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *CreateProjectResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *CreateProjectResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *CreateProjectResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *CreateProjectResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *CreateProjectResponseBody) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *CreateProjectResponseBody) GetPermissions() *CreateProjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateProjectResponseBody) GetLastRollbackTarget() *CreateProjectLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *CreateProjectResponseBody) GetLastAliasRequest() *CreateProjectLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *CreateProjectResponseBody) GetProtectionBypass() map[string]CreateProjectProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *CreateProjectResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *CreateProjectResponseBody) GetTrustedIps() *CreateProjectTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *CreateProjectResponseBody) GetGitComments() *CreateProjectGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *CreateProjectResponseBody) GetGitProviderOptions() *CreateProjectGitProviderOptions {
	if o == nil {
		return nil
	}
	return o.GitProviderOptions
}

func (o *CreateProjectResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *CreateProjectResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *CreateProjectResponseBody) GetWebAnalytics() *CreateProjectWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *CreateProjectResponseBody) GetSecurity() *CreateProjectSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *CreateProjectResponseBody) GetOidcTokenConfig() *CreateProjectOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *CreateProjectResponseBody) GetTier() *CreateProjectTier {
	if o == nil {
		return nil
	}
	return o.Tier
}

type CreateProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The project was successfuly created
	Object *CreateProjectResponseBody
}

func (o *CreateProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateProjectResponse) GetObject() *CreateProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
