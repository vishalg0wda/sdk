// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type DomainType string

const (
	DomainTypeArrayOfStr DomainType = "arrayOfStr"
	DomainTypeStr        DomainType = "str"
)

// Domain - Get only aliases of the given domain name
type Domain struct {
	ArrayOfStr []string
	Str        *string

	Type DomainType
}

func CreateDomainArrayOfStr(arrayOfStr []string) Domain {
	typ := DomainTypeArrayOfStr

	return Domain{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateDomainStr(str string) Domain {
	typ := DomainTypeStr

	return Domain{
		Str:  &str,
		Type: typ,
	}
}

func (u *Domain) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = DomainTypeArrayOfStr
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = DomainTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Domain", string(data))
}

func (u Domain) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type Domain: all fields are null")
}

type ListAliasesRequest struct {
	// Get only aliases of the given domain name
	Domain *Domain `queryParam:"style=form,explode=true,name=domain"`
	// Get only aliases created after the provided timestamp
	From *float64 `queryParam:"style=form,explode=true,name=from"`
	// Maximum number of aliases to list from a request
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Filter aliases from the given `projectId`
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// Get aliases created after this JavaScript timestamp
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// Get aliases created before this JavaScript timestamp
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
	// Get aliases that would be rolled back for the given deployment
	RollbackDeploymentID *string `queryParam:"style=form,explode=true,name=rollbackDeploymentId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *ListAliasesRequest) GetDomain() *Domain {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *ListAliasesRequest) GetFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *ListAliasesRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAliasesRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *ListAliasesRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *ListAliasesRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *ListAliasesRequest) GetRollbackDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.RollbackDeploymentID
}

func (o *ListAliasesRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ListAliasesRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// ListAliasesCreator - Information of the user who created the alias
type ListAliasesCreator struct {
	// ID of the user who created the alias
	UID string `json:"uid"`
	// Email of the user who created the alias
	Email string `json:"email"`
	// Username of the user who created the alias
	Username string `json:"username"`
}

func (o *ListAliasesCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *ListAliasesCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ListAliasesCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// ListAliasesDeployment - A map with the deployment ID, URL and metadata
type ListAliasesDeployment struct {
	// The deployment unique identifier
	ID string `json:"id"`
	// The deployment unique URL
	URL string `json:"url"`
	// The deployment metadata
	Meta *string `json:"meta,omitempty"`
}

func (o *ListAliasesDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListAliasesDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *ListAliasesDeployment) GetMeta() *string {
	if o == nil {
		return nil
	}
	return o.Meta
}

type ListAliasesProtectionBypassAliasesResponse200Scope string

const (
	ListAliasesProtectionBypassAliasesResponse200ScopeEmailInvite ListAliasesProtectionBypassAliasesResponse200Scope = "email_invite"
)

func (e ListAliasesProtectionBypassAliasesResponse200Scope) ToPointer() *ListAliasesProtectionBypassAliasesResponse200Scope {
	return &e
}
func (e *ListAliasesProtectionBypassAliasesResponse200Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email_invite":
		*e = ListAliasesProtectionBypassAliasesResponse200Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAliasesProtectionBypassAliasesResponse200Scope: %v", v)
	}
}

// ListAliasesProtectionBypass4 - The protection bypass for the alias
type ListAliasesProtectionBypass4 struct {
	CreatedAt     float64                                            `json:"createdAt"`
	LastUpdatedAt float64                                            `json:"lastUpdatedAt"`
	LastUpdatedBy string                                             `json:"lastUpdatedBy"`
	Scope         ListAliasesProtectionBypassAliasesResponse200Scope `json:"scope"`
}

func (o *ListAliasesProtectionBypass4) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListAliasesProtectionBypass4) GetLastUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.LastUpdatedAt
}

func (o *ListAliasesProtectionBypass4) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *ListAliasesProtectionBypass4) GetScope() ListAliasesProtectionBypassAliasesResponse200Scope {
	if o == nil {
		return ListAliasesProtectionBypassAliasesResponse200Scope("")
	}
	return o.Scope
}

type ListAliasesProtectionBypassAliasesResponseScope string

const (
	ListAliasesProtectionBypassAliasesResponseScopeAliasProtectionOverride ListAliasesProtectionBypassAliasesResponseScope = "alias-protection-override"
)

func (e ListAliasesProtectionBypassAliasesResponseScope) ToPointer() *ListAliasesProtectionBypassAliasesResponseScope {
	return &e
}
func (e *ListAliasesProtectionBypassAliasesResponseScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alias-protection-override":
		*e = ListAliasesProtectionBypassAliasesResponseScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAliasesProtectionBypassAliasesResponseScope: %v", v)
	}
}

// ListAliasesProtectionBypass3 - The protection bypass for the alias
type ListAliasesProtectionBypass3 struct {
	CreatedAt float64                                         `json:"createdAt"`
	CreatedBy string                                          `json:"createdBy"`
	Scope     ListAliasesProtectionBypassAliasesResponseScope `json:"scope"`
}

func (o *ListAliasesProtectionBypass3) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListAliasesProtectionBypass3) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ListAliasesProtectionBypass3) GetScope() ListAliasesProtectionBypassAliasesResponseScope {
	if o == nil {
		return ListAliasesProtectionBypassAliasesResponseScope("")
	}
	return o.Scope
}

type ProtectionBypassAccess string

const (
	ProtectionBypassAccessRequested ProtectionBypassAccess = "requested"
	ProtectionBypassAccessGranted   ProtectionBypassAccess = "granted"
)

func (e ProtectionBypassAccess) ToPointer() *ProtectionBypassAccess {
	return &e
}
func (e *ProtectionBypassAccess) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = ProtectionBypassAccess(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProtectionBypassAccess: %v", v)
	}
}

type ListAliasesProtectionBypassAliasesScope string

const (
	ListAliasesProtectionBypassAliasesScopeUser ListAliasesProtectionBypassAliasesScope = "user"
)

func (e ListAliasesProtectionBypassAliasesScope) ToPointer() *ListAliasesProtectionBypassAliasesScope {
	return &e
}
func (e *ListAliasesProtectionBypassAliasesScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = ListAliasesProtectionBypassAliasesScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAliasesProtectionBypassAliasesScope: %v", v)
	}
}

// ListAliasesProtectionBypass2 - The protection bypass for the alias
type ListAliasesProtectionBypass2 struct {
	CreatedAt     float64                                 `json:"createdAt"`
	LastUpdatedAt float64                                 `json:"lastUpdatedAt"`
	LastUpdatedBy string                                  `json:"lastUpdatedBy"`
	Access        ProtectionBypassAccess                  `json:"access"`
	Scope         ListAliasesProtectionBypassAliasesScope `json:"scope"`
}

func (o *ListAliasesProtectionBypass2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListAliasesProtectionBypass2) GetLastUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.LastUpdatedAt
}

func (o *ListAliasesProtectionBypass2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *ListAliasesProtectionBypass2) GetAccess() ProtectionBypassAccess {
	if o == nil {
		return ProtectionBypassAccess("")
	}
	return o.Access
}

func (o *ListAliasesProtectionBypass2) GetScope() ListAliasesProtectionBypassAliasesScope {
	if o == nil {
		return ListAliasesProtectionBypassAliasesScope("")
	}
	return o.Scope
}

type ListAliasesProtectionBypassScope string

const (
	ListAliasesProtectionBypassScopeShareableLink ListAliasesProtectionBypassScope = "shareable-link"
)

func (e ListAliasesProtectionBypassScope) ToPointer() *ListAliasesProtectionBypassScope {
	return &e
}
func (e *ListAliasesProtectionBypassScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		*e = ListAliasesProtectionBypassScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAliasesProtectionBypassScope: %v", v)
	}
}

// ListAliasesProtectionBypass1 - The protection bypass for the alias
type ListAliasesProtectionBypass1 struct {
	CreatedAt float64                          `json:"createdAt"`
	CreatedBy string                           `json:"createdBy"`
	Scope     ListAliasesProtectionBypassScope `json:"scope"`
}

func (o *ListAliasesProtectionBypass1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ListAliasesProtectionBypass1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ListAliasesProtectionBypass1) GetScope() ListAliasesProtectionBypassScope {
	if o == nil {
		return ListAliasesProtectionBypassScope("")
	}
	return o.Scope
}

type ListAliasesProtectionBypassType string

const (
	ListAliasesProtectionBypassTypeListAliasesProtectionBypass1 ListAliasesProtectionBypassType = "listAliases_protectionBypass_1"
	ListAliasesProtectionBypassTypeListAliasesProtectionBypass2 ListAliasesProtectionBypassType = "listAliases_protectionBypass_2"
	ListAliasesProtectionBypassTypeListAliasesProtectionBypass3 ListAliasesProtectionBypassType = "listAliases_protectionBypass_3"
	ListAliasesProtectionBypassTypeListAliasesProtectionBypass4 ListAliasesProtectionBypassType = "listAliases_protectionBypass_4"
)

type ListAliasesProtectionBypass struct {
	ListAliasesProtectionBypass1 *ListAliasesProtectionBypass1
	ListAliasesProtectionBypass2 *ListAliasesProtectionBypass2
	ListAliasesProtectionBypass3 *ListAliasesProtectionBypass3
	ListAliasesProtectionBypass4 *ListAliasesProtectionBypass4

	Type ListAliasesProtectionBypassType
}

func CreateListAliasesProtectionBypassListAliasesProtectionBypass1(listAliasesProtectionBypass1 ListAliasesProtectionBypass1) ListAliasesProtectionBypass {
	typ := ListAliasesProtectionBypassTypeListAliasesProtectionBypass1

	return ListAliasesProtectionBypass{
		ListAliasesProtectionBypass1: &listAliasesProtectionBypass1,
		Type:                         typ,
	}
}

func CreateListAliasesProtectionBypassListAliasesProtectionBypass2(listAliasesProtectionBypass2 ListAliasesProtectionBypass2) ListAliasesProtectionBypass {
	typ := ListAliasesProtectionBypassTypeListAliasesProtectionBypass2

	return ListAliasesProtectionBypass{
		ListAliasesProtectionBypass2: &listAliasesProtectionBypass2,
		Type:                         typ,
	}
}

func CreateListAliasesProtectionBypassListAliasesProtectionBypass3(listAliasesProtectionBypass3 ListAliasesProtectionBypass3) ListAliasesProtectionBypass {
	typ := ListAliasesProtectionBypassTypeListAliasesProtectionBypass3

	return ListAliasesProtectionBypass{
		ListAliasesProtectionBypass3: &listAliasesProtectionBypass3,
		Type:                         typ,
	}
}

func CreateListAliasesProtectionBypassListAliasesProtectionBypass4(listAliasesProtectionBypass4 ListAliasesProtectionBypass4) ListAliasesProtectionBypass {
	typ := ListAliasesProtectionBypassTypeListAliasesProtectionBypass4

	return ListAliasesProtectionBypass{
		ListAliasesProtectionBypass4: &listAliasesProtectionBypass4,
		Type:                         typ,
	}
}

func (u *ListAliasesProtectionBypass) UnmarshalJSON(data []byte) error {

	var listAliasesProtectionBypass1 ListAliasesProtectionBypass1 = ListAliasesProtectionBypass1{}
	if err := utils.UnmarshalJSON(data, &listAliasesProtectionBypass1, "", true, true); err == nil {
		u.ListAliasesProtectionBypass1 = &listAliasesProtectionBypass1
		u.Type = ListAliasesProtectionBypassTypeListAliasesProtectionBypass1
		return nil
	}

	var listAliasesProtectionBypass3 ListAliasesProtectionBypass3 = ListAliasesProtectionBypass3{}
	if err := utils.UnmarshalJSON(data, &listAliasesProtectionBypass3, "", true, true); err == nil {
		u.ListAliasesProtectionBypass3 = &listAliasesProtectionBypass3
		u.Type = ListAliasesProtectionBypassTypeListAliasesProtectionBypass3
		return nil
	}

	var listAliasesProtectionBypass4 ListAliasesProtectionBypass4 = ListAliasesProtectionBypass4{}
	if err := utils.UnmarshalJSON(data, &listAliasesProtectionBypass4, "", true, true); err == nil {
		u.ListAliasesProtectionBypass4 = &listAliasesProtectionBypass4
		u.Type = ListAliasesProtectionBypassTypeListAliasesProtectionBypass4
		return nil
	}

	var listAliasesProtectionBypass2 ListAliasesProtectionBypass2 = ListAliasesProtectionBypass2{}
	if err := utils.UnmarshalJSON(data, &listAliasesProtectionBypass2, "", true, true); err == nil {
		u.ListAliasesProtectionBypass2 = &listAliasesProtectionBypass2
		u.Type = ListAliasesProtectionBypassTypeListAliasesProtectionBypass2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListAliasesProtectionBypass", string(data))
}

func (u ListAliasesProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.ListAliasesProtectionBypass1 != nil {
		return utils.MarshalJSON(u.ListAliasesProtectionBypass1, "", true)
	}

	if u.ListAliasesProtectionBypass2 != nil {
		return utils.MarshalJSON(u.ListAliasesProtectionBypass2, "", true)
	}

	if u.ListAliasesProtectionBypass3 != nil {
		return utils.MarshalJSON(u.ListAliasesProtectionBypass3, "", true)
	}

	if u.ListAliasesProtectionBypass4 != nil {
		return utils.MarshalJSON(u.ListAliasesProtectionBypass4, "", true)
	}

	return nil, errors.New("could not marshal union type ListAliasesProtectionBypass: all fields are null")
}

type ListAliasesAliases struct {
	// The alias name, it could be a `.vercel.app` subdomain or a custom domain
	Alias string `json:"alias"`
	// The date when the alias was created
	Created time.Time `json:"created"`
	// The date when the alias was created in milliseconds since the UNIX epoch
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Information of the user who created the alias
	Creator *ListAliasesCreator `json:"creator,omitempty"`
	// The date when the alias was deleted in milliseconds since the UNIX epoch
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// A map with the deployment ID, URL and metadata
	Deployment *ListAliasesDeployment `json:"deployment,omitempty"`
	// The deployment ID
	DeploymentID *string `json:"deploymentId"`
	// The unique identifier of the project
	ProjectID *string `json:"projectId"`
	// Target destination domain for redirect when the alias is a redirect
	Redirect *string `json:"redirect,omitempty"`
	// Status code to be used on redirect
	RedirectStatusCode *float64 `json:"redirectStatusCode,omitempty"`
	// The unique identifier of the alias
	UID string `json:"uid"`
	// The date when the alias was updated in milliseconds since the UNIX epoch
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The protection bypass for the alias
	ProtectionBypass map[string]ListAliasesProtectionBypass `json:"protectionBypass,omitempty"`
}

func (l ListAliasesAliases) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAliasesAliases) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListAliasesAliases) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *ListAliasesAliases) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *ListAliasesAliases) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ListAliasesAliases) GetCreator() *ListAliasesCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *ListAliasesAliases) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *ListAliasesAliases) GetDeployment() *ListAliasesDeployment {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *ListAliasesAliases) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *ListAliasesAliases) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *ListAliasesAliases) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *ListAliasesAliases) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *ListAliasesAliases) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *ListAliasesAliases) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ListAliasesAliases) GetProtectionBypass() map[string]ListAliasesProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

// ListAliasesResponseBody - The paginated list of aliases
type ListAliasesResponseBody struct {
	Aliases []ListAliasesAliases `json:"aliases"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination components.Pagination `json:"pagination"`
}

func (o *ListAliasesResponseBody) GetAliases() []ListAliasesAliases {
	if o == nil {
		return []ListAliasesAliases{}
	}
	return o.Aliases
}

func (o *ListAliasesResponseBody) GetPagination() components.Pagination {
	if o == nil {
		return components.Pagination{}
	}
	return o.Pagination
}

type ListAliasesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The paginated list of aliases
	Object *ListAliasesResponseBody
}

func (o *ListAliasesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListAliasesResponse) GetObject() *ListAliasesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
