// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateEdgeConfigRequestBody struct {
	Slug string `json:"slug"`
}

func (o *UpdateEdgeConfigRequestBody) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type UpdateEdgeConfigRequest struct {
	EdgeConfigID string `pathParam:"style=simple,explode=false,name=edgeConfigId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                     `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateEdgeConfigRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateEdgeConfigRequest) GetEdgeConfigID() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigID
}

func (o *UpdateEdgeConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateEdgeConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateEdgeConfigRequest) GetRequestBody() UpdateEdgeConfigRequestBody {
	if o == nil {
		return UpdateEdgeConfigRequestBody{}
	}
	return o.RequestBody
}

// UpdateEdgeConfigTransfer - Keeps track of the current state of the Edge Config while it gets transferred.
type UpdateEdgeConfigTransfer struct {
	FromAccountID string   `json:"fromAccountId"`
	StartedAt     float64  `json:"startedAt"`
	DoneAt        *float64 `json:"doneAt"`
}

func (o *UpdateEdgeConfigTransfer) GetFromAccountID() string {
	if o == nil {
		return ""
	}
	return o.FromAccountID
}

func (o *UpdateEdgeConfigTransfer) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *UpdateEdgeConfigTransfer) GetDoneAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DoneAt
}

type UpdateEdgeConfigSchema struct {
}

type UpdateEdgeConfigPurposeEdgeConfigType string

const (
	UpdateEdgeConfigPurposeEdgeConfigTypeExperimentation UpdateEdgeConfigPurposeEdgeConfigType = "experimentation"
)

func (e UpdateEdgeConfigPurposeEdgeConfigType) ToPointer() *UpdateEdgeConfigPurposeEdgeConfigType {
	return &e
}
func (e *UpdateEdgeConfigPurposeEdgeConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "experimentation":
		*e = UpdateEdgeConfigPurposeEdgeConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateEdgeConfigPurposeEdgeConfigType: %v", v)
	}
}

type UpdateEdgeConfigPurpose2 struct {
	Type       UpdateEdgeConfigPurposeEdgeConfigType `json:"type"`
	ResourceID string                                `json:"resourceId"`
}

func (o *UpdateEdgeConfigPurpose2) GetType() UpdateEdgeConfigPurposeEdgeConfigType {
	if o == nil {
		return UpdateEdgeConfigPurposeEdgeConfigType("")
	}
	return o.Type
}

func (o *UpdateEdgeConfigPurpose2) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

type UpdateEdgeConfigPurposeType string

const (
	UpdateEdgeConfigPurposeTypeFlags UpdateEdgeConfigPurposeType = "flags"
)

func (e UpdateEdgeConfigPurposeType) ToPointer() *UpdateEdgeConfigPurposeType {
	return &e
}
func (e *UpdateEdgeConfigPurposeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags":
		*e = UpdateEdgeConfigPurposeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateEdgeConfigPurposeType: %v", v)
	}
}

type UpdateEdgeConfigPurpose1 struct {
	Type      UpdateEdgeConfigPurposeType `json:"type"`
	ProjectID string                      `json:"projectId"`
}

func (o *UpdateEdgeConfigPurpose1) GetType() UpdateEdgeConfigPurposeType {
	if o == nil {
		return UpdateEdgeConfigPurposeType("")
	}
	return o.Type
}

func (o *UpdateEdgeConfigPurpose1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UpdateEdgeConfigPurposeUnionType string

const (
	UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurpose1 UpdateEdgeConfigPurposeUnionType = "updateEdgeConfig_purpose_1"
	UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurpose2 UpdateEdgeConfigPurposeUnionType = "updateEdgeConfig_purpose_2"
)

type UpdateEdgeConfigPurpose struct {
	UpdateEdgeConfigPurpose1 *UpdateEdgeConfigPurpose1
	UpdateEdgeConfigPurpose2 *UpdateEdgeConfigPurpose2

	Type UpdateEdgeConfigPurposeUnionType
}

func CreateUpdateEdgeConfigPurposeUpdateEdgeConfigPurpose1(updateEdgeConfigPurpose1 UpdateEdgeConfigPurpose1) UpdateEdgeConfigPurpose {
	typ := UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurpose1

	return UpdateEdgeConfigPurpose{
		UpdateEdgeConfigPurpose1: &updateEdgeConfigPurpose1,
		Type:                     typ,
	}
}

func CreateUpdateEdgeConfigPurposeUpdateEdgeConfigPurpose2(updateEdgeConfigPurpose2 UpdateEdgeConfigPurpose2) UpdateEdgeConfigPurpose {
	typ := UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurpose2

	return UpdateEdgeConfigPurpose{
		UpdateEdgeConfigPurpose2: &updateEdgeConfigPurpose2,
		Type:                     typ,
	}
}

func (u *UpdateEdgeConfigPurpose) UnmarshalJSON(data []byte) error {

	var updateEdgeConfigPurpose1 UpdateEdgeConfigPurpose1 = UpdateEdgeConfigPurpose1{}
	if err := utils.UnmarshalJSON(data, &updateEdgeConfigPurpose1, "", true, true); err == nil {
		u.UpdateEdgeConfigPurpose1 = &updateEdgeConfigPurpose1
		u.Type = UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurpose1
		return nil
	}

	var updateEdgeConfigPurpose2 UpdateEdgeConfigPurpose2 = UpdateEdgeConfigPurpose2{}
	if err := utils.UnmarshalJSON(data, &updateEdgeConfigPurpose2, "", true, true); err == nil {
		u.UpdateEdgeConfigPurpose2 = &updateEdgeConfigPurpose2
		u.Type = UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurpose2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateEdgeConfigPurpose", string(data))
}

func (u UpdateEdgeConfigPurpose) MarshalJSON() ([]byte, error) {
	if u.UpdateEdgeConfigPurpose1 != nil {
		return utils.MarshalJSON(u.UpdateEdgeConfigPurpose1, "", true)
	}

	if u.UpdateEdgeConfigPurpose2 != nil {
		return utils.MarshalJSON(u.UpdateEdgeConfigPurpose2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateEdgeConfigPurpose: all fields are null")
}

// UpdateEdgeConfigResponseBody - An Edge Config
type UpdateEdgeConfigResponseBody struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	ID        *string  `json:"id,omitempty"`
	// Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
	Slug    *string `json:"slug,omitempty"`
	OwnerID *string `json:"ownerId,omitempty"`
	Digest  *string `json:"digest,omitempty"`
	// Keeps track of the current state of the Edge Config while it gets transferred.
	Transfer    *UpdateEdgeConfigTransfer `json:"transfer,omitempty"`
	Schema      *UpdateEdgeConfigSchema   `json:"schema,omitempty"`
	Purpose     *UpdateEdgeConfigPurpose  `json:"purpose,omitempty"`
	SizeInBytes float64                   `json:"sizeInBytes"`
	ItemCount   float64                   `json:"itemCount"`
}

func (o *UpdateEdgeConfigResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateEdgeConfigResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateEdgeConfigResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateEdgeConfigResponseBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateEdgeConfigResponseBody) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *UpdateEdgeConfigResponseBody) GetDigest() *string {
	if o == nil {
		return nil
	}
	return o.Digest
}

func (o *UpdateEdgeConfigResponseBody) GetTransfer() *UpdateEdgeConfigTransfer {
	if o == nil {
		return nil
	}
	return o.Transfer
}

func (o *UpdateEdgeConfigResponseBody) GetSchema() *UpdateEdgeConfigSchema {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *UpdateEdgeConfigResponseBody) GetPurpose() *UpdateEdgeConfigPurpose {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *UpdateEdgeConfigResponseBody) GetSizeInBytes() float64 {
	if o == nil {
		return 0.0
	}
	return o.SizeInBytes
}

func (o *UpdateEdgeConfigResponseBody) GetItemCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ItemCount
}

type UpdateEdgeConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateEdgeConfigResponseBody
}

func (o *UpdateEdgeConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateEdgeConfigResponse) GetObject() *UpdateEdgeConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
