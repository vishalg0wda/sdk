// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// CreateProjectEnv2Type - The type of environment variable
type CreateProjectEnv2Type string

const (
	CreateProjectEnv2TypeSystem    CreateProjectEnv2Type = "system"
	CreateProjectEnv2TypeSecret    CreateProjectEnv2Type = "secret"
	CreateProjectEnv2TypeEncrypted CreateProjectEnv2Type = "encrypted"
	CreateProjectEnv2TypePlain     CreateProjectEnv2Type = "plain"
	CreateProjectEnv2TypeSensitive CreateProjectEnv2Type = "sensitive"
)

func (e CreateProjectEnv2Type) ToPointer() *CreateProjectEnv2Type {
	return &e
}
func (e *CreateProjectEnv2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnv2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnv2Type: %v", v)
	}
}

type CreateProjectEnv2Target string

const (
	CreateProjectEnv2TargetProduction  CreateProjectEnv2Target = "production"
	CreateProjectEnv2TargetPreview     CreateProjectEnv2Target = "preview"
	CreateProjectEnv2TargetDevelopment CreateProjectEnv2Target = "development"
)

func (e CreateProjectEnv2Target) ToPointer() *CreateProjectEnv2Target {
	return &e
}
func (e *CreateProjectEnv2Target) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnv2Target(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnv2Target: %v", v)
	}
}

type Two2 struct {
	// The name of the environment variable
	Key string `json:"key"`
	// The value of the environment variable
	Value string `json:"value"`
	// The type of environment variable
	Type CreateProjectEnv2Type `json:"type"`
	// The target environment of the environment variable
	Target []CreateProjectEnv2Target `json:"target,omitempty"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// A comment to add context on what this environment variable is for
	Comment *string `json:"comment,omitempty"`
	// The custom environment IDs associated with the environment variable
	CustomEnvironmentIds []string `json:"customEnvironmentIds"`
}

func (o *Two2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Two2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Two2) GetType() CreateProjectEnv2Type {
	if o == nil {
		return CreateProjectEnv2Type("")
	}
	return o.Type
}

func (o *Two2) GetTarget() []CreateProjectEnv2Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Two2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Two2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Two2) GetCustomEnvironmentIds() []string {
	if o == nil {
		return []string{}
	}
	return o.CustomEnvironmentIds
}

// TwoType - The type of environment variable
type TwoType string

const (
	TwoTypeSystem    TwoType = "system"
	TwoTypeSecret    TwoType = "secret"
	TwoTypeEncrypted TwoType = "encrypted"
	TwoTypePlain     TwoType = "plain"
	TwoTypeSensitive TwoType = "sensitive"
)

func (e TwoType) ToPointer() *TwoType {
	return &e
}
func (e *TwoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = TwoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TwoType: %v", v)
	}
}

type TwoTarget string

const (
	TwoTargetProduction  TwoTarget = "production"
	TwoTargetPreview     TwoTarget = "preview"
	TwoTargetDevelopment TwoTarget = "development"
)

func (e TwoTarget) ToPointer() *TwoTarget {
	return &e
}
func (e *TwoTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = TwoTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TwoTarget: %v", v)
	}
}

type Two1 struct {
	// The name of the environment variable
	Key string `json:"key"`
	// The value of the environment variable
	Value string `json:"value"`
	// The type of environment variable
	Type TwoType `json:"type"`
	// The target environment of the environment variable
	Target []TwoTarget `json:"target"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// A comment to add context on what this environment variable is for
	Comment *string `json:"comment,omitempty"`
	// The custom environment IDs associated with the environment variable
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
}

func (o *Two1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Two1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Two1) GetType() TwoType {
	if o == nil {
		return TwoType("")
	}
	return o.Type
}

func (o *Two1) GetTarget() []TwoTarget {
	if o == nil {
		return []TwoTarget{}
	}
	return o.Target
}

func (o *Two1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Two1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Two1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type CreateProjectEnvRequestBody2Type string

const (
	CreateProjectEnvRequestBody2TypeTwo1 CreateProjectEnvRequestBody2Type = "2_1"
	CreateProjectEnvRequestBody2TypeTwo2 CreateProjectEnvRequestBody2Type = "2_2"
)

type CreateProjectEnvRequestBody2 struct {
	Two1 *Two1
	Two2 *Two2

	Type CreateProjectEnvRequestBody2Type
}

func CreateCreateProjectEnvRequestBody2Two1(two1 Two1) CreateProjectEnvRequestBody2 {
	typ := CreateProjectEnvRequestBody2TypeTwo1

	return CreateProjectEnvRequestBody2{
		Two1: &two1,
		Type: typ,
	}
}

func CreateCreateProjectEnvRequestBody2Two2(two2 Two2) CreateProjectEnvRequestBody2 {
	typ := CreateProjectEnvRequestBody2TypeTwo2

	return CreateProjectEnvRequestBody2{
		Two2: &two2,
		Type: typ,
	}
}

func (u *CreateProjectEnvRequestBody2) UnmarshalJSON(data []byte) error {

	var two1 Two1 = Two1{}
	if err := utils.UnmarshalJSON(data, &two1, "", true, true); err == nil {
		u.Two1 = &two1
		u.Type = CreateProjectEnvRequestBody2TypeTwo1
		return nil
	}

	var two2 Two2 = Two2{}
	if err := utils.UnmarshalJSON(data, &two2, "", true, true); err == nil {
		u.Two2 = &two2
		u.Type = CreateProjectEnvRequestBody2TypeTwo2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvRequestBody2", string(data))
}

func (u CreateProjectEnvRequestBody2) MarshalJSON() ([]byte, error) {
	if u.Two1 != nil {
		return utils.MarshalJSON(u.Two1, "", true)
	}

	if u.Two2 != nil {
		return utils.MarshalJSON(u.Two2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvRequestBody2: all fields are null")
}

// CreateProjectEnv1Type - The type of environment variable
type CreateProjectEnv1Type string

const (
	CreateProjectEnv1TypeSystem    CreateProjectEnv1Type = "system"
	CreateProjectEnv1TypeSecret    CreateProjectEnv1Type = "secret"
	CreateProjectEnv1TypeEncrypted CreateProjectEnv1Type = "encrypted"
	CreateProjectEnv1TypePlain     CreateProjectEnv1Type = "plain"
	CreateProjectEnv1TypeSensitive CreateProjectEnv1Type = "sensitive"
)

func (e CreateProjectEnv1Type) ToPointer() *CreateProjectEnv1Type {
	return &e
}
func (e *CreateProjectEnv1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnv1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnv1Type: %v", v)
	}
}

type CreateProjectEnv1Target string

const (
	CreateProjectEnv1TargetProduction  CreateProjectEnv1Target = "production"
	CreateProjectEnv1TargetPreview     CreateProjectEnv1Target = "preview"
	CreateProjectEnv1TargetDevelopment CreateProjectEnv1Target = "development"
)

func (e CreateProjectEnv1Target) ToPointer() *CreateProjectEnv1Target {
	return &e
}
func (e *CreateProjectEnv1Target) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnv1Target(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnv1Target: %v", v)
	}
}

type CreateProjectEnv12 struct {
	// The name of the environment variable
	Key string `json:"key"`
	// The value of the environment variable
	Value string `json:"value"`
	// The type of environment variable
	Type CreateProjectEnv1Type `json:"type"`
	// The target environment of the environment variable
	Target []CreateProjectEnv1Target `json:"target,omitempty"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// A comment to add context on what this environment variable is for
	Comment *string `json:"comment,omitempty"`
	// The custom environment IDs associated with the environment variable
	CustomEnvironmentIds []string `json:"customEnvironmentIds"`
}

func (o *CreateProjectEnv12) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnv12) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectEnv12) GetType() CreateProjectEnv1Type {
	if o == nil {
		return CreateProjectEnv1Type("")
	}
	return o.Type
}

func (o *CreateProjectEnv12) GetTarget() []CreateProjectEnv1Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnv12) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnv12) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateProjectEnv12) GetCustomEnvironmentIds() []string {
	if o == nil {
		return []string{}
	}
	return o.CustomEnvironmentIds
}

// OneType - The type of environment variable
type OneType string

const (
	OneTypeSystem    OneType = "system"
	OneTypeSecret    OneType = "secret"
	OneTypeEncrypted OneType = "encrypted"
	OneTypePlain     OneType = "plain"
	OneTypeSensitive OneType = "sensitive"
)

func (e OneType) ToPointer() *OneType {
	return &e
}
func (e *OneType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = OneType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OneType: %v", v)
	}
}

type OneTarget string

const (
	OneTargetProduction  OneTarget = "production"
	OneTargetPreview     OneTarget = "preview"
	OneTargetDevelopment OneTarget = "development"
)

func (e OneTarget) ToPointer() *OneTarget {
	return &e
}
func (e *OneTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = OneTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OneTarget: %v", v)
	}
}

type CreateProjectEnv11 struct {
	// The name of the environment variable
	Key string `json:"key"`
	// The value of the environment variable
	Value string `json:"value"`
	// The type of environment variable
	Type OneType `json:"type"`
	// The target environment of the environment variable
	Target []OneTarget `json:"target"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// A comment to add context on what this environment variable is for
	Comment *string `json:"comment,omitempty"`
	// The custom environment IDs associated with the environment variable
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
}

func (o *CreateProjectEnv11) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnv11) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectEnv11) GetType() OneType {
	if o == nil {
		return OneType("")
	}
	return o.Type
}

func (o *CreateProjectEnv11) GetTarget() []OneTarget {
	if o == nil {
		return []OneTarget{}
	}
	return o.Target
}

func (o *CreateProjectEnv11) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnv11) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateProjectEnv11) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type CreateProjectEnvRequestBody1Type string

const (
	CreateProjectEnvRequestBody1TypeCreateProjectEnv11 CreateProjectEnvRequestBody1Type = "createProjectEnv_1_1"
	CreateProjectEnvRequestBody1TypeCreateProjectEnv12 CreateProjectEnvRequestBody1Type = "createProjectEnv_1_2"
)

type CreateProjectEnvRequestBody1 struct {
	CreateProjectEnv11 *CreateProjectEnv11
	CreateProjectEnv12 *CreateProjectEnv12

	Type CreateProjectEnvRequestBody1Type
}

func CreateCreateProjectEnvRequestBody1CreateProjectEnv11(createProjectEnv11 CreateProjectEnv11) CreateProjectEnvRequestBody1 {
	typ := CreateProjectEnvRequestBody1TypeCreateProjectEnv11

	return CreateProjectEnvRequestBody1{
		CreateProjectEnv11: &createProjectEnv11,
		Type:               typ,
	}
}

func CreateCreateProjectEnvRequestBody1CreateProjectEnv12(createProjectEnv12 CreateProjectEnv12) CreateProjectEnvRequestBody1 {
	typ := CreateProjectEnvRequestBody1TypeCreateProjectEnv12

	return CreateProjectEnvRequestBody1{
		CreateProjectEnv12: &createProjectEnv12,
		Type:               typ,
	}
}

func (u *CreateProjectEnvRequestBody1) UnmarshalJSON(data []byte) error {

	var createProjectEnv11 CreateProjectEnv11 = CreateProjectEnv11{}
	if err := utils.UnmarshalJSON(data, &createProjectEnv11, "", true, true); err == nil {
		u.CreateProjectEnv11 = &createProjectEnv11
		u.Type = CreateProjectEnvRequestBody1TypeCreateProjectEnv11
		return nil
	}

	var createProjectEnv12 CreateProjectEnv12 = CreateProjectEnv12{}
	if err := utils.UnmarshalJSON(data, &createProjectEnv12, "", true, true); err == nil {
		u.CreateProjectEnv12 = &createProjectEnv12
		u.Type = CreateProjectEnvRequestBody1TypeCreateProjectEnv12
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvRequestBody1", string(data))
}

func (u CreateProjectEnvRequestBody1) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnv11 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv11, "", true)
	}

	if u.CreateProjectEnv12 != nil {
		return utils.MarshalJSON(u.CreateProjectEnv12, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvRequestBody1: all fields are null")
}

type CreateProjectEnvRequestBodyType string

const (
	CreateProjectEnvRequestBodyTypeCreateProjectEnvRequestBody1        CreateProjectEnvRequestBodyType = "createProjectEnv_requestBody_1"
	CreateProjectEnvRequestBodyTypeArrayOfCreateProjectEnvRequestBody2 CreateProjectEnvRequestBodyType = "arrayOfCreateProjectEnvRequestBody2"
)

type CreateProjectEnvRequestBody struct {
	CreateProjectEnvRequestBody1        *CreateProjectEnvRequestBody1
	ArrayOfCreateProjectEnvRequestBody2 []CreateProjectEnvRequestBody2

	Type CreateProjectEnvRequestBodyType
}

func CreateCreateProjectEnvRequestBodyCreateProjectEnvRequestBody1(createProjectEnvRequestBody1 CreateProjectEnvRequestBody1) CreateProjectEnvRequestBody {
	typ := CreateProjectEnvRequestBodyTypeCreateProjectEnvRequestBody1

	return CreateProjectEnvRequestBody{
		CreateProjectEnvRequestBody1: &createProjectEnvRequestBody1,
		Type:                         typ,
	}
}

func CreateCreateProjectEnvRequestBodyArrayOfCreateProjectEnvRequestBody2(arrayOfCreateProjectEnvRequestBody2 []CreateProjectEnvRequestBody2) CreateProjectEnvRequestBody {
	typ := CreateProjectEnvRequestBodyTypeArrayOfCreateProjectEnvRequestBody2

	return CreateProjectEnvRequestBody{
		ArrayOfCreateProjectEnvRequestBody2: arrayOfCreateProjectEnvRequestBody2,
		Type:                                typ,
	}
}

func (u *CreateProjectEnvRequestBody) UnmarshalJSON(data []byte) error {

	var createProjectEnvRequestBody1 CreateProjectEnvRequestBody1 = CreateProjectEnvRequestBody1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvRequestBody1, "", true, true); err == nil {
		u.CreateProjectEnvRequestBody1 = &createProjectEnvRequestBody1
		u.Type = CreateProjectEnvRequestBodyTypeCreateProjectEnvRequestBody1
		return nil
	}

	var arrayOfCreateProjectEnvRequestBody2 []CreateProjectEnvRequestBody2 = []CreateProjectEnvRequestBody2{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectEnvRequestBody2, "", true, true); err == nil {
		u.ArrayOfCreateProjectEnvRequestBody2 = arrayOfCreateProjectEnvRequestBody2
		u.Type = CreateProjectEnvRequestBodyTypeArrayOfCreateProjectEnvRequestBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvRequestBody", string(data))
}

func (u CreateProjectEnvRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvRequestBody1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvRequestBody1, "", true)
	}

	if u.ArrayOfCreateProjectEnvRequestBody2 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectEnvRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvRequestBody: all fields are null")
}

type CreateProjectEnvRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// Allow override of environment variable if it already exists
	Upsert *string `queryParam:"style=form,explode=true,name=upsert"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                     `queryParam:"style=form,explode=true,name=slug"`
	RequestBody CreateProjectEnvRequestBody `request:"mediaType=application/json"`
}

func (o *CreateProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *CreateProjectEnvRequest) GetUpsert() *string {
	if o == nil {
		return nil
	}
	return o.Upsert
}

func (o *CreateProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProjectEnvRequest) GetRequestBody() CreateProjectEnvRequestBody {
	if o == nil {
		return CreateProjectEnvRequestBody{}
	}
	return o.RequestBody
}

type CreateProjectEnvTargetProjects2 string

const (
	CreateProjectEnvTargetProjects2Production  CreateProjectEnvTargetProjects2 = "production"
	CreateProjectEnvTargetProjects2Preview     CreateProjectEnvTargetProjects2 = "preview"
	CreateProjectEnvTargetProjects2Development CreateProjectEnvTargetProjects2 = "development"
)

func (e CreateProjectEnvTargetProjects2) ToPointer() *CreateProjectEnvTargetProjects2 {
	return &e
}
func (e *CreateProjectEnvTargetProjects2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTargetProjects2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTargetProjects2: %v", v)
	}
}

type CreateProjectEnvCreatedTargetType string

const (
	CreateProjectEnvCreatedTargetTypeArrayOfStr                      CreateProjectEnvCreatedTargetType = "arrayOfStr"
	CreateProjectEnvCreatedTargetTypeCreateProjectEnvTargetProjects2 CreateProjectEnvCreatedTargetType = "createProjectEnv_target_projects_2"
)

type CreateProjectEnvCreatedTarget struct {
	ArrayOfStr                      []string
	CreateProjectEnvTargetProjects2 *CreateProjectEnvTargetProjects2

	Type CreateProjectEnvCreatedTargetType
}

func CreateCreateProjectEnvCreatedTargetArrayOfStr(arrayOfStr []string) CreateProjectEnvCreatedTarget {
	typ := CreateProjectEnvCreatedTargetTypeArrayOfStr

	return CreateProjectEnvCreatedTarget{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateCreateProjectEnvCreatedTargetCreateProjectEnvTargetProjects2(createProjectEnvTargetProjects2 CreateProjectEnvTargetProjects2) CreateProjectEnvCreatedTarget {
	typ := CreateProjectEnvCreatedTargetTypeCreateProjectEnvTargetProjects2

	return CreateProjectEnvCreatedTarget{
		CreateProjectEnvTargetProjects2: &createProjectEnvTargetProjects2,
		Type:                            typ,
	}
}

func (u *CreateProjectEnvCreatedTarget) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreateProjectEnvCreatedTargetTypeArrayOfStr
		return nil
	}

	var createProjectEnvTargetProjects2 CreateProjectEnvTargetProjects2 = CreateProjectEnvTargetProjects2("")
	if err := utils.UnmarshalJSON(data, &createProjectEnvTargetProjects2, "", true, true); err == nil {
		u.CreateProjectEnvTargetProjects2 = &createProjectEnvTargetProjects2
		u.Type = CreateProjectEnvCreatedTargetTypeCreateProjectEnvTargetProjects2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvCreatedTarget", string(data))
}

func (u CreateProjectEnvCreatedTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.CreateProjectEnvTargetProjects2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvTargetProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvCreatedTarget: all fields are null")
}

type CreateProjectEnvCreatedType string

const (
	CreateProjectEnvCreatedTypeSystem    CreateProjectEnvCreatedType = "system"
	CreateProjectEnvCreatedTypeEncrypted CreateProjectEnvCreatedType = "encrypted"
	CreateProjectEnvCreatedTypePlain     CreateProjectEnvCreatedType = "plain"
	CreateProjectEnvCreatedTypeSensitive CreateProjectEnvCreatedType = "sensitive"
	CreateProjectEnvCreatedTypeSecret    CreateProjectEnvCreatedType = "secret"
)

func (e CreateProjectEnvCreatedType) ToPointer() *CreateProjectEnvCreatedType {
	return &e
}
func (e *CreateProjectEnvCreatedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = CreateProjectEnvCreatedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvCreatedType: %v", v)
	}
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215TypeFlagsConnectionString CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type = "flags-connection-string"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects15 struct {
	Type      CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type `json:"type"`
	ProjectID string                                                                                  `json:"projectId"`
}

func (o *CreateProjectEnvContentHintProjects15) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated215Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects15) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214TypeIntegrationStoreSecret CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type = "integration-store-secret"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects14 struct {
	Type                       CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type `json:"type"`
	StoreID                    string                                                                                  `json:"storeId"`
	IntegrationID              string                                                                                  `json:"integrationId"`
	IntegrationProductID       string                                                                                  `json:"integrationProductId"`
	IntegrationConfigurationID string                                                                                  `json:"integrationConfigurationId"`
}

func (o *CreateProjectEnvContentHintProjects14) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvContentHintProjects14) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateProjectEnvContentHintProjects14) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *CreateProjectEnvContentHintProjects14) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213TypePostgresURLNoSsl CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type = "postgres-url-no-ssl"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects13 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type `json:"type"`
	StoreID string                                                                                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects13) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212TypePostgresDatabase CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type = "postgres-database"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects12 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type `json:"type"`
	StoreID string                                                                                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects12) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211TypePostgresPassword CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type = "postgres-password"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects11 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type `json:"type"`
	StoreID string                                                                                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects11) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210TypePostgresHost CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type = "postgres-host"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects10 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type `json:"type"`
	StoreID string                                                                                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects10) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29TypePostgresUser CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type = "postgres-user"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects9 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects9) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28TypePostgresPrismaURL CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type = "postgres-prisma-url"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects8 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects8) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27TypePostgresURLNonPooling CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type = "postgres-url-non-pooling"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects7 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects7) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26TypePostgresURL CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type = "postgres-url"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects6 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects6) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25TypeBlobReadWriteToken CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type = "blob-read-write-token"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects5 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects5) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24TypeRedisRestAPIReadOnlyToken CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type = "redis-rest-api-read-only-token"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects4 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects4) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23TypeRedisRestAPIToken CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type = "redis-rest-api-token"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects3 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects3) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22TypeRedisRestAPIURL CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type = "redis-rest-api-url"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects2 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects2) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2TypeRedisURL CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type = "redis-url"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type: %v", v)
	}
}

type CreateProjectEnvContentHintProjects1 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *CreateProjectEnvContentHintProjects1) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintProjects1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvCreatedContentHintType string

const (
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects1  CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_1"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects2  CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_2"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects3  CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_3"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects4  CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_4"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects5  CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_5"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects6  CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_6"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects7  CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_7"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects8  CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_8"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects9  CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_9"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects10 CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_10"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects11 CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_11"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects12 CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_12"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects13 CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_13"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects14 CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_14"
	CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects15 CreateProjectEnvCreatedContentHintType = "createProjectEnv_contentHint_projects_15"
)

type CreateProjectEnvCreatedContentHint struct {
	CreateProjectEnvContentHintProjects1  *CreateProjectEnvContentHintProjects1
	CreateProjectEnvContentHintProjects2  *CreateProjectEnvContentHintProjects2
	CreateProjectEnvContentHintProjects3  *CreateProjectEnvContentHintProjects3
	CreateProjectEnvContentHintProjects4  *CreateProjectEnvContentHintProjects4
	CreateProjectEnvContentHintProjects5  *CreateProjectEnvContentHintProjects5
	CreateProjectEnvContentHintProjects6  *CreateProjectEnvContentHintProjects6
	CreateProjectEnvContentHintProjects7  *CreateProjectEnvContentHintProjects7
	CreateProjectEnvContentHintProjects8  *CreateProjectEnvContentHintProjects8
	CreateProjectEnvContentHintProjects9  *CreateProjectEnvContentHintProjects9
	CreateProjectEnvContentHintProjects10 *CreateProjectEnvContentHintProjects10
	CreateProjectEnvContentHintProjects11 *CreateProjectEnvContentHintProjects11
	CreateProjectEnvContentHintProjects12 *CreateProjectEnvContentHintProjects12
	CreateProjectEnvContentHintProjects13 *CreateProjectEnvContentHintProjects13
	CreateProjectEnvContentHintProjects14 *CreateProjectEnvContentHintProjects14
	CreateProjectEnvContentHintProjects15 *CreateProjectEnvContentHintProjects15

	Type CreateProjectEnvCreatedContentHintType
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects1(createProjectEnvContentHintProjects1 CreateProjectEnvContentHintProjects1) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects1

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects1: &createProjectEnvContentHintProjects1,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects2(createProjectEnvContentHintProjects2 CreateProjectEnvContentHintProjects2) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects2

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects2: &createProjectEnvContentHintProjects2,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects3(createProjectEnvContentHintProjects3 CreateProjectEnvContentHintProjects3) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects3

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects3: &createProjectEnvContentHintProjects3,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects4(createProjectEnvContentHintProjects4 CreateProjectEnvContentHintProjects4) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects4

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects4: &createProjectEnvContentHintProjects4,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects5(createProjectEnvContentHintProjects5 CreateProjectEnvContentHintProjects5) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects5

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects5: &createProjectEnvContentHintProjects5,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects6(createProjectEnvContentHintProjects6 CreateProjectEnvContentHintProjects6) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects6

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects6: &createProjectEnvContentHintProjects6,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects7(createProjectEnvContentHintProjects7 CreateProjectEnvContentHintProjects7) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects7

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects7: &createProjectEnvContentHintProjects7,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects8(createProjectEnvContentHintProjects8 CreateProjectEnvContentHintProjects8) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects8

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects8: &createProjectEnvContentHintProjects8,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects9(createProjectEnvContentHintProjects9 CreateProjectEnvContentHintProjects9) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects9

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects9: &createProjectEnvContentHintProjects9,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects10(createProjectEnvContentHintProjects10 CreateProjectEnvContentHintProjects10) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects10

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects10: &createProjectEnvContentHintProjects10,
		Type:                                  typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects11(createProjectEnvContentHintProjects11 CreateProjectEnvContentHintProjects11) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects11

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects11: &createProjectEnvContentHintProjects11,
		Type:                                  typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects12(createProjectEnvContentHintProjects12 CreateProjectEnvContentHintProjects12) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects12

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects12: &createProjectEnvContentHintProjects12,
		Type:                                  typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects13(createProjectEnvContentHintProjects13 CreateProjectEnvContentHintProjects13) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects13

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects13: &createProjectEnvContentHintProjects13,
		Type:                                  typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects14(createProjectEnvContentHintProjects14 CreateProjectEnvContentHintProjects14) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects14

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects14: &createProjectEnvContentHintProjects14,
		Type:                                  typ,
	}
}

func CreateCreateProjectEnvCreatedContentHintCreateProjectEnvContentHintProjects15(createProjectEnvContentHintProjects15 CreateProjectEnvContentHintProjects15) CreateProjectEnvCreatedContentHint {
	typ := CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects15

	return CreateProjectEnvCreatedContentHint{
		CreateProjectEnvContentHintProjects15: &createProjectEnvContentHintProjects15,
		Type:                                  typ,
	}
}

func (u *CreateProjectEnvCreatedContentHint) UnmarshalJSON(data []byte) error {

	var createProjectEnvContentHintProjects7 CreateProjectEnvContentHintProjects7 = CreateProjectEnvContentHintProjects7{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects7, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects7 = &createProjectEnvContentHintProjects7
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects7
		return nil
	}

	var createProjectEnvContentHintProjects11 CreateProjectEnvContentHintProjects11 = CreateProjectEnvContentHintProjects11{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects11, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects11 = &createProjectEnvContentHintProjects11
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects11
		return nil
	}

	var createProjectEnvContentHintProjects3 CreateProjectEnvContentHintProjects3 = CreateProjectEnvContentHintProjects3{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects3, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects3 = &createProjectEnvContentHintProjects3
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects3
		return nil
	}

	var createProjectEnvContentHintProjects4 CreateProjectEnvContentHintProjects4 = CreateProjectEnvContentHintProjects4{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects4, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects4 = &createProjectEnvContentHintProjects4
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects4
		return nil
	}

	var createProjectEnvContentHintProjects5 CreateProjectEnvContentHintProjects5 = CreateProjectEnvContentHintProjects5{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects5, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects5 = &createProjectEnvContentHintProjects5
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects5
		return nil
	}

	var createProjectEnvContentHintProjects6 CreateProjectEnvContentHintProjects6 = CreateProjectEnvContentHintProjects6{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects6, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects6 = &createProjectEnvContentHintProjects6
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects6
		return nil
	}

	var createProjectEnvContentHintProjects2 CreateProjectEnvContentHintProjects2 = CreateProjectEnvContentHintProjects2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects2 = &createProjectEnvContentHintProjects2
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects2
		return nil
	}

	var createProjectEnvContentHintProjects9 CreateProjectEnvContentHintProjects9 = CreateProjectEnvContentHintProjects9{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects9, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects9 = &createProjectEnvContentHintProjects9
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects9
		return nil
	}

	var createProjectEnvContentHintProjects1 CreateProjectEnvContentHintProjects1 = CreateProjectEnvContentHintProjects1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects1 = &createProjectEnvContentHintProjects1
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects1
		return nil
	}

	var createProjectEnvContentHintProjects10 CreateProjectEnvContentHintProjects10 = CreateProjectEnvContentHintProjects10{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects10, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects10 = &createProjectEnvContentHintProjects10
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects10
		return nil
	}

	var createProjectEnvContentHintProjects8 CreateProjectEnvContentHintProjects8 = CreateProjectEnvContentHintProjects8{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects8, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects8 = &createProjectEnvContentHintProjects8
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects8
		return nil
	}

	var createProjectEnvContentHintProjects12 CreateProjectEnvContentHintProjects12 = CreateProjectEnvContentHintProjects12{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects12, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects12 = &createProjectEnvContentHintProjects12
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects12
		return nil
	}

	var createProjectEnvContentHintProjects13 CreateProjectEnvContentHintProjects13 = CreateProjectEnvContentHintProjects13{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects13, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects13 = &createProjectEnvContentHintProjects13
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects13
		return nil
	}

	var createProjectEnvContentHintProjects15 CreateProjectEnvContentHintProjects15 = CreateProjectEnvContentHintProjects15{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects15, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects15 = &createProjectEnvContentHintProjects15
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects15
		return nil
	}

	var createProjectEnvContentHintProjects14 CreateProjectEnvContentHintProjects14 = CreateProjectEnvContentHintProjects14{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintProjects14, "", true, true); err == nil {
		u.CreateProjectEnvContentHintProjects14 = &createProjectEnvContentHintProjects14
		u.Type = CreateProjectEnvCreatedContentHintTypeCreateProjectEnvContentHintProjects14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvCreatedContentHint", string(data))
}

func (u CreateProjectEnvCreatedContentHint) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvContentHintProjects1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects1, "", true)
	}

	if u.CreateProjectEnvContentHintProjects2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects2, "", true)
	}

	if u.CreateProjectEnvContentHintProjects3 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects3, "", true)
	}

	if u.CreateProjectEnvContentHintProjects4 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects4, "", true)
	}

	if u.CreateProjectEnvContentHintProjects5 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects5, "", true)
	}

	if u.CreateProjectEnvContentHintProjects6 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects6, "", true)
	}

	if u.CreateProjectEnvContentHintProjects7 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects7, "", true)
	}

	if u.CreateProjectEnvContentHintProjects8 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects8, "", true)
	}

	if u.CreateProjectEnvContentHintProjects9 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects9, "", true)
	}

	if u.CreateProjectEnvContentHintProjects10 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects10, "", true)
	}

	if u.CreateProjectEnvContentHintProjects11 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects11, "", true)
	}

	if u.CreateProjectEnvContentHintProjects12 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects12, "", true)
	}

	if u.CreateProjectEnvContentHintProjects13 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects13, "", true)
	}

	if u.CreateProjectEnvContentHintProjects14 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects14, "", true)
	}

	if u.CreateProjectEnvContentHintProjects15 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintProjects15, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvCreatedContentHint: all fields are null")
}

type CreateProjectEnvCreatedProjectsResponseType string

const (
	CreateProjectEnvCreatedProjectsResponseTypeFlagsSecret CreateProjectEnvCreatedProjectsResponseType = "flags-secret"
)

func (e CreateProjectEnvCreatedProjectsResponseType) ToPointer() *CreateProjectEnvCreatedProjectsResponseType {
	return &e
}
func (e *CreateProjectEnvCreatedProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = CreateProjectEnvCreatedProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvCreatedProjectsResponseType: %v", v)
	}
}

// CreateProjectEnvCreatedInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type CreateProjectEnvCreatedInternalContentHint struct {
	Type CreateProjectEnvCreatedProjectsResponseType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *CreateProjectEnvCreatedInternalContentHint) GetType() CreateProjectEnvCreatedProjectsResponseType {
	if o == nil {
		return CreateProjectEnvCreatedProjectsResponseType("")
	}
	return o.Type
}

func (o *CreateProjectEnvCreatedInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type Created2 struct {
	Target *CreateProjectEnvCreatedTarget `json:"target,omitempty"`
	Type   *CreateProjectEnvCreatedType   `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                             `json:"sunsetSecretId,omitempty"`
	ID                *string                             `json:"id,omitempty"`
	Key               *string                             `json:"key,omitempty"`
	Value             *string                             `json:"value,omitempty"`
	ConfigurationID   *string                             `json:"configurationId,omitempty"`
	CreatedAt         *float64                            `json:"createdAt,omitempty"`
	UpdatedAt         *float64                            `json:"updatedAt,omitempty"`
	CreatedBy         *string                             `json:"createdBy,omitempty"`
	UpdatedBy         *string                             `json:"updatedBy,omitempty"`
	GitBranch         *string                             `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                             `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                             `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *CreateProjectEnvCreatedContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *CreateProjectEnvCreatedInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` and `vsmValue` are decrypted.
	Decrypted            *bool    `json:"decrypted,omitempty"`
	Comment              *string  `json:"comment,omitempty"`
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	VsmValue             *string  `json:"vsmValue,omitempty"`
	System               *bool    `json:"system,omitempty"`
}

func (o *Created2) GetTarget() *CreateProjectEnvCreatedTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Created2) GetType() *CreateProjectEnvCreatedType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Created2) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *Created2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Created2) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Created2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Created2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *Created2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Created2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Created2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Created2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Created2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Created2) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *Created2) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *Created2) GetContentHint() *CreateProjectEnvCreatedContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *Created2) GetInternalContentHint() *CreateProjectEnvCreatedInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *Created2) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Created2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Created2) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *Created2) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *Created2) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

type CreateProjectEnvTarget2 string

const (
	CreateProjectEnvTarget2Production  CreateProjectEnvTarget2 = "production"
	CreateProjectEnvTarget2Preview     CreateProjectEnvTarget2 = "preview"
	CreateProjectEnvTarget2Development CreateProjectEnvTarget2 = "development"
)

func (e CreateProjectEnvTarget2) ToPointer() *CreateProjectEnvTarget2 {
	return &e
}
func (e *CreateProjectEnvTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTarget2: %v", v)
	}
}

type CreateProjectEnvTarget1 string

const (
	CreateProjectEnvTarget1Production  CreateProjectEnvTarget1 = "production"
	CreateProjectEnvTarget1Preview     CreateProjectEnvTarget1 = "preview"
	CreateProjectEnvTarget1Development CreateProjectEnvTarget1 = "development"
)

func (e CreateProjectEnvTarget1) ToPointer() *CreateProjectEnvTarget1 {
	return &e
}
func (e *CreateProjectEnvTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTarget1: %v", v)
	}
}

type CreatedTargetType string

const (
	CreatedTargetTypeArrayOfCreateProjectEnvTarget1 CreatedTargetType = "arrayOfCreateProjectEnvTarget1"
	CreatedTargetTypeCreateProjectEnvTarget2        CreatedTargetType = "createProjectEnv_target_2"
)

type CreatedTarget struct {
	ArrayOfCreateProjectEnvTarget1 []CreateProjectEnvTarget1
	CreateProjectEnvTarget2        *CreateProjectEnvTarget2

	Type CreatedTargetType
}

func CreateCreatedTargetArrayOfCreateProjectEnvTarget1(arrayOfCreateProjectEnvTarget1 []CreateProjectEnvTarget1) CreatedTarget {
	typ := CreatedTargetTypeArrayOfCreateProjectEnvTarget1

	return CreatedTarget{
		ArrayOfCreateProjectEnvTarget1: arrayOfCreateProjectEnvTarget1,
		Type:                           typ,
	}
}

func CreateCreatedTargetCreateProjectEnvTarget2(createProjectEnvTarget2 CreateProjectEnvTarget2) CreatedTarget {
	typ := CreatedTargetTypeCreateProjectEnvTarget2

	return CreatedTarget{
		CreateProjectEnvTarget2: &createProjectEnvTarget2,
		Type:                    typ,
	}
}

func (u *CreatedTarget) UnmarshalJSON(data []byte) error {

	var arrayOfCreateProjectEnvTarget1 []CreateProjectEnvTarget1 = []CreateProjectEnvTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectEnvTarget1, "", true, true); err == nil {
		u.ArrayOfCreateProjectEnvTarget1 = arrayOfCreateProjectEnvTarget1
		u.Type = CreatedTargetTypeArrayOfCreateProjectEnvTarget1
		return nil
	}

	var createProjectEnvTarget2 CreateProjectEnvTarget2 = CreateProjectEnvTarget2("")
	if err := utils.UnmarshalJSON(data, &createProjectEnvTarget2, "", true, true); err == nil {
		u.CreateProjectEnvTarget2 = &createProjectEnvTarget2
		u.Type = CreatedTargetTypeCreateProjectEnvTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatedTarget", string(data))
}

func (u CreatedTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateProjectEnvTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectEnvTarget1, "", true)
	}

	if u.CreateProjectEnvTarget2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type CreatedTarget: all fields are null")
}

type CreatedType string

const (
	CreatedTypeSystem    CreatedType = "system"
	CreatedTypeEncrypted CreatedType = "encrypted"
	CreatedTypePlain     CreatedType = "plain"
	CreatedTypeSensitive CreatedType = "sensitive"
	CreatedTypeSecret    CreatedType = "secret"
)

func (e CreatedType) ToPointer() *CreatedType {
	return &e
}
func (e *CreatedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = CreatedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedType: %v", v)
	}
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115TypeFlagsConnectionString CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type = "flags-connection-string"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type: %v", v)
	}
}

type CreateProjectEnvContentHint15 struct {
	Type      CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type `json:"type"`
	ProjectID string                                                                                  `json:"projectId"`
}

func (o *CreateProjectEnvContentHint15) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated115Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint15) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114TypeIntegrationStoreSecret CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type = "integration-store-secret"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type: %v", v)
	}
}

type CreateProjectEnvContentHint14 struct {
	Type                       CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type `json:"type"`
	StoreID                    string                                                                                  `json:"storeId"`
	IntegrationID              string                                                                                  `json:"integrationId"`
	IntegrationProductID       string                                                                                  `json:"integrationProductId"`
	IntegrationConfigurationID string                                                                                  `json:"integrationConfigurationId"`
}

func (o *CreateProjectEnvContentHint14) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvContentHint14) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateProjectEnvContentHint14) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *CreateProjectEnvContentHint14) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113TypePostgresURLNoSsl CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type = "postgres-url-no-ssl"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type: %v", v)
	}
}

type CreateProjectEnvContentHint13 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type `json:"type"`
	StoreID string                                                                                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHint13) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112TypePostgresDatabase CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type = "postgres-database"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type: %v", v)
	}
}

type CreateProjectEnvContentHint12 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type `json:"type"`
	StoreID string                                                                                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHint12) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111TypePostgresPassword CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type = "postgres-password"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type: %v", v)
	}
}

type CreateProjectEnvContentHint11 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type `json:"type"`
	StoreID string                                                                                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHint11) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110TypePostgresHost CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type = "postgres-host"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type: %v", v)
	}
}

type CreateProjectEnvContentHint10 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type `json:"type"`
	StoreID string                                                                                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHint10) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19TypePostgresUser CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type = "postgres-user"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type: %v", v)
	}
}

type CreateProjectEnvContentHint9 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *CreateProjectEnvContentHint9) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1TypePostgresPrismaURL CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type = "postgres-prisma-url"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type: %v", v)
	}
}

type CreateProjectEnvContentHint8 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *CreateProjectEnvContentHint8) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedTypePostgresURLNonPooling CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType = "postgres-url-non-pooling"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType: %v", v)
	}
}

type CreateProjectEnvContentHint7 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *CreateProjectEnvContentHint7) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyTypePostgresURL CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType = "postgres-url"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType: %v", v)
	}
}

type CreateProjectEnvContentHint6 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *CreateProjectEnvContentHint6) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType string

const (
	CreateProjectEnvContentHintProjectsResponse201ApplicationJSONTypeBlobReadWriteToken CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType = "blob-read-write-token"
)

func (e CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType) ToPointer() *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType: %v", v)
	}
}

type CreateProjectEnvContentHint5 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType `json:"type"`
	StoreID string                                                            `json:"storeId"`
}

func (o *CreateProjectEnvContentHint5) GetType() CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponse201Type string

const (
	CreateProjectEnvContentHintProjectsResponse201TypeRedisRestAPIReadOnlyToken CreateProjectEnvContentHintProjectsResponse201Type = "redis-rest-api-read-only-token"
)

func (e CreateProjectEnvContentHintProjectsResponse201Type) ToPointer() *CreateProjectEnvContentHintProjectsResponse201Type {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponse201Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreateProjectEnvContentHintProjectsResponse201Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponse201Type: %v", v)
	}
}

type CreateProjectEnvContentHint4 struct {
	Type    CreateProjectEnvContentHintProjectsResponse201Type `json:"type"`
	StoreID string                                             `json:"storeId"`
}

func (o *CreateProjectEnvContentHint4) GetType() CreateProjectEnvContentHintProjectsResponse201Type {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponse201Type("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsResponseType string

const (
	CreateProjectEnvContentHintProjectsResponseTypeRedisRestAPIToken CreateProjectEnvContentHintProjectsResponseType = "redis-rest-api-token"
)

func (e CreateProjectEnvContentHintProjectsResponseType) ToPointer() *CreateProjectEnvContentHintProjectsResponseType {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreateProjectEnvContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsResponseType: %v", v)
	}
}

type CreateProjectEnvContentHint3 struct {
	Type    CreateProjectEnvContentHintProjectsResponseType `json:"type"`
	StoreID string                                          `json:"storeId"`
}

func (o *CreateProjectEnvContentHint3) GetType() CreateProjectEnvContentHintProjectsResponseType {
	if o == nil {
		return CreateProjectEnvContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintProjectsType string

const (
	CreateProjectEnvContentHintProjectsTypeRedisRestAPIURL CreateProjectEnvContentHintProjectsType = "redis-rest-api-url"
)

func (e CreateProjectEnvContentHintProjectsType) ToPointer() *CreateProjectEnvContentHintProjectsType {
	return &e
}
func (e *CreateProjectEnvContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreateProjectEnvContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintProjectsType: %v", v)
	}
}

type CreateProjectEnvContentHint2 struct {
	Type    CreateProjectEnvContentHintProjectsType `json:"type"`
	StoreID string                                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHint2) GetType() CreateProjectEnvContentHintProjectsType {
	if o == nil {
		return CreateProjectEnvContentHintProjectsType("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintType string

const (
	CreateProjectEnvContentHintTypeRedisURL CreateProjectEnvContentHintType = "redis-url"
)

func (e CreateProjectEnvContentHintType) ToPointer() *CreateProjectEnvContentHintType {
	return &e
}
func (e *CreateProjectEnvContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreateProjectEnvContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvContentHintType: %v", v)
	}
}

type CreateProjectEnvContentHint1 struct {
	Type    CreateProjectEnvContentHintType `json:"type"`
	StoreID string                          `json:"storeId"`
}

func (o *CreateProjectEnvContentHint1) GetType() CreateProjectEnvContentHintType {
	if o == nil {
		return CreateProjectEnvContentHintType("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedContentHintType string

const (
	CreatedContentHintTypeCreateProjectEnvContentHint1  CreatedContentHintType = "createProjectEnv_contentHint_1"
	CreatedContentHintTypeCreateProjectEnvContentHint2  CreatedContentHintType = "createProjectEnv_contentHint_2"
	CreatedContentHintTypeCreateProjectEnvContentHint3  CreatedContentHintType = "createProjectEnv_contentHint_3"
	CreatedContentHintTypeCreateProjectEnvContentHint4  CreatedContentHintType = "createProjectEnv_contentHint_4"
	CreatedContentHintTypeCreateProjectEnvContentHint5  CreatedContentHintType = "createProjectEnv_contentHint_5"
	CreatedContentHintTypeCreateProjectEnvContentHint6  CreatedContentHintType = "createProjectEnv_contentHint_6"
	CreatedContentHintTypeCreateProjectEnvContentHint7  CreatedContentHintType = "createProjectEnv_contentHint_7"
	CreatedContentHintTypeCreateProjectEnvContentHint8  CreatedContentHintType = "createProjectEnv_contentHint_8"
	CreatedContentHintTypeCreateProjectEnvContentHint9  CreatedContentHintType = "createProjectEnv_contentHint_9"
	CreatedContentHintTypeCreateProjectEnvContentHint10 CreatedContentHintType = "createProjectEnv_contentHint_10"
	CreatedContentHintTypeCreateProjectEnvContentHint11 CreatedContentHintType = "createProjectEnv_contentHint_11"
	CreatedContentHintTypeCreateProjectEnvContentHint12 CreatedContentHintType = "createProjectEnv_contentHint_12"
	CreatedContentHintTypeCreateProjectEnvContentHint13 CreatedContentHintType = "createProjectEnv_contentHint_13"
	CreatedContentHintTypeCreateProjectEnvContentHint14 CreatedContentHintType = "createProjectEnv_contentHint_14"
	CreatedContentHintTypeCreateProjectEnvContentHint15 CreatedContentHintType = "createProjectEnv_contentHint_15"
)

type CreatedContentHint struct {
	CreateProjectEnvContentHint1  *CreateProjectEnvContentHint1
	CreateProjectEnvContentHint2  *CreateProjectEnvContentHint2
	CreateProjectEnvContentHint3  *CreateProjectEnvContentHint3
	CreateProjectEnvContentHint4  *CreateProjectEnvContentHint4
	CreateProjectEnvContentHint5  *CreateProjectEnvContentHint5
	CreateProjectEnvContentHint6  *CreateProjectEnvContentHint6
	CreateProjectEnvContentHint7  *CreateProjectEnvContentHint7
	CreateProjectEnvContentHint8  *CreateProjectEnvContentHint8
	CreateProjectEnvContentHint9  *CreateProjectEnvContentHint9
	CreateProjectEnvContentHint10 *CreateProjectEnvContentHint10
	CreateProjectEnvContentHint11 *CreateProjectEnvContentHint11
	CreateProjectEnvContentHint12 *CreateProjectEnvContentHint12
	CreateProjectEnvContentHint13 *CreateProjectEnvContentHint13
	CreateProjectEnvContentHint14 *CreateProjectEnvContentHint14
	CreateProjectEnvContentHint15 *CreateProjectEnvContentHint15

	Type CreatedContentHintType
}

func CreateCreatedContentHintCreateProjectEnvContentHint1(createProjectEnvContentHint1 CreateProjectEnvContentHint1) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint1

	return CreatedContentHint{
		CreateProjectEnvContentHint1: &createProjectEnvContentHint1,
		Type:                         typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint2(createProjectEnvContentHint2 CreateProjectEnvContentHint2) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint2

	return CreatedContentHint{
		CreateProjectEnvContentHint2: &createProjectEnvContentHint2,
		Type:                         typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint3(createProjectEnvContentHint3 CreateProjectEnvContentHint3) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint3

	return CreatedContentHint{
		CreateProjectEnvContentHint3: &createProjectEnvContentHint3,
		Type:                         typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint4(createProjectEnvContentHint4 CreateProjectEnvContentHint4) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint4

	return CreatedContentHint{
		CreateProjectEnvContentHint4: &createProjectEnvContentHint4,
		Type:                         typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint5(createProjectEnvContentHint5 CreateProjectEnvContentHint5) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint5

	return CreatedContentHint{
		CreateProjectEnvContentHint5: &createProjectEnvContentHint5,
		Type:                         typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint6(createProjectEnvContentHint6 CreateProjectEnvContentHint6) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint6

	return CreatedContentHint{
		CreateProjectEnvContentHint6: &createProjectEnvContentHint6,
		Type:                         typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint7(createProjectEnvContentHint7 CreateProjectEnvContentHint7) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint7

	return CreatedContentHint{
		CreateProjectEnvContentHint7: &createProjectEnvContentHint7,
		Type:                         typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint8(createProjectEnvContentHint8 CreateProjectEnvContentHint8) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint8

	return CreatedContentHint{
		CreateProjectEnvContentHint8: &createProjectEnvContentHint8,
		Type:                         typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint9(createProjectEnvContentHint9 CreateProjectEnvContentHint9) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint9

	return CreatedContentHint{
		CreateProjectEnvContentHint9: &createProjectEnvContentHint9,
		Type:                         typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint10(createProjectEnvContentHint10 CreateProjectEnvContentHint10) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint10

	return CreatedContentHint{
		CreateProjectEnvContentHint10: &createProjectEnvContentHint10,
		Type:                          typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint11(createProjectEnvContentHint11 CreateProjectEnvContentHint11) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint11

	return CreatedContentHint{
		CreateProjectEnvContentHint11: &createProjectEnvContentHint11,
		Type:                          typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint12(createProjectEnvContentHint12 CreateProjectEnvContentHint12) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint12

	return CreatedContentHint{
		CreateProjectEnvContentHint12: &createProjectEnvContentHint12,
		Type:                          typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint13(createProjectEnvContentHint13 CreateProjectEnvContentHint13) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint13

	return CreatedContentHint{
		CreateProjectEnvContentHint13: &createProjectEnvContentHint13,
		Type:                          typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint14(createProjectEnvContentHint14 CreateProjectEnvContentHint14) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint14

	return CreatedContentHint{
		CreateProjectEnvContentHint14: &createProjectEnvContentHint14,
		Type:                          typ,
	}
}

func CreateCreatedContentHintCreateProjectEnvContentHint15(createProjectEnvContentHint15 CreateProjectEnvContentHint15) CreatedContentHint {
	typ := CreatedContentHintTypeCreateProjectEnvContentHint15

	return CreatedContentHint{
		CreateProjectEnvContentHint15: &createProjectEnvContentHint15,
		Type:                          typ,
	}
}

func (u *CreatedContentHint) UnmarshalJSON(data []byte) error {

	var createProjectEnvContentHint7 CreateProjectEnvContentHint7 = CreateProjectEnvContentHint7{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint7, "", true, true); err == nil {
		u.CreateProjectEnvContentHint7 = &createProjectEnvContentHint7
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint7
		return nil
	}

	var createProjectEnvContentHint11 CreateProjectEnvContentHint11 = CreateProjectEnvContentHint11{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint11, "", true, true); err == nil {
		u.CreateProjectEnvContentHint11 = &createProjectEnvContentHint11
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint11
		return nil
	}

	var createProjectEnvContentHint3 CreateProjectEnvContentHint3 = CreateProjectEnvContentHint3{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint3, "", true, true); err == nil {
		u.CreateProjectEnvContentHint3 = &createProjectEnvContentHint3
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint3
		return nil
	}

	var createProjectEnvContentHint4 CreateProjectEnvContentHint4 = CreateProjectEnvContentHint4{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint4, "", true, true); err == nil {
		u.CreateProjectEnvContentHint4 = &createProjectEnvContentHint4
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint4
		return nil
	}

	var createProjectEnvContentHint5 CreateProjectEnvContentHint5 = CreateProjectEnvContentHint5{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint5, "", true, true); err == nil {
		u.CreateProjectEnvContentHint5 = &createProjectEnvContentHint5
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint5
		return nil
	}

	var createProjectEnvContentHint6 CreateProjectEnvContentHint6 = CreateProjectEnvContentHint6{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint6, "", true, true); err == nil {
		u.CreateProjectEnvContentHint6 = &createProjectEnvContentHint6
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint6
		return nil
	}

	var createProjectEnvContentHint2 CreateProjectEnvContentHint2 = CreateProjectEnvContentHint2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint2, "", true, true); err == nil {
		u.CreateProjectEnvContentHint2 = &createProjectEnvContentHint2
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint2
		return nil
	}

	var createProjectEnvContentHint9 CreateProjectEnvContentHint9 = CreateProjectEnvContentHint9{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint9, "", true, true); err == nil {
		u.CreateProjectEnvContentHint9 = &createProjectEnvContentHint9
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint9
		return nil
	}

	var createProjectEnvContentHint1 CreateProjectEnvContentHint1 = CreateProjectEnvContentHint1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint1, "", true, true); err == nil {
		u.CreateProjectEnvContentHint1 = &createProjectEnvContentHint1
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint1
		return nil
	}

	var createProjectEnvContentHint10 CreateProjectEnvContentHint10 = CreateProjectEnvContentHint10{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint10, "", true, true); err == nil {
		u.CreateProjectEnvContentHint10 = &createProjectEnvContentHint10
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint10
		return nil
	}

	var createProjectEnvContentHint8 CreateProjectEnvContentHint8 = CreateProjectEnvContentHint8{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint8, "", true, true); err == nil {
		u.CreateProjectEnvContentHint8 = &createProjectEnvContentHint8
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint8
		return nil
	}

	var createProjectEnvContentHint12 CreateProjectEnvContentHint12 = CreateProjectEnvContentHint12{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint12, "", true, true); err == nil {
		u.CreateProjectEnvContentHint12 = &createProjectEnvContentHint12
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint12
		return nil
	}

	var createProjectEnvContentHint13 CreateProjectEnvContentHint13 = CreateProjectEnvContentHint13{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint13, "", true, true); err == nil {
		u.CreateProjectEnvContentHint13 = &createProjectEnvContentHint13
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint13
		return nil
	}

	var createProjectEnvContentHint15 CreateProjectEnvContentHint15 = CreateProjectEnvContentHint15{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint15, "", true, true); err == nil {
		u.CreateProjectEnvContentHint15 = &createProjectEnvContentHint15
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint15
		return nil
	}

	var createProjectEnvContentHint14 CreateProjectEnvContentHint14 = CreateProjectEnvContentHint14{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHint14, "", true, true); err == nil {
		u.CreateProjectEnvContentHint14 = &createProjectEnvContentHint14
		u.Type = CreatedContentHintTypeCreateProjectEnvContentHint14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatedContentHint", string(data))
}

func (u CreatedContentHint) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvContentHint1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint1, "", true)
	}

	if u.CreateProjectEnvContentHint2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint2, "", true)
	}

	if u.CreateProjectEnvContentHint3 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint3, "", true)
	}

	if u.CreateProjectEnvContentHint4 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint4, "", true)
	}

	if u.CreateProjectEnvContentHint5 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint5, "", true)
	}

	if u.CreateProjectEnvContentHint6 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint6, "", true)
	}

	if u.CreateProjectEnvContentHint7 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint7, "", true)
	}

	if u.CreateProjectEnvContentHint8 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint8, "", true)
	}

	if u.CreateProjectEnvContentHint9 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint9, "", true)
	}

	if u.CreateProjectEnvContentHint10 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint10, "", true)
	}

	if u.CreateProjectEnvContentHint11 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint11, "", true)
	}

	if u.CreateProjectEnvContentHint12 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint12, "", true)
	}

	if u.CreateProjectEnvContentHint13 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint13, "", true)
	}

	if u.CreateProjectEnvContentHint14 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint14, "", true)
	}

	if u.CreateProjectEnvContentHint15 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHint15, "", true)
	}

	return nil, errors.New("could not marshal union type CreatedContentHint: all fields are null")
}

type CreateProjectEnvCreatedProjectsType string

const (
	CreateProjectEnvCreatedProjectsTypeFlagsSecret CreateProjectEnvCreatedProjectsType = "flags-secret"
)

func (e CreateProjectEnvCreatedProjectsType) ToPointer() *CreateProjectEnvCreatedProjectsType {
	return &e
}
func (e *CreateProjectEnvCreatedProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = CreateProjectEnvCreatedProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvCreatedProjectsType: %v", v)
	}
}

// CreatedInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type CreatedInternalContentHint struct {
	Type CreateProjectEnvCreatedProjectsType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *CreatedInternalContentHint) GetType() CreateProjectEnvCreatedProjectsType {
	if o == nil {
		return CreateProjectEnvCreatedProjectsType("")
	}
	return o.Type
}

func (o *CreatedInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type Created1 struct {
	Target *CreatedTarget `json:"target,omitempty"`
	Type   *CreatedType   `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string             `json:"sunsetSecretId,omitempty"`
	ID                *string             `json:"id,omitempty"`
	Key               *string             `json:"key,omitempty"`
	Value             *string             `json:"value,omitempty"`
	ConfigurationID   *string             `json:"configurationId,omitempty"`
	CreatedAt         *float64            `json:"createdAt,omitempty"`
	UpdatedAt         *float64            `json:"updatedAt,omitempty"`
	CreatedBy         *string             `json:"createdBy,omitempty"`
	UpdatedBy         *string             `json:"updatedBy,omitempty"`
	GitBranch         *string             `json:"gitBranch,omitempty"`
	EdgeConfigID      *string             `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string             `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *CreatedContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *CreatedInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` and `vsmValue` are decrypted.
	Decrypted            *bool    `json:"decrypted,omitempty"`
	Comment              *string  `json:"comment,omitempty"`
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	VsmValue             *string  `json:"vsmValue,omitempty"`
	System               *bool    `json:"system,omitempty"`
}

func (o *Created1) GetTarget() *CreatedTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Created1) GetType() *CreatedType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Created1) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *Created1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Created1) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Created1) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Created1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *Created1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Created1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Created1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Created1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Created1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Created1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *Created1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *Created1) GetContentHint() *CreatedContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *Created1) GetInternalContentHint() *CreatedInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *Created1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Created1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Created1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *Created1) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *Created1) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

type CreatedUnionType string

const (
	CreatedUnionTypeCreated1        CreatedUnionType = "created_1"
	CreatedUnionTypeArrayOfCreated2 CreatedUnionType = "arrayOfCreated2"
)

type Created struct {
	Created1        *Created1
	ArrayOfCreated2 []Created2

	Type CreatedUnionType
}

func CreateCreatedCreated1(created1 Created1) Created {
	typ := CreatedUnionTypeCreated1

	return Created{
		Created1: &created1,
		Type:     typ,
	}
}

func CreateCreatedArrayOfCreated2(arrayOfCreated2 []Created2) Created {
	typ := CreatedUnionTypeArrayOfCreated2

	return Created{
		ArrayOfCreated2: arrayOfCreated2,
		Type:            typ,
	}
}

func (u *Created) UnmarshalJSON(data []byte) error {

	var created1 Created1 = Created1{}
	if err := utils.UnmarshalJSON(data, &created1, "", true, true); err == nil {
		u.Created1 = &created1
		u.Type = CreatedUnionTypeCreated1
		return nil
	}

	var arrayOfCreated2 []Created2 = []Created2{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreated2, "", true, true); err == nil {
		u.ArrayOfCreated2 = arrayOfCreated2
		u.Type = CreatedUnionTypeArrayOfCreated2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Created", string(data))
}

func (u Created) MarshalJSON() ([]byte, error) {
	if u.Created1 != nil {
		return utils.MarshalJSON(u.Created1, "", true)
	}

	if u.ArrayOfCreated2 != nil {
		return utils.MarshalJSON(u.ArrayOfCreated2, "", true)
	}

	return nil, errors.New("could not marshal union type Created: all fields are null")
}

type Value2 string

const (
	Value2Production  Value2 = "production"
	Value2Preview     Value2 = "preview"
	Value2Development Value2 = "development"
)

func (e Value2) ToPointer() *Value2 {
	return &e
}
func (e *Value2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = Value2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Value2: %v", v)
	}
}

type CreateProjectEnvValueType string

const (
	CreateProjectEnvValueTypeStr           CreateProjectEnvValueType = "str"
	CreateProjectEnvValueTypeArrayOfValue2 CreateProjectEnvValueType = "arrayOfValue2"
)

type CreateProjectEnvValue struct {
	Str           *string
	ArrayOfValue2 []Value2

	Type CreateProjectEnvValueType
}

func CreateCreateProjectEnvValueStr(str string) CreateProjectEnvValue {
	typ := CreateProjectEnvValueTypeStr

	return CreateProjectEnvValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectEnvValueArrayOfValue2(arrayOfValue2 []Value2) CreateProjectEnvValue {
	typ := CreateProjectEnvValueTypeArrayOfValue2

	return CreateProjectEnvValue{
		ArrayOfValue2: arrayOfValue2,
		Type:          typ,
	}
}

func (u *CreateProjectEnvValue) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectEnvValueTypeStr
		return nil
	}

	var arrayOfValue2 []Value2 = []Value2{}
	if err := utils.UnmarshalJSON(data, &arrayOfValue2, "", true, true); err == nil {
		u.ArrayOfValue2 = arrayOfValue2
		u.Type = CreateProjectEnvValueTypeArrayOfValue2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvValue", string(data))
}

func (u CreateProjectEnvValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfValue2 != nil {
		return utils.MarshalJSON(u.ArrayOfValue2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvValue: all fields are null")
}

type CreateProjectEnvTargetProjectsResponse2 string

const (
	CreateProjectEnvTargetProjectsResponse2Production  CreateProjectEnvTargetProjectsResponse2 = "production"
	CreateProjectEnvTargetProjectsResponse2Preview     CreateProjectEnvTargetProjectsResponse2 = "preview"
	CreateProjectEnvTargetProjectsResponse2Development CreateProjectEnvTargetProjectsResponse2 = "development"
)

func (e CreateProjectEnvTargetProjectsResponse2) ToPointer() *CreateProjectEnvTargetProjectsResponse2 {
	return &e
}
func (e *CreateProjectEnvTargetProjectsResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTargetProjectsResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTargetProjectsResponse2: %v", v)
	}
}

type CreateProjectEnvTargetProjects1 string

const (
	CreateProjectEnvTargetProjects1Production  CreateProjectEnvTargetProjects1 = "production"
	CreateProjectEnvTargetProjects1Preview     CreateProjectEnvTargetProjects1 = "preview"
	CreateProjectEnvTargetProjects1Development CreateProjectEnvTargetProjects1 = "development"
)

func (e CreateProjectEnvTargetProjects1) ToPointer() *CreateProjectEnvTargetProjects1 {
	return &e
}
func (e *CreateProjectEnvTargetProjects1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTargetProjects1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTargetProjects1: %v", v)
	}
}

type CreateProjectEnvTargetType string

const (
	CreateProjectEnvTargetTypeArrayOfCreateProjectEnvTargetProjects1  CreateProjectEnvTargetType = "arrayOfCreateProjectEnvTargetProjects1"
	CreateProjectEnvTargetTypeCreateProjectEnvTargetProjectsResponse2 CreateProjectEnvTargetType = "createProjectEnv_target_projects_response_2"
)

type CreateProjectEnvTarget struct {
	ArrayOfCreateProjectEnvTargetProjects1  []CreateProjectEnvTargetProjects1
	CreateProjectEnvTargetProjectsResponse2 *CreateProjectEnvTargetProjectsResponse2

	Type CreateProjectEnvTargetType
}

func CreateCreateProjectEnvTargetArrayOfCreateProjectEnvTargetProjects1(arrayOfCreateProjectEnvTargetProjects1 []CreateProjectEnvTargetProjects1) CreateProjectEnvTarget {
	typ := CreateProjectEnvTargetTypeArrayOfCreateProjectEnvTargetProjects1

	return CreateProjectEnvTarget{
		ArrayOfCreateProjectEnvTargetProjects1: arrayOfCreateProjectEnvTargetProjects1,
		Type:                                   typ,
	}
}

func CreateCreateProjectEnvTargetCreateProjectEnvTargetProjectsResponse2(createProjectEnvTargetProjectsResponse2 CreateProjectEnvTargetProjectsResponse2) CreateProjectEnvTarget {
	typ := CreateProjectEnvTargetTypeCreateProjectEnvTargetProjectsResponse2

	return CreateProjectEnvTarget{
		CreateProjectEnvTargetProjectsResponse2: &createProjectEnvTargetProjectsResponse2,
		Type:                                    typ,
	}
}

func (u *CreateProjectEnvTarget) UnmarshalJSON(data []byte) error {

	var arrayOfCreateProjectEnvTargetProjects1 []CreateProjectEnvTargetProjects1 = []CreateProjectEnvTargetProjects1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectEnvTargetProjects1, "", true, true); err == nil {
		u.ArrayOfCreateProjectEnvTargetProjects1 = arrayOfCreateProjectEnvTargetProjects1
		u.Type = CreateProjectEnvTargetTypeArrayOfCreateProjectEnvTargetProjects1
		return nil
	}

	var createProjectEnvTargetProjectsResponse2 CreateProjectEnvTargetProjectsResponse2 = CreateProjectEnvTargetProjectsResponse2("")
	if err := utils.UnmarshalJSON(data, &createProjectEnvTargetProjectsResponse2, "", true, true); err == nil {
		u.CreateProjectEnvTargetProjectsResponse2 = &createProjectEnvTargetProjectsResponse2
		u.Type = CreateProjectEnvTargetTypeCreateProjectEnvTargetProjectsResponse2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvTarget", string(data))
}

func (u CreateProjectEnvTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateProjectEnvTargetProjects1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectEnvTargetProjects1, "", true)
	}

	if u.CreateProjectEnvTargetProjectsResponse2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvTargetProjectsResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvTarget: all fields are null")
}

type CreateProjectEnvError struct {
	Code      string                  `json:"code"`
	Message   string                  `json:"message"`
	Key       *string                 `json:"key,omitempty"`
	EnvVarID  *string                 `json:"envVarId,omitempty"`
	EnvVarKey *string                 `json:"envVarKey,omitempty"`
	Action    *string                 `json:"action,omitempty"`
	Link      *string                 `json:"link,omitempty"`
	Value     *CreateProjectEnvValue  `json:"value,omitempty"`
	GitBranch *string                 `json:"gitBranch,omitempty"`
	Target    *CreateProjectEnvTarget `json:"target,omitempty"`
	Project   *string                 `json:"project,omitempty"`
}

func (o *CreateProjectEnvError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProjectEnvError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *CreateProjectEnvError) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectEnvError) GetEnvVarID() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarID
}

func (o *CreateProjectEnvError) GetEnvVarKey() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarKey
}

func (o *CreateProjectEnvError) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CreateProjectEnvError) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateProjectEnvError) GetValue() *CreateProjectEnvValue {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *CreateProjectEnvError) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnvError) GetTarget() *CreateProjectEnvTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnvError) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

type Failed struct {
	Error CreateProjectEnvError `json:"error"`
}

func (o *Failed) GetError() CreateProjectEnvError {
	if o == nil {
		return CreateProjectEnvError{}
	}
	return o.Error
}

// CreateProjectEnvResponseBody - The environment variable was created successfully
type CreateProjectEnvResponseBody struct {
	Created Created  `json:"created"`
	Failed  []Failed `json:"failed"`
}

func (o *CreateProjectEnvResponseBody) GetCreated() Created {
	if o == nil {
		return Created{}
	}
	return o.Created
}

func (o *CreateProjectEnvResponseBody) GetFailed() []Failed {
	if o == nil {
		return []Failed{}
	}
	return o.Failed
}

type CreateProjectEnvResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The environment variable was created successfully
	Object *CreateProjectEnvResponseBody
}

func (o *CreateProjectEnvResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateProjectEnvResponse) GetObject() *CreateProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
