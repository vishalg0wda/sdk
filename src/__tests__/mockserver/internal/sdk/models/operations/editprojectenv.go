// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type EditProjectEnvTarget string

const (
	EditProjectEnvTargetProduction  EditProjectEnvTarget = "production"
	EditProjectEnvTargetPreview     EditProjectEnvTarget = "preview"
	EditProjectEnvTargetDevelopment EditProjectEnvTarget = "development"
)

func (e EditProjectEnvTarget) ToPointer() *EditProjectEnvTarget {
	return &e
}
func (e *EditProjectEnvTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTarget: %v", v)
	}
}

// EditProjectEnvType - The type of environment variable
type EditProjectEnvType string

const (
	EditProjectEnvTypeSystem    EditProjectEnvType = "system"
	EditProjectEnvTypeSecret    EditProjectEnvType = "secret"
	EditProjectEnvTypeEncrypted EditProjectEnvType = "encrypted"
	EditProjectEnvTypePlain     EditProjectEnvType = "plain"
	EditProjectEnvTypeSensitive EditProjectEnvType = "sensitive"
)

func (e EditProjectEnvType) ToPointer() *EditProjectEnvType {
	return &e
}
func (e *EditProjectEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = EditProjectEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvType: %v", v)
	}
}

type EditProjectEnvRequestBody struct {
	// The name of the environment variable
	Key *string `json:"key,omitempty"`
	// The target environment of the environment variable
	Target []EditProjectEnvTarget `json:"target,omitempty"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// The type of environment variable
	Type *EditProjectEnvType `json:"type,omitempty"`
	// The value of the environment variable
	Value *string `json:"value,omitempty"`
	// The custom environments that the environment variable should be synced to
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	// A comment to add context on what this env var is for
	Comment *string `json:"comment,omitempty"`
}

func (o *EditProjectEnvRequestBody) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *EditProjectEnvRequestBody) GetTarget() []EditProjectEnvTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *EditProjectEnvRequestBody) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EditProjectEnvRequestBody) GetType() *EditProjectEnvType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EditProjectEnvRequestBody) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *EditProjectEnvRequestBody) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *EditProjectEnvRequestBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

type EditProjectEnvRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The unique environment variable identifier
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                   `queryParam:"style=form,explode=true,name=slug"`
	RequestBody EditProjectEnvRequestBody `request:"mediaType=application/json"`
}

func (o *EditProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *EditProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EditProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *EditProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *EditProjectEnvRequest) GetRequestBody() EditProjectEnvRequestBody {
	if o == nil {
		return EditProjectEnvRequestBody{}
	}
	return o.RequestBody
}

type EditProjectEnvResponseBody2 struct {
}

type EditProjectEnvTarget2 string

const (
	EditProjectEnvTarget2Production  EditProjectEnvTarget2 = "production"
	EditProjectEnvTarget2Preview     EditProjectEnvTarget2 = "preview"
	EditProjectEnvTarget2Development EditProjectEnvTarget2 = "development"
)

func (e EditProjectEnvTarget2) ToPointer() *EditProjectEnvTarget2 {
	return &e
}
func (e *EditProjectEnvTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTarget2: %v", v)
	}
}

type EditProjectEnvResponseBodyTargetType string

const (
	EditProjectEnvResponseBodyTargetTypeArrayOfStr            EditProjectEnvResponseBodyTargetType = "arrayOfStr"
	EditProjectEnvResponseBodyTargetTypeEditProjectEnvTarget2 EditProjectEnvResponseBodyTargetType = "editProjectEnv_target_2"
)

type EditProjectEnvResponseBodyTarget struct {
	ArrayOfStr            []string
	EditProjectEnvTarget2 *EditProjectEnvTarget2

	Type EditProjectEnvResponseBodyTargetType
}

func CreateEditProjectEnvResponseBodyTargetArrayOfStr(arrayOfStr []string) EditProjectEnvResponseBodyTarget {
	typ := EditProjectEnvResponseBodyTargetTypeArrayOfStr

	return EditProjectEnvResponseBodyTarget{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateEditProjectEnvResponseBodyTargetEditProjectEnvTarget2(editProjectEnvTarget2 EditProjectEnvTarget2) EditProjectEnvResponseBodyTarget {
	typ := EditProjectEnvResponseBodyTargetTypeEditProjectEnvTarget2

	return EditProjectEnvResponseBodyTarget{
		EditProjectEnvTarget2: &editProjectEnvTarget2,
		Type:                  typ,
	}
}

func (u *EditProjectEnvResponseBodyTarget) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = EditProjectEnvResponseBodyTargetTypeArrayOfStr
		return nil
	}

	var editProjectEnvTarget2 EditProjectEnvTarget2 = EditProjectEnvTarget2("")
	if err := utils.UnmarshalJSON(data, &editProjectEnvTarget2, "", true, true); err == nil {
		u.EditProjectEnvTarget2 = &editProjectEnvTarget2
		u.Type = EditProjectEnvResponseBodyTargetTypeEditProjectEnvTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EditProjectEnvResponseBodyTarget", string(data))
}

func (u EditProjectEnvResponseBodyTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.EditProjectEnvTarget2 != nil {
		return utils.MarshalJSON(u.EditProjectEnvTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type EditProjectEnvResponseBodyTarget: all fields are null")
}

type EditProjectEnvResponseBodyType string

const (
	EditProjectEnvResponseBodyTypeSystem    EditProjectEnvResponseBodyType = "system"
	EditProjectEnvResponseBodyTypeEncrypted EditProjectEnvResponseBodyType = "encrypted"
	EditProjectEnvResponseBodyTypePlain     EditProjectEnvResponseBodyType = "plain"
	EditProjectEnvResponseBodyTypeSensitive EditProjectEnvResponseBodyType = "sensitive"
	EditProjectEnvResponseBodyTypeSecret    EditProjectEnvResponseBodyType = "secret"
)

func (e EditProjectEnvResponseBodyType) ToPointer() *EditProjectEnvResponseBodyType {
	return &e
}
func (e *EditProjectEnvResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = EditProjectEnvResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvResponseBodyType: %v", v)
	}
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115TypeFlagsConnectionString EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type = "flags-connection-string"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type: %v", v)
	}
}

type EditProjectEnvContentHint15 struct {
	Type      EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type `json:"type"`
	ProjectID string                                                                         `json:"projectId"`
}

func (o *EditProjectEnvContentHint15) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody115Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint15) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114TypeIntegrationStoreSecret EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type = "integration-store-secret"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type: %v", v)
	}
}

type EditProjectEnvContentHint14 struct {
	Type                       EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type `json:"type"`
	StoreID                    string                                                                         `json:"storeId"`
	IntegrationID              string                                                                         `json:"integrationId"`
	IntegrationProductID       string                                                                         `json:"integrationProductId"`
	IntegrationConfigurationID string                                                                         `json:"integrationConfigurationId"`
}

func (o *EditProjectEnvContentHint14) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnvContentHint14) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *EditProjectEnvContentHint14) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *EditProjectEnvContentHint14) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113TypePostgresURLNoSsl EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type = "postgres-url-no-ssl"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type: %v", v)
	}
}

type EditProjectEnvContentHint13 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *EditProjectEnvContentHint13) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112TypePostgresDatabase EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type = "postgres-database"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type: %v", v)
	}
}

type EditProjectEnvContentHint12 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *EditProjectEnvContentHint12) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111TypePostgresPassword EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type = "postgres-password"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type: %v", v)
	}
}

type EditProjectEnvContentHint11 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *EditProjectEnvContentHint11) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110TypePostgresHost EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type = "postgres-host"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type: %v", v)
	}
}

type EditProjectEnvContentHint10 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *EditProjectEnvContentHint10) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19TypePostgresUser EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type = "postgres-user"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type: %v", v)
	}
}

type EditProjectEnvContentHint9 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *EditProjectEnvContentHint9) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18TypePostgresPrismaURL EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type = "postgres-prisma-url"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type: %v", v)
	}
}

type EditProjectEnvContentHint8 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *EditProjectEnvContentHint8) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1TypePostgresURLNonPooling EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type = "postgres-url-non-pooling"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type: %v", v)
	}
}

type EditProjectEnvContentHint7 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type `json:"type"`
	StoreID string                                                                       `json:"storeId"`
}

func (o *EditProjectEnvContentHint7) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyTypePostgresURL EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType = "postgres-url"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type EditProjectEnvContentHint6 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                      `json:"storeId"`
}

func (o *EditProjectEnvContentHint6) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200ApplicationJSONType string

const (
	EditProjectEnvContentHintProjectsResponse200ApplicationJSONTypeBlobReadWriteToken EditProjectEnvContentHintProjectsResponse200ApplicationJSONType = "blob-read-write-token"
)

func (e EditProjectEnvContentHintProjectsResponse200ApplicationJSONType) ToPointer() *EditProjectEnvContentHintProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = EditProjectEnvContentHintProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type EditProjectEnvContentHint5 struct {
	Type    EditProjectEnvContentHintProjectsResponse200ApplicationJSONType `json:"type"`
	StoreID string                                                          `json:"storeId"`
}

func (o *EditProjectEnvContentHint5) GetType() EditProjectEnvContentHintProjectsResponse200ApplicationJSONType {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponse200Type string

const (
	EditProjectEnvContentHintProjectsResponse200TypeRedisRestAPIReadOnlyToken EditProjectEnvContentHintProjectsResponse200Type = "redis-rest-api-read-only-token"
)

func (e EditProjectEnvContentHintProjectsResponse200Type) ToPointer() *EditProjectEnvContentHintProjectsResponse200Type {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = EditProjectEnvContentHintProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponse200Type: %v", v)
	}
}

type EditProjectEnvContentHint4 struct {
	Type    EditProjectEnvContentHintProjectsResponse200Type `json:"type"`
	StoreID string                                           `json:"storeId"`
}

func (o *EditProjectEnvContentHint4) GetType() EditProjectEnvContentHintProjectsResponse200Type {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponse200Type("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsResponseType string

const (
	EditProjectEnvContentHintProjectsResponseTypeRedisRestAPIToken EditProjectEnvContentHintProjectsResponseType = "redis-rest-api-token"
)

func (e EditProjectEnvContentHintProjectsResponseType) ToPointer() *EditProjectEnvContentHintProjectsResponseType {
	return &e
}
func (e *EditProjectEnvContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = EditProjectEnvContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsResponseType: %v", v)
	}
}

type EditProjectEnvContentHint3 struct {
	Type    EditProjectEnvContentHintProjectsResponseType `json:"type"`
	StoreID string                                        `json:"storeId"`
}

func (o *EditProjectEnvContentHint3) GetType() EditProjectEnvContentHintProjectsResponseType {
	if o == nil {
		return EditProjectEnvContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintProjectsType string

const (
	EditProjectEnvContentHintProjectsTypeRedisRestAPIURL EditProjectEnvContentHintProjectsType = "redis-rest-api-url"
)

func (e EditProjectEnvContentHintProjectsType) ToPointer() *EditProjectEnvContentHintProjectsType {
	return &e
}
func (e *EditProjectEnvContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = EditProjectEnvContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintProjectsType: %v", v)
	}
}

type EditProjectEnvContentHint2 struct {
	Type    EditProjectEnvContentHintProjectsType `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *EditProjectEnvContentHint2) GetType() EditProjectEnvContentHintProjectsType {
	if o == nil {
		return EditProjectEnvContentHintProjectsType("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintType string

const (
	EditProjectEnvContentHintTypeRedisURL EditProjectEnvContentHintType = "redis-url"
)

func (e EditProjectEnvContentHintType) ToPointer() *EditProjectEnvContentHintType {
	return &e
}
func (e *EditProjectEnvContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = EditProjectEnvContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvContentHintType: %v", v)
	}
}

type EditProjectEnvContentHint1 struct {
	Type    EditProjectEnvContentHintType `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *EditProjectEnvContentHint1) GetType() EditProjectEnvContentHintType {
	if o == nil {
		return EditProjectEnvContentHintType("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvResponseBodyContentHintType string

const (
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint1  EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_1"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint2  EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_2"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint3  EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_3"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint4  EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_4"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint5  EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_5"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint6  EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_6"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint7  EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_7"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint8  EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_8"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint9  EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_9"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint10 EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_10"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint11 EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_11"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint12 EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_12"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint13 EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_13"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint14 EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_14"
	EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint15 EditProjectEnvResponseBodyContentHintType = "editProjectEnv_contentHint_15"
)

type EditProjectEnvResponseBodyContentHint struct {
	EditProjectEnvContentHint1  *EditProjectEnvContentHint1
	EditProjectEnvContentHint2  *EditProjectEnvContentHint2
	EditProjectEnvContentHint3  *EditProjectEnvContentHint3
	EditProjectEnvContentHint4  *EditProjectEnvContentHint4
	EditProjectEnvContentHint5  *EditProjectEnvContentHint5
	EditProjectEnvContentHint6  *EditProjectEnvContentHint6
	EditProjectEnvContentHint7  *EditProjectEnvContentHint7
	EditProjectEnvContentHint8  *EditProjectEnvContentHint8
	EditProjectEnvContentHint9  *EditProjectEnvContentHint9
	EditProjectEnvContentHint10 *EditProjectEnvContentHint10
	EditProjectEnvContentHint11 *EditProjectEnvContentHint11
	EditProjectEnvContentHint12 *EditProjectEnvContentHint12
	EditProjectEnvContentHint13 *EditProjectEnvContentHint13
	EditProjectEnvContentHint14 *EditProjectEnvContentHint14
	EditProjectEnvContentHint15 *EditProjectEnvContentHint15

	Type EditProjectEnvResponseBodyContentHintType
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint1(editProjectEnvContentHint1 EditProjectEnvContentHint1) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint1

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint1: &editProjectEnvContentHint1,
		Type:                       typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint2(editProjectEnvContentHint2 EditProjectEnvContentHint2) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint2

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint2: &editProjectEnvContentHint2,
		Type:                       typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint3(editProjectEnvContentHint3 EditProjectEnvContentHint3) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint3

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint3: &editProjectEnvContentHint3,
		Type:                       typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint4(editProjectEnvContentHint4 EditProjectEnvContentHint4) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint4

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint4: &editProjectEnvContentHint4,
		Type:                       typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint5(editProjectEnvContentHint5 EditProjectEnvContentHint5) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint5

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint5: &editProjectEnvContentHint5,
		Type:                       typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint6(editProjectEnvContentHint6 EditProjectEnvContentHint6) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint6

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint6: &editProjectEnvContentHint6,
		Type:                       typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint7(editProjectEnvContentHint7 EditProjectEnvContentHint7) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint7

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint7: &editProjectEnvContentHint7,
		Type:                       typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint8(editProjectEnvContentHint8 EditProjectEnvContentHint8) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint8

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint8: &editProjectEnvContentHint8,
		Type:                       typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint9(editProjectEnvContentHint9 EditProjectEnvContentHint9) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint9

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint9: &editProjectEnvContentHint9,
		Type:                       typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint10(editProjectEnvContentHint10 EditProjectEnvContentHint10) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint10

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint10: &editProjectEnvContentHint10,
		Type:                        typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint11(editProjectEnvContentHint11 EditProjectEnvContentHint11) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint11

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint11: &editProjectEnvContentHint11,
		Type:                        typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint12(editProjectEnvContentHint12 EditProjectEnvContentHint12) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint12

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint12: &editProjectEnvContentHint12,
		Type:                        typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint13(editProjectEnvContentHint13 EditProjectEnvContentHint13) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint13

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint13: &editProjectEnvContentHint13,
		Type:                        typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint14(editProjectEnvContentHint14 EditProjectEnvContentHint14) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint14

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint14: &editProjectEnvContentHint14,
		Type:                        typ,
	}
}

func CreateEditProjectEnvResponseBodyContentHintEditProjectEnvContentHint15(editProjectEnvContentHint15 EditProjectEnvContentHint15) EditProjectEnvResponseBodyContentHint {
	typ := EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint15

	return EditProjectEnvResponseBodyContentHint{
		EditProjectEnvContentHint15: &editProjectEnvContentHint15,
		Type:                        typ,
	}
}

func (u *EditProjectEnvResponseBodyContentHint) UnmarshalJSON(data []byte) error {

	var editProjectEnvContentHint7 EditProjectEnvContentHint7 = EditProjectEnvContentHint7{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint7, "", true, true); err == nil {
		u.EditProjectEnvContentHint7 = &editProjectEnvContentHint7
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint7
		return nil
	}

	var editProjectEnvContentHint11 EditProjectEnvContentHint11 = EditProjectEnvContentHint11{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint11, "", true, true); err == nil {
		u.EditProjectEnvContentHint11 = &editProjectEnvContentHint11
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint11
		return nil
	}

	var editProjectEnvContentHint3 EditProjectEnvContentHint3 = EditProjectEnvContentHint3{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint3, "", true, true); err == nil {
		u.EditProjectEnvContentHint3 = &editProjectEnvContentHint3
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint3
		return nil
	}

	var editProjectEnvContentHint4 EditProjectEnvContentHint4 = EditProjectEnvContentHint4{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint4, "", true, true); err == nil {
		u.EditProjectEnvContentHint4 = &editProjectEnvContentHint4
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint4
		return nil
	}

	var editProjectEnvContentHint5 EditProjectEnvContentHint5 = EditProjectEnvContentHint5{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint5, "", true, true); err == nil {
		u.EditProjectEnvContentHint5 = &editProjectEnvContentHint5
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint5
		return nil
	}

	var editProjectEnvContentHint6 EditProjectEnvContentHint6 = EditProjectEnvContentHint6{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint6, "", true, true); err == nil {
		u.EditProjectEnvContentHint6 = &editProjectEnvContentHint6
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint6
		return nil
	}

	var editProjectEnvContentHint2 EditProjectEnvContentHint2 = EditProjectEnvContentHint2{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint2, "", true, true); err == nil {
		u.EditProjectEnvContentHint2 = &editProjectEnvContentHint2
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint2
		return nil
	}

	var editProjectEnvContentHint9 EditProjectEnvContentHint9 = EditProjectEnvContentHint9{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint9, "", true, true); err == nil {
		u.EditProjectEnvContentHint9 = &editProjectEnvContentHint9
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint9
		return nil
	}

	var editProjectEnvContentHint1 EditProjectEnvContentHint1 = EditProjectEnvContentHint1{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint1, "", true, true); err == nil {
		u.EditProjectEnvContentHint1 = &editProjectEnvContentHint1
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint1
		return nil
	}

	var editProjectEnvContentHint10 EditProjectEnvContentHint10 = EditProjectEnvContentHint10{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint10, "", true, true); err == nil {
		u.EditProjectEnvContentHint10 = &editProjectEnvContentHint10
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint10
		return nil
	}

	var editProjectEnvContentHint8 EditProjectEnvContentHint8 = EditProjectEnvContentHint8{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint8, "", true, true); err == nil {
		u.EditProjectEnvContentHint8 = &editProjectEnvContentHint8
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint8
		return nil
	}

	var editProjectEnvContentHint12 EditProjectEnvContentHint12 = EditProjectEnvContentHint12{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint12, "", true, true); err == nil {
		u.EditProjectEnvContentHint12 = &editProjectEnvContentHint12
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint12
		return nil
	}

	var editProjectEnvContentHint13 EditProjectEnvContentHint13 = EditProjectEnvContentHint13{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint13, "", true, true); err == nil {
		u.EditProjectEnvContentHint13 = &editProjectEnvContentHint13
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint13
		return nil
	}

	var editProjectEnvContentHint15 EditProjectEnvContentHint15 = EditProjectEnvContentHint15{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint15, "", true, true); err == nil {
		u.EditProjectEnvContentHint15 = &editProjectEnvContentHint15
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint15
		return nil
	}

	var editProjectEnvContentHint14 EditProjectEnvContentHint14 = EditProjectEnvContentHint14{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHint14, "", true, true); err == nil {
		u.EditProjectEnvContentHint14 = &editProjectEnvContentHint14
		u.Type = EditProjectEnvResponseBodyContentHintTypeEditProjectEnvContentHint14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EditProjectEnvResponseBodyContentHint", string(data))
}

func (u EditProjectEnvResponseBodyContentHint) MarshalJSON() ([]byte, error) {
	if u.EditProjectEnvContentHint1 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint1, "", true)
	}

	if u.EditProjectEnvContentHint2 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint2, "", true)
	}

	if u.EditProjectEnvContentHint3 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint3, "", true)
	}

	if u.EditProjectEnvContentHint4 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint4, "", true)
	}

	if u.EditProjectEnvContentHint5 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint5, "", true)
	}

	if u.EditProjectEnvContentHint6 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint6, "", true)
	}

	if u.EditProjectEnvContentHint7 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint7, "", true)
	}

	if u.EditProjectEnvContentHint8 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint8, "", true)
	}

	if u.EditProjectEnvContentHint9 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint9, "", true)
	}

	if u.EditProjectEnvContentHint10 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint10, "", true)
	}

	if u.EditProjectEnvContentHint11 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint11, "", true)
	}

	if u.EditProjectEnvContentHint12 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint12, "", true)
	}

	if u.EditProjectEnvContentHint13 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint13, "", true)
	}

	if u.EditProjectEnvContentHint14 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint14, "", true)
	}

	if u.EditProjectEnvContentHint15 != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHint15, "", true)
	}

	return nil, errors.New("could not marshal union type EditProjectEnvResponseBodyContentHint: all fields are null")
}

type EditProjectEnvResponseBodyProjectsType string

const (
	EditProjectEnvResponseBodyProjectsTypeFlagsSecret EditProjectEnvResponseBodyProjectsType = "flags-secret"
)

func (e EditProjectEnvResponseBodyProjectsType) ToPointer() *EditProjectEnvResponseBodyProjectsType {
	return &e
}
func (e *EditProjectEnvResponseBodyProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = EditProjectEnvResponseBodyProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvResponseBodyProjectsType: %v", v)
	}
}

// EditProjectEnvResponseBodyInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type EditProjectEnvResponseBodyInternalContentHint struct {
	Type EditProjectEnvResponseBodyProjectsType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *EditProjectEnvResponseBodyInternalContentHint) GetType() EditProjectEnvResponseBodyProjectsType {
	if o == nil {
		return EditProjectEnvResponseBodyProjectsType("")
	}
	return o.Type
}

func (o *EditProjectEnvResponseBodyInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type EditProjectEnvResponseBody1 struct {
	Target *EditProjectEnvResponseBodyTarget `json:"target,omitempty"`
	Type   EditProjectEnvResponseBodyType    `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                                `json:"sunsetSecretId,omitempty"`
	ID                *string                                `json:"id,omitempty"`
	Key               string                                 `json:"key"`
	Value             string                                 `json:"value"`
	ConfigurationID   *string                                `json:"configurationId,omitempty"`
	CreatedAt         *float64                               `json:"createdAt,omitempty"`
	UpdatedAt         *float64                               `json:"updatedAt,omitempty"`
	CreatedBy         *string                                `json:"createdBy,omitempty"`
	UpdatedBy         *string                                `json:"updatedBy,omitempty"`
	GitBranch         *string                                `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                                `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *EditProjectEnvResponseBodyContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *EditProjectEnvResponseBodyInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` and `vsmValue` are decrypted.
	Decrypted            *bool    `json:"decrypted,omitempty"`
	Comment              *string  `json:"comment,omitempty"`
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
}

func (o *EditProjectEnvResponseBody1) GetTarget() *EditProjectEnvResponseBodyTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *EditProjectEnvResponseBody1) GetType() EditProjectEnvResponseBodyType {
	if o == nil {
		return EditProjectEnvResponseBodyType("")
	}
	return o.Type
}

func (o *EditProjectEnvResponseBody1) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *EditProjectEnvResponseBody1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EditProjectEnvResponseBody1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *EditProjectEnvResponseBody1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *EditProjectEnvResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *EditProjectEnvResponseBody1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EditProjectEnvResponseBody1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *EditProjectEnvResponseBody1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *EditProjectEnvResponseBody1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *EditProjectEnvResponseBody1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EditProjectEnvResponseBody1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *EditProjectEnvResponseBody1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *EditProjectEnvResponseBody1) GetContentHint() *EditProjectEnvResponseBodyContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *EditProjectEnvResponseBody1) GetInternalContentHint() *EditProjectEnvResponseBodyInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *EditProjectEnvResponseBody1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *EditProjectEnvResponseBody1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *EditProjectEnvResponseBody1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type EditProjectEnvResponseBodyUnionType string

const (
	EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody1 EditProjectEnvResponseBodyUnionType = "editProjectEnv_responseBody_1"
	EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody2 EditProjectEnvResponseBodyUnionType = "editProjectEnv_responseBody_2"
)

// EditProjectEnvResponseBody - The environment variable was successfully edited
type EditProjectEnvResponseBody struct {
	EditProjectEnvResponseBody1 *EditProjectEnvResponseBody1
	EditProjectEnvResponseBody2 *EditProjectEnvResponseBody2

	Type EditProjectEnvResponseBodyUnionType
}

func CreateEditProjectEnvResponseBodyEditProjectEnvResponseBody1(editProjectEnvResponseBody1 EditProjectEnvResponseBody1) EditProjectEnvResponseBody {
	typ := EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody1

	return EditProjectEnvResponseBody{
		EditProjectEnvResponseBody1: &editProjectEnvResponseBody1,
		Type:                        typ,
	}
}

func CreateEditProjectEnvResponseBodyEditProjectEnvResponseBody2(editProjectEnvResponseBody2 EditProjectEnvResponseBody2) EditProjectEnvResponseBody {
	typ := EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody2

	return EditProjectEnvResponseBody{
		EditProjectEnvResponseBody2: &editProjectEnvResponseBody2,
		Type:                        typ,
	}
}

func (u *EditProjectEnvResponseBody) UnmarshalJSON(data []byte) error {

	var editProjectEnvResponseBody2 EditProjectEnvResponseBody2 = EditProjectEnvResponseBody2{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvResponseBody2, "", true, true); err == nil {
		u.EditProjectEnvResponseBody2 = &editProjectEnvResponseBody2
		u.Type = EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody2
		return nil
	}

	var editProjectEnvResponseBody1 EditProjectEnvResponseBody1 = EditProjectEnvResponseBody1{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvResponseBody1, "", true, true); err == nil {
		u.EditProjectEnvResponseBody1 = &editProjectEnvResponseBody1
		u.Type = EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EditProjectEnvResponseBody", string(data))
}

func (u EditProjectEnvResponseBody) MarshalJSON() ([]byte, error) {
	if u.EditProjectEnvResponseBody1 != nil {
		return utils.MarshalJSON(u.EditProjectEnvResponseBody1, "", true)
	}

	if u.EditProjectEnvResponseBody2 != nil {
		return utils.MarshalJSON(u.EditProjectEnvResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type EditProjectEnvResponseBody: all fields are null")
}

type EditProjectEnvResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The environment variable was successfully edited
	OneOf *EditProjectEnvResponseBody
}

func (o *EditProjectEnvResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *EditProjectEnvResponse) GetOneOf() *EditProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
