// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory string

const (
	PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategoryExperiment PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory = "experiment"
	PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategoryFlag       PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory = "flag"
)

func (e PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory) ToPointer() *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory {
	return &e
}
func (e *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "experiment":
		fallthrough
	case "flag":
		*e = PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory: %v", v)
	}
}

type PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody struct {
	Slug        string                                                                                               `json:"slug"`
	Origin      string                                                                                               `json:"origin"`
	Name        *string                                                                                              `json:"name,omitempty"`
	Category    *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory `json:"category,omitempty"`
	Description *string                                                                                              `json:"description,omitempty"`
	IsArchived  *bool                                                                                                `json:"isArchived,omitempty"`
	CreatedAt   *float64                                                                                             `json:"createdAt,omitempty"`
	UpdatedAt   *float64                                                                                             `json:"updatedAt,omitempty"`
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody) GetCategory() *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDCategory {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody) GetIsArchived() *bool {
	if o == nil {
		return nil
	}
	return o.IsArchived
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequest struct {
	IntegrationConfigurationID string                                                                                                  `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	ResourceID                 string                                                                                                  `pathParam:"style=simple,explode=false,name=resourceId"`
	ItemID                     string                                                                                                  `pathParam:"style=simple,explode=false,name=itemId"`
	RequestBody                *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody `request:"mediaType=application/json"`
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequest) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequest) GetItemID() string {
	if o == nil {
		return ""
	}
	return o.ItemID
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequest) GetRequestBody() *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *PatchV1InstallationsIntegrationConfigurationIDResourcesResourceIDExperimentationItemsItemIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
