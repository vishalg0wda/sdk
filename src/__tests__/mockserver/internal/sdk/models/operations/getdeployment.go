// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetDeploymentRequest struct {
	// The unique identifier or hostname of the deployment.
	IDOrURL string `pathParam:"style=simple,explode=false,name=idOrUrl"`
	// Whether to add in gitRepo information.
	WithGitRepoInfo *string `queryParam:"style=form,explode=true,name=withGitRepoInfo"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetDeploymentRequest) GetIDOrURL() string {
	if o == nil {
		return ""
	}
	return o.IDOrURL
}

func (o *GetDeploymentRequest) GetWithGitRepoInfo() *string {
	if o == nil {
		return nil
	}
	return o.WithGitRepoInfo
}

func (o *GetDeploymentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDeploymentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetDeploymentResponseBodyCreator struct {
	UID      string  `json:"uid"`
	Username *string `json:"username,omitempty"`
	Avatar   *string `json:"avatar,omitempty"`
}

func (o *GetDeploymentResponseBodyCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetDeploymentResponseBodyCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *GetDeploymentResponseBodyCreator) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentResponseBodyDeploymentsReadyState string

const (
	GetDeploymentResponseBodyDeploymentsReadyStateBuilding     GetDeploymentResponseBodyDeploymentsReadyState = "BUILDING"
	GetDeploymentResponseBodyDeploymentsReadyStateError        GetDeploymentResponseBodyDeploymentsReadyState = "ERROR"
	GetDeploymentResponseBodyDeploymentsReadyStateInitializing GetDeploymentResponseBodyDeploymentsReadyState = "INITIALIZING"
	GetDeploymentResponseBodyDeploymentsReadyStateReady        GetDeploymentResponseBodyDeploymentsReadyState = "READY"
)

func (e GetDeploymentResponseBodyDeploymentsReadyState) ToPointer() *GetDeploymentResponseBodyDeploymentsReadyState {
	return &e
}
func (e *GetDeploymentResponseBodyDeploymentsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeploymentResponseBodyDeploymentsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyDeploymentsReadyState: %v", v)
	}
}

type GetDeploymentResponseBodyOutput struct {
	Path         string `json:"path"`
	FunctionName string `json:"functionName"`
}

func (o *GetDeploymentResponseBodyOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentResponseBodyOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

// ResponseBodyLambdas - A partial representation of a Build used by the deployment endpoint.
type ResponseBodyLambdas struct {
	ID           *string                                         `json:"id,omitempty"`
	CreatedAt    *float64                                        `json:"createdAt,omitempty"`
	Entrypoint   *string                                         `json:"entrypoint,omitempty"`
	ReadyState   *GetDeploymentResponseBodyDeploymentsReadyState `json:"readyState,omitempty"`
	ReadyStateAt *float64                                        `json:"readyStateAt,omitempty"`
	Output       []GetDeploymentResponseBodyOutput               `json:"output"`
}

func (o *ResponseBodyLambdas) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ResponseBodyLambdas) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ResponseBodyLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *ResponseBodyLambdas) GetReadyState() *GetDeploymentResponseBodyDeploymentsReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *ResponseBodyLambdas) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

func (o *ResponseBodyLambdas) GetOutput() []GetDeploymentResponseBodyOutput {
	if o == nil {
		return []GetDeploymentResponseBodyOutput{}
	}
	return o.Output
}

type GetDeploymentResponseBodyStatus string

const (
	GetDeploymentResponseBodyStatusQueued       GetDeploymentResponseBodyStatus = "QUEUED"
	GetDeploymentResponseBodyStatusBuilding     GetDeploymentResponseBodyStatus = "BUILDING"
	GetDeploymentResponseBodyStatusError        GetDeploymentResponseBodyStatus = "ERROR"
	GetDeploymentResponseBodyStatusInitializing GetDeploymentResponseBodyStatus = "INITIALIZING"
	GetDeploymentResponseBodyStatusReady        GetDeploymentResponseBodyStatus = "READY"
	GetDeploymentResponseBodyStatusCanceled     GetDeploymentResponseBodyStatus = "CANCELED"
)

func (e GetDeploymentResponseBodyStatus) ToPointer() *GetDeploymentResponseBodyStatus {
	return &e
}
func (e *GetDeploymentResponseBodyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeploymentResponseBodyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyStatus: %v", v)
	}
}

type ResponseBodyTeam struct {
	ID     string  `json:"id"`
	Name   string  `json:"name"`
	Slug   string  `json:"slug"`
	Avatar *string `json:"avatar,omitempty"`
}

func (o *ResponseBodyTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBodyTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ResponseBodyTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *ResponseBodyTeam) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentCustomEnvironment2 struct {
	ID string `json:"id"`
}

func (o *GetDeploymentCustomEnvironment2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetDeploymentCustomEnvironment1 struct {
}

type ResponseBodyCustomEnvironmentType string

const (
	ResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironment1 ResponseBodyCustomEnvironmentType = "getDeployment_customEnvironment_1"
	ResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironment2 ResponseBodyCustomEnvironmentType = "getDeployment_customEnvironment_2"
)

type ResponseBodyCustomEnvironment struct {
	GetDeploymentCustomEnvironment1 *GetDeploymentCustomEnvironment1
	GetDeploymentCustomEnvironment2 *GetDeploymentCustomEnvironment2

	Type ResponseBodyCustomEnvironmentType
}

func CreateResponseBodyCustomEnvironmentGetDeploymentCustomEnvironment1(getDeploymentCustomEnvironment1 GetDeploymentCustomEnvironment1) ResponseBodyCustomEnvironment {
	typ := ResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironment1

	return ResponseBodyCustomEnvironment{
		GetDeploymentCustomEnvironment1: &getDeploymentCustomEnvironment1,
		Type:                            typ,
	}
}

func CreateResponseBodyCustomEnvironmentGetDeploymentCustomEnvironment2(getDeploymentCustomEnvironment2 GetDeploymentCustomEnvironment2) ResponseBodyCustomEnvironment {
	typ := ResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironment2

	return ResponseBodyCustomEnvironment{
		GetDeploymentCustomEnvironment2: &getDeploymentCustomEnvironment2,
		Type:                            typ,
	}
}

func (u *ResponseBodyCustomEnvironment) UnmarshalJSON(data []byte) error {

	var getDeploymentCustomEnvironment1 GetDeploymentCustomEnvironment1 = GetDeploymentCustomEnvironment1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentCustomEnvironment1, "", true, true); err == nil {
		u.GetDeploymentCustomEnvironment1 = &getDeploymentCustomEnvironment1
		u.Type = ResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironment1
		return nil
	}

	var getDeploymentCustomEnvironment2 GetDeploymentCustomEnvironment2 = GetDeploymentCustomEnvironment2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentCustomEnvironment2, "", true, true); err == nil {
		u.GetDeploymentCustomEnvironment2 = &getDeploymentCustomEnvironment2
		u.Type = ResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironment2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyCustomEnvironment", string(data))
}

func (u ResponseBodyCustomEnvironment) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentCustomEnvironment1 != nil {
		return utils.MarshalJSON(u.GetDeploymentCustomEnvironment1, "", true)
	}

	if u.GetDeploymentCustomEnvironment2 != nil {
		return utils.MarshalJSON(u.GetDeploymentCustomEnvironment2, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyCustomEnvironment: all fields are null")
}

type ResponseBodyAliasWarning struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Link    *string `json:"link,omitempty"`
	Action  *string `json:"action,omitempty"`
}

func (o *ResponseBodyAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *ResponseBodyAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *ResponseBodyAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *ResponseBodyAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

type GetDeploymentResponseBodyType string

const (
	GetDeploymentResponseBodyTypeLambdas GetDeploymentResponseBodyType = "LAMBDAS"
)

func (e GetDeploymentResponseBodyType) ToPointer() *GetDeploymentResponseBodyType {
	return &e
}
func (e *GetDeploymentResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetDeploymentResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyType: %v", v)
	}
}

type GetDeploymentResponseBodyReadyState string

const (
	GetDeploymentResponseBodyReadyStateQueued       GetDeploymentResponseBodyReadyState = "QUEUED"
	GetDeploymentResponseBodyReadyStateBuilding     GetDeploymentResponseBodyReadyState = "BUILDING"
	GetDeploymentResponseBodyReadyStateError        GetDeploymentResponseBodyReadyState = "ERROR"
	GetDeploymentResponseBodyReadyStateInitializing GetDeploymentResponseBodyReadyState = "INITIALIZING"
	GetDeploymentResponseBodyReadyStateReady        GetDeploymentResponseBodyReadyState = "READY"
	GetDeploymentResponseBodyReadyStateCanceled     GetDeploymentResponseBodyReadyState = "CANCELED"
)

func (e GetDeploymentResponseBodyReadyState) ToPointer() *GetDeploymentResponseBodyReadyState {
	return &e
}
func (e *GetDeploymentResponseBodyReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeploymentResponseBodyReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyReadyState: %v", v)
	}
}

type GetDeploymentResponseBodyAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetDeploymentResponseBodyAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentResponseBodyAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetDeploymentResponseBodyChecksState string

const (
	GetDeploymentResponseBodyChecksStateRegistered GetDeploymentResponseBodyChecksState = "registered"
	GetDeploymentResponseBodyChecksStateRunning    GetDeploymentResponseBodyChecksState = "running"
	GetDeploymentResponseBodyChecksStateCompleted  GetDeploymentResponseBodyChecksState = "completed"
)

func (e GetDeploymentResponseBodyChecksState) ToPointer() *GetDeploymentResponseBodyChecksState {
	return &e
}
func (e *GetDeploymentResponseBodyChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetDeploymentResponseBodyChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyChecksState: %v", v)
	}
}

type GetDeploymentResponseBodyChecksConclusion string

const (
	GetDeploymentResponseBodyChecksConclusionSucceeded GetDeploymentResponseBodyChecksConclusion = "succeeded"
	GetDeploymentResponseBodyChecksConclusionFailed    GetDeploymentResponseBodyChecksConclusion = "failed"
	GetDeploymentResponseBodyChecksConclusionSkipped   GetDeploymentResponseBodyChecksConclusion = "skipped"
	GetDeploymentResponseBodyChecksConclusionCanceled  GetDeploymentResponseBodyChecksConclusion = "canceled"
)

func (e GetDeploymentResponseBodyChecksConclusion) ToPointer() *GetDeploymentResponseBodyChecksConclusion {
	return &e
}
func (e *GetDeploymentResponseBodyChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetDeploymentResponseBodyChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyChecksConclusion: %v", v)
	}
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type: %v", v)
	}
}

type GetDeploymentGitSource9 struct {
	Type          GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type `json:"type"`
	Ref           string                                                                        `json:"ref"`
	Sha           string                                                                        `json:"sha"`
	Owner         *string                                                                       `json:"owner,omitempty"`
	Slug          *string                                                                       `json:"slug,omitempty"`
	WorkspaceUUID string                                                                        `json:"workspaceUuid"`
	RepoUUID      string                                                                        `json:"repoUuid"`
}

func (o *GetDeploymentGitSource9) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSource9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSource9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetDeploymentGitSource9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeploymentGitSource9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSource9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28TypeGitlab GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type = "gitlab"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type: %v", v)
	}
}

type GetDeploymentGitSource8 struct {
	Type      GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type `json:"type"`
	Ref       string                                                                        `json:"ref"`
	Sha       string                                                                        `json:"sha"`
	ProjectID float64                                                                       `json:"projectId"`
}

func (o *GetDeploymentGitSource8) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSource8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSource8) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27TypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type: %v", v)
	}
}

type GetDeploymentGitSource7 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type `json:"type"`
	Ref    string                                                                        `json:"ref"`
	Sha    string                                                                        `json:"sha"`
	RepoID float64                                                                       `json:"repoId"`
	Org    *string                                                                       `json:"org,omitempty"`
	Repo   *string                                                                       `json:"repo,omitempty"`
}

func (o *GetDeploymentGitSource7) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSource7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSource7) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitSource7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeploymentGitSource7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26TypeCustom GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type = "custom"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type: %v", v)
	}
}

// GetDeploymentGitSource6 - Allows custom git sources (local folder mounted to the container) in test mode
type GetDeploymentGitSource6 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type `json:"type"`
	Ref    string                                                                        `json:"ref"`
	Sha    string                                                                        `json:"sha"`
	GitURL string                                                                        `json:"gitUrl"`
}

func (o *GetDeploymentGitSource6) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSource6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSource6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type: %v", v)
	}
}

type GetDeploymentGitSource5 struct {
	Type  GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type `json:"type"`
	Owner string                                                                        `json:"owner"`
	Slug  string                                                                        `json:"slug"`
	Ref   *string                                                                       `json:"ref,omitempty"`
	Sha   *string                                                                       `json:"sha,omitempty"`
	PrID  *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource5) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentGitSource5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentGitSource5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type: %v", v)
	}
}

type GetDeploymentGitSource4 struct {
	Type          GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type `json:"type"`
	WorkspaceUUID *string                                                                       `json:"workspaceUuid,omitempty"`
	RepoUUID      string                                                                        `json:"repoUuid"`
	Ref           *string                                                                       `json:"ref,omitempty"`
	Sha           *string                                                                       `json:"sha,omitempty"`
	PrID          *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource4) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSource4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentGitSource4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23TypeGitlab GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type = "gitlab"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type: %v", v)
	}
}

type GetDeploymentGitSourceDeploymentsProjectIDType string

const (
	GetDeploymentGitSourceDeploymentsProjectIDTypeStr    GetDeploymentGitSourceDeploymentsProjectIDType = "str"
	GetDeploymentGitSourceDeploymentsProjectIDTypeNumber GetDeploymentGitSourceDeploymentsProjectIDType = "number"
)

type GetDeploymentGitSourceDeploymentsProjectID struct {
	Str    *string
	Number *float64

	Type GetDeploymentGitSourceDeploymentsProjectIDType
}

func CreateGetDeploymentGitSourceDeploymentsProjectIDStr(str string) GetDeploymentGitSourceDeploymentsProjectID {
	typ := GetDeploymentGitSourceDeploymentsProjectIDTypeStr

	return GetDeploymentGitSourceDeploymentsProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentGitSourceDeploymentsProjectIDNumber(number float64) GetDeploymentGitSourceDeploymentsProjectID {
	typ := GetDeploymentGitSourceDeploymentsProjectIDTypeNumber

	return GetDeploymentGitSourceDeploymentsProjectID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentGitSourceDeploymentsProjectID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentGitSourceDeploymentsProjectIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentGitSourceDeploymentsProjectIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceDeploymentsProjectID", string(data))
}

func (u GetDeploymentGitSourceDeploymentsProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceDeploymentsProjectID: all fields are null")
}

type GetDeploymentGitSource3 struct {
	Type      GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type `json:"type"`
	ProjectID GetDeploymentGitSourceDeploymentsProjectID                                    `json:"projectId"`
	Ref       *string                                                                       `json:"ref,omitempty"`
	Sha       *string                                                                       `json:"sha,omitempty"`
	PrID      *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource3) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource3) GetProjectID() GetDeploymentGitSourceDeploymentsProjectID {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsProjectID{}
	}
	return o.ProjectID
}

func (o *GetDeploymentGitSource3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource3) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22TypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type: %v", v)
	}
}

type GetDeploymentGitSource2 struct {
	Type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type `json:"type"`
	Org  string                                                                        `json:"org"`
	Repo string                                                                        `json:"repo"`
	Ref  *string                                                                       `json:"ref,omitempty"`
	Sha  *string                                                                       `json:"sha,omitempty"`
	PrID *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource2) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitSource2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitSource2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2TypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type: %v", v)
	}
}

type GetDeploymentGitSourceDeploymentsRepoIDType string

const (
	GetDeploymentGitSourceDeploymentsRepoIDTypeStr    GetDeploymentGitSourceDeploymentsRepoIDType = "str"
	GetDeploymentGitSourceDeploymentsRepoIDTypeNumber GetDeploymentGitSourceDeploymentsRepoIDType = "number"
)

type GetDeploymentGitSourceDeploymentsRepoID struct {
	Str    *string
	Number *float64

	Type GetDeploymentGitSourceDeploymentsRepoIDType
}

func CreateGetDeploymentGitSourceDeploymentsRepoIDStr(str string) GetDeploymentGitSourceDeploymentsRepoID {
	typ := GetDeploymentGitSourceDeploymentsRepoIDTypeStr

	return GetDeploymentGitSourceDeploymentsRepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentGitSourceDeploymentsRepoIDNumber(number float64) GetDeploymentGitSourceDeploymentsRepoID {
	typ := GetDeploymentGitSourceDeploymentsRepoIDTypeNumber

	return GetDeploymentGitSourceDeploymentsRepoID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentGitSourceDeploymentsRepoID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentGitSourceDeploymentsRepoIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentGitSourceDeploymentsRepoIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceDeploymentsRepoID", string(data))
}

func (u GetDeploymentGitSourceDeploymentsRepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceDeploymentsRepoID: all fields are null")
}

type GetDeploymentGitSource1 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type `json:"type"`
	RepoID GetDeploymentGitSourceDeploymentsRepoID                                      `json:"repoId"`
	Ref    *string                                                                      `json:"ref,omitempty"`
	Sha    *string                                                                      `json:"sha,omitempty"`
	PrID   *float64                                                                     `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSource1) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSource1) GetRepoID() GetDeploymentGitSourceDeploymentsRepoID {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsRepoID{}
	}
	return o.RepoID
}

func (o *GetDeploymentGitSource1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSource1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSource1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type ResponseBodyGitSourceType string

const (
	ResponseBodyGitSourceTypeGetDeploymentGitSource1 ResponseBodyGitSourceType = "getDeployment_gitSource_1"
	ResponseBodyGitSourceTypeGetDeploymentGitSource2 ResponseBodyGitSourceType = "getDeployment_gitSource_2"
	ResponseBodyGitSourceTypeGetDeploymentGitSource3 ResponseBodyGitSourceType = "getDeployment_gitSource_3"
	ResponseBodyGitSourceTypeGetDeploymentGitSource4 ResponseBodyGitSourceType = "getDeployment_gitSource_4"
	ResponseBodyGitSourceTypeGetDeploymentGitSource5 ResponseBodyGitSourceType = "getDeployment_gitSource_5"
	ResponseBodyGitSourceTypeGetDeploymentGitSource6 ResponseBodyGitSourceType = "getDeployment_gitSource_6"
	ResponseBodyGitSourceTypeGetDeploymentGitSource7 ResponseBodyGitSourceType = "getDeployment_gitSource_7"
	ResponseBodyGitSourceTypeGetDeploymentGitSource8 ResponseBodyGitSourceType = "getDeployment_gitSource_8"
	ResponseBodyGitSourceTypeGetDeploymentGitSource9 ResponseBodyGitSourceType = "getDeployment_gitSource_9"
)

type ResponseBodyGitSource struct {
	GetDeploymentGitSource1 *GetDeploymentGitSource1
	GetDeploymentGitSource2 *GetDeploymentGitSource2
	GetDeploymentGitSource3 *GetDeploymentGitSource3
	GetDeploymentGitSource4 *GetDeploymentGitSource4
	GetDeploymentGitSource5 *GetDeploymentGitSource5
	GetDeploymentGitSource6 *GetDeploymentGitSource6
	GetDeploymentGitSource7 *GetDeploymentGitSource7
	GetDeploymentGitSource8 *GetDeploymentGitSource8
	GetDeploymentGitSource9 *GetDeploymentGitSource9

	Type ResponseBodyGitSourceType
}

func CreateResponseBodyGitSourceGetDeploymentGitSource1(getDeploymentGitSource1 GetDeploymentGitSource1) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource1

	return ResponseBodyGitSource{
		GetDeploymentGitSource1: &getDeploymentGitSource1,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource2(getDeploymentGitSource2 GetDeploymentGitSource2) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource2

	return ResponseBodyGitSource{
		GetDeploymentGitSource2: &getDeploymentGitSource2,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource3(getDeploymentGitSource3 GetDeploymentGitSource3) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource3

	return ResponseBodyGitSource{
		GetDeploymentGitSource3: &getDeploymentGitSource3,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource4(getDeploymentGitSource4 GetDeploymentGitSource4) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource4

	return ResponseBodyGitSource{
		GetDeploymentGitSource4: &getDeploymentGitSource4,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource5(getDeploymentGitSource5 GetDeploymentGitSource5) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource5

	return ResponseBodyGitSource{
		GetDeploymentGitSource5: &getDeploymentGitSource5,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource6(getDeploymentGitSource6 GetDeploymentGitSource6) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource6

	return ResponseBodyGitSource{
		GetDeploymentGitSource6: &getDeploymentGitSource6,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource7(getDeploymentGitSource7 GetDeploymentGitSource7) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource7

	return ResponseBodyGitSource{
		GetDeploymentGitSource7: &getDeploymentGitSource7,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource8(getDeploymentGitSource8 GetDeploymentGitSource8) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource8

	return ResponseBodyGitSource{
		GetDeploymentGitSource8: &getDeploymentGitSource8,
		Type:                    typ,
	}
}

func CreateResponseBodyGitSourceGetDeploymentGitSource9(getDeploymentGitSource9 GetDeploymentGitSource9) ResponseBodyGitSource {
	typ := ResponseBodyGitSourceTypeGetDeploymentGitSource9

	return ResponseBodyGitSource{
		GetDeploymentGitSource9: &getDeploymentGitSource9,
		Type:                    typ,
	}
}

func (u *ResponseBodyGitSource) UnmarshalJSON(data []byte) error {

	var getDeploymentGitSource6 GetDeploymentGitSource6 = GetDeploymentGitSource6{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource6, "", true, true); err == nil {
		u.GetDeploymentGitSource6 = &getDeploymentGitSource6
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource6
		return nil
	}

	var getDeploymentGitSource8 GetDeploymentGitSource8 = GetDeploymentGitSource8{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource8, "", true, true); err == nil {
		u.GetDeploymentGitSource8 = &getDeploymentGitSource8
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource8
		return nil
	}

	var getDeploymentGitSource1 GetDeploymentGitSource1 = GetDeploymentGitSource1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource1, "", true, true); err == nil {
		u.GetDeploymentGitSource1 = &getDeploymentGitSource1
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource1
		return nil
	}

	var getDeploymentGitSource3 GetDeploymentGitSource3 = GetDeploymentGitSource3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource3, "", true, true); err == nil {
		u.GetDeploymentGitSource3 = &getDeploymentGitSource3
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource3
		return nil
	}

	var getDeploymentGitSource2 GetDeploymentGitSource2 = GetDeploymentGitSource2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource2, "", true, true); err == nil {
		u.GetDeploymentGitSource2 = &getDeploymentGitSource2
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource2
		return nil
	}

	var getDeploymentGitSource4 GetDeploymentGitSource4 = GetDeploymentGitSource4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource4, "", true, true); err == nil {
		u.GetDeploymentGitSource4 = &getDeploymentGitSource4
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource4
		return nil
	}

	var getDeploymentGitSource5 GetDeploymentGitSource5 = GetDeploymentGitSource5{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource5, "", true, true); err == nil {
		u.GetDeploymentGitSource5 = &getDeploymentGitSource5
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource5
		return nil
	}

	var getDeploymentGitSource7 GetDeploymentGitSource7 = GetDeploymentGitSource7{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource7, "", true, true); err == nil {
		u.GetDeploymentGitSource7 = &getDeploymentGitSource7
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource7
		return nil
	}

	var getDeploymentGitSource9 GetDeploymentGitSource9 = GetDeploymentGitSource9{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSource9, "", true, true); err == nil {
		u.GetDeploymentGitSource9 = &getDeploymentGitSource9
		u.Type = ResponseBodyGitSourceTypeGetDeploymentGitSource9
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyGitSource", string(data))
}

func (u ResponseBodyGitSource) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentGitSource1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource1, "", true)
	}

	if u.GetDeploymentGitSource2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource2, "", true)
	}

	if u.GetDeploymentGitSource3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource3, "", true)
	}

	if u.GetDeploymentGitSource4 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource4, "", true)
	}

	if u.GetDeploymentGitSource5 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource5, "", true)
	}

	if u.GetDeploymentGitSource6 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource6, "", true)
	}

	if u.GetDeploymentGitSource7 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource7, "", true)
	}

	if u.GetDeploymentGitSource8 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource8, "", true)
	}

	if u.GetDeploymentGitSource9 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSource9, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyGitSource: all fields are null")
}

type GetDeploymentResponseBodyProject struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Framework *string `json:"framework,omitempty"`
}

func (o *GetDeploymentResponseBodyProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentResponseBodyProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentResponseBodyProject) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

// GetDeploymentResponseBodyReadySubstate - Since June 2023 Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - PROMOTED: has seen production traffic
type GetDeploymentResponseBodyReadySubstate string

const (
	GetDeploymentResponseBodyReadySubstateStaged   GetDeploymentResponseBodyReadySubstate = "STAGED"
	GetDeploymentResponseBodyReadySubstatePromoted GetDeploymentResponseBodyReadySubstate = "PROMOTED"
)

func (e GetDeploymentResponseBodyReadySubstate) ToPointer() *GetDeploymentResponseBodyReadySubstate {
	return &e
}
func (e *GetDeploymentResponseBodyReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = GetDeploymentResponseBodyReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyReadySubstate: %v", v)
	}
}

type GetDeploymentResponseBodySource string

const (
	GetDeploymentResponseBodySourceAPITriggerGitDeploy GetDeploymentResponseBodySource = "api-trigger-git-deploy"
	GetDeploymentResponseBodySourceCli                 GetDeploymentResponseBodySource = "cli"
	GetDeploymentResponseBodySourceCloneRepo           GetDeploymentResponseBodySource = "clone/repo"
	GetDeploymentResponseBodySourceGit                 GetDeploymentResponseBodySource = "git"
	GetDeploymentResponseBodySourceImport              GetDeploymentResponseBodySource = "import"
	GetDeploymentResponseBodySourceImportRepo          GetDeploymentResponseBodySource = "import/repo"
	GetDeploymentResponseBodySourceRedeploy            GetDeploymentResponseBodySource = "redeploy"
	GetDeploymentResponseBodySourceV0Web               GetDeploymentResponseBodySource = "v0-web"
)

func (e GetDeploymentResponseBodySource) ToPointer() *GetDeploymentResponseBodySource {
	return &e
}
func (e *GetDeploymentResponseBodySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = GetDeploymentResponseBodySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodySource: %v", v)
	}
}

type GetDeploymentResponseBodyTarget string

const (
	GetDeploymentResponseBodyTargetStaging    GetDeploymentResponseBodyTarget = "staging"
	GetDeploymentResponseBodyTargetProduction GetDeploymentResponseBodyTarget = "production"
)

func (e GetDeploymentResponseBodyTarget) ToPointer() *GetDeploymentResponseBodyTarget {
	return &e
}
func (e *GetDeploymentResponseBodyTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetDeploymentResponseBodyTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyTarget: %v", v)
	}
}

type GetDeploymentResponseBodyOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *GetDeploymentResponseBodyOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *GetDeploymentResponseBodyOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *GetDeploymentResponseBodyOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *GetDeploymentResponseBodyOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *GetDeploymentResponseBodyOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentResponseBodyOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetDeploymentResponseBodyOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *GetDeploymentResponseBodyOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetDeploymentResponseBodyOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

// GetDeploymentResponseBody2 - The deployment including only public information
type GetDeploymentResponseBody2 struct {
	Alias                   []string                             `json:"alias,omitempty"`
	AliasAssigned           bool                                 `json:"aliasAssigned"`
	BootedAt                float64                              `json:"bootedAt"`
	BuildingAt              float64                              `json:"buildingAt"`
	BuildSkipped            bool                                 `json:"buildSkipped"`
	Creator                 GetDeploymentResponseBodyCreator     `json:"creator"`
	InitReadyAt             *float64                             `json:"initReadyAt,omitempty"`
	IsFirstBranchDeployment *bool                                `json:"isFirstBranchDeployment,omitempty"`
	Lambdas                 []ResponseBodyLambdas                `json:"lambdas,omitempty"`
	Public                  bool                                 `json:"public"`
	Ready                   *float64                             `json:"ready,omitempty"`
	Status                  GetDeploymentResponseBodyStatus      `json:"status"`
	Team                    *ResponseBodyTeam                    `json:"team,omitempty"`
	UserAliases             []string                             `json:"userAliases,omitempty"`
	PreviewCommentsEnabled  *bool                                `json:"previewCommentsEnabled,omitempty"`
	TtyBuildLogs            *bool                                `json:"ttyBuildLogs,omitempty"`
	CustomEnvironment       *ResponseBodyCustomEnvironment       `json:"customEnvironment,omitempty"`
	AliasWarning            *ResponseBodyAliasWarning            `json:"aliasWarning,omitempty"`
	ID                      string                               `json:"id"`
	Name                    string                               `json:"name"`
	Type                    GetDeploymentResponseBodyType        `json:"type"`
	CreatedAt               float64                              `json:"createdAt"`
	ReadyState              GetDeploymentResponseBodyReadyState  `json:"readyState"`
	AliasError              *GetDeploymentResponseBodyAliasError `json:"aliasError,omitempty"`
	AliasFinal              *string                              `json:"aliasFinal,omitempty"`
	// applies to custom domains only, defaults to `true`
	AutoAssignCustomDomains *bool                                      `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                                   `json:"automaticAliases,omitempty"`
	BuildErrorAt            *float64                                   `json:"buildErrorAt,omitempty"`
	ChecksState             *GetDeploymentResponseBodyChecksState      `json:"checksState,omitempty"`
	ChecksConclusion        *GetDeploymentResponseBodyChecksConclusion `json:"checksConclusion,omitempty"`
	DeletedAt               *float64                                   `json:"deletedAt,omitempty"`
	// Computed field that is only available for deployments with a microfrontend configuration.
	DefaultRoute *string  `json:"defaultRoute,omitempty"`
	CanceledAt   *float64 `json:"canceledAt,omitempty"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
	PassiveRegions    []string                          `json:"passiveRegions,omitempty"`
	GitSource         *ResponseBodyGitSource            `json:"gitSource,omitempty"`
	Meta              map[string]string                 `json:"meta"`
	OriginCacheRegion *string                           `json:"originCacheRegion,omitempty"`
	Project           *GetDeploymentResponseBodyProject `json:"project,omitempty"`
	// Since June 2023 Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - PROMOTED: has seen production traffic
	ReadySubstate          *GetDeploymentResponseBodyReadySubstate   `json:"readySubstate,omitempty"`
	Regions                []string                                  `json:"regions"`
	SoftDeletedByRetention *bool                                     `json:"softDeletedByRetention,omitempty"`
	Source                 *GetDeploymentResponseBodySource          `json:"source,omitempty"`
	Target                 *GetDeploymentResponseBodyTarget          `json:"target,omitempty"`
	UndeletedAt            *float64                                  `json:"undeletedAt,omitempty"`
	URL                    string                                    `json:"url"`
	Version                float64                                   `json:"version"`
	OidcTokenClaims        *GetDeploymentResponseBodyOidcTokenClaims `json:"oidcTokenClaims,omitempty"`
}

func (o *GetDeploymentResponseBody2) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *GetDeploymentResponseBody2) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *GetDeploymentResponseBody2) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *GetDeploymentResponseBody2) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *GetDeploymentResponseBody2) GetBuildSkipped() bool {
	if o == nil {
		return false
	}
	return o.BuildSkipped
}

func (o *GetDeploymentResponseBody2) GetCreator() GetDeploymentResponseBodyCreator {
	if o == nil {
		return GetDeploymentResponseBodyCreator{}
	}
	return o.Creator
}

func (o *GetDeploymentResponseBody2) GetInitReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.InitReadyAt
}

func (o *GetDeploymentResponseBody2) GetIsFirstBranchDeployment() *bool {
	if o == nil {
		return nil
	}
	return o.IsFirstBranchDeployment
}

func (o *GetDeploymentResponseBody2) GetLambdas() []ResponseBodyLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *GetDeploymentResponseBody2) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *GetDeploymentResponseBody2) GetReady() *float64 {
	if o == nil {
		return nil
	}
	return o.Ready
}

func (o *GetDeploymentResponseBody2) GetStatus() GetDeploymentResponseBodyStatus {
	if o == nil {
		return GetDeploymentResponseBodyStatus("")
	}
	return o.Status
}

func (o *GetDeploymentResponseBody2) GetTeam() *ResponseBodyTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetDeploymentResponseBody2) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *GetDeploymentResponseBody2) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetDeploymentResponseBody2) GetTtyBuildLogs() *bool {
	if o == nil {
		return nil
	}
	return o.TtyBuildLogs
}

func (o *GetDeploymentResponseBody2) GetCustomEnvironment() *ResponseBodyCustomEnvironment {
	if o == nil {
		return nil
	}
	return o.CustomEnvironment
}

func (o *GetDeploymentResponseBody2) GetAliasWarning() *ResponseBodyAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *GetDeploymentResponseBody2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentResponseBody2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentResponseBody2) GetType() GetDeploymentResponseBodyType {
	if o == nil {
		return GetDeploymentResponseBodyType("")
	}
	return o.Type
}

func (o *GetDeploymentResponseBody2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDeploymentResponseBody2) GetReadyState() GetDeploymentResponseBodyReadyState {
	if o == nil {
		return GetDeploymentResponseBodyReadyState("")
	}
	return o.ReadyState
}

func (o *GetDeploymentResponseBody2) GetAliasError() *GetDeploymentResponseBodyAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetDeploymentResponseBody2) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetDeploymentResponseBody2) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetDeploymentResponseBody2) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetDeploymentResponseBody2) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *GetDeploymentResponseBody2) GetChecksState() *GetDeploymentResponseBodyChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetDeploymentResponseBody2) GetChecksConclusion() *GetDeploymentResponseBodyChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetDeploymentResponseBody2) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetDeploymentResponseBody2) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *GetDeploymentResponseBody2) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetDeploymentResponseBody2) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *GetDeploymentResponseBody2) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *GetDeploymentResponseBody2) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *GetDeploymentResponseBody2) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *GetDeploymentResponseBody2) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *GetDeploymentResponseBody2) GetGitSource() *ResponseBodyGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *GetDeploymentResponseBody2) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *GetDeploymentResponseBody2) GetOriginCacheRegion() *string {
	if o == nil {
		return nil
	}
	return o.OriginCacheRegion
}

func (o *GetDeploymentResponseBody2) GetProject() *GetDeploymentResponseBodyProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDeploymentResponseBody2) GetReadySubstate() *GetDeploymentResponseBodyReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetDeploymentResponseBody2) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *GetDeploymentResponseBody2) GetSoftDeletedByRetention() *bool {
	if o == nil {
		return nil
	}
	return o.SoftDeletedByRetention
}

func (o *GetDeploymentResponseBody2) GetSource() *GetDeploymentResponseBodySource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetDeploymentResponseBody2) GetTarget() *GetDeploymentResponseBodyTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetDeploymentResponseBody2) GetUndeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UndeletedAt
}

func (o *GetDeploymentResponseBody2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetDeploymentResponseBody2) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *GetDeploymentResponseBody2) GetOidcTokenClaims() *GetDeploymentResponseBodyOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

type ResponseBodyAliasAssignedAtType string

const (
	ResponseBodyAliasAssignedAtTypeNumber  ResponseBodyAliasAssignedAtType = "number"
	ResponseBodyAliasAssignedAtTypeBoolean ResponseBodyAliasAssignedAtType = "boolean"
)

type ResponseBodyAliasAssignedAt struct {
	Number  *float64
	Boolean *bool

	Type ResponseBodyAliasAssignedAtType
}

func CreateResponseBodyAliasAssignedAtNumber(number float64) ResponseBodyAliasAssignedAt {
	typ := ResponseBodyAliasAssignedAtTypeNumber

	return ResponseBodyAliasAssignedAt{
		Number: &number,
		Type:   typ,
	}
}

func CreateResponseBodyAliasAssignedAtBoolean(boolean bool) ResponseBodyAliasAssignedAt {
	typ := ResponseBodyAliasAssignedAtTypeBoolean

	return ResponseBodyAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *ResponseBodyAliasAssignedAt) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ResponseBodyAliasAssignedAtTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = ResponseBodyAliasAssignedAtTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyAliasAssignedAt", string(data))
}

func (u ResponseBodyAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyAliasAssignedAt: all fields are null")
}

type ResponseBodyBuild struct {
	Env []string `json:"env"`
}

func (o *ResponseBodyBuild) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type ResponseBodyBuilds struct {
}

type ResponseBodyFramework string

const (
	ResponseBodyFrameworkBlitzjs        ResponseBodyFramework = "blitzjs"
	ResponseBodyFrameworkNextjs         ResponseBodyFramework = "nextjs"
	ResponseBodyFrameworkGatsby         ResponseBodyFramework = "gatsby"
	ResponseBodyFrameworkRemix          ResponseBodyFramework = "remix"
	ResponseBodyFrameworkReactRouter    ResponseBodyFramework = "react-router"
	ResponseBodyFrameworkAstro          ResponseBodyFramework = "astro"
	ResponseBodyFrameworkHexo           ResponseBodyFramework = "hexo"
	ResponseBodyFrameworkEleventy       ResponseBodyFramework = "eleventy"
	ResponseBodyFrameworkDocusaurus2    ResponseBodyFramework = "docusaurus-2"
	ResponseBodyFrameworkDocusaurus     ResponseBodyFramework = "docusaurus"
	ResponseBodyFrameworkPreact         ResponseBodyFramework = "preact"
	ResponseBodyFrameworkSolidstart1    ResponseBodyFramework = "solidstart-1"
	ResponseBodyFrameworkSolidstart     ResponseBodyFramework = "solidstart"
	ResponseBodyFrameworkDojo           ResponseBodyFramework = "dojo"
	ResponseBodyFrameworkEmber          ResponseBodyFramework = "ember"
	ResponseBodyFrameworkVue            ResponseBodyFramework = "vue"
	ResponseBodyFrameworkScully         ResponseBodyFramework = "scully"
	ResponseBodyFrameworkIonicAngular   ResponseBodyFramework = "ionic-angular"
	ResponseBodyFrameworkAngular        ResponseBodyFramework = "angular"
	ResponseBodyFrameworkPolymer        ResponseBodyFramework = "polymer"
	ResponseBodyFrameworkSvelte         ResponseBodyFramework = "svelte"
	ResponseBodyFrameworkSveltekit      ResponseBodyFramework = "sveltekit"
	ResponseBodyFrameworkSveltekit1     ResponseBodyFramework = "sveltekit-1"
	ResponseBodyFrameworkIonicReact     ResponseBodyFramework = "ionic-react"
	ResponseBodyFrameworkCreateReactApp ResponseBodyFramework = "create-react-app"
	ResponseBodyFrameworkGridsome       ResponseBodyFramework = "gridsome"
	ResponseBodyFrameworkUmijs          ResponseBodyFramework = "umijs"
	ResponseBodyFrameworkSapper         ResponseBodyFramework = "sapper"
	ResponseBodyFrameworkSaber          ResponseBodyFramework = "saber"
	ResponseBodyFrameworkStencil        ResponseBodyFramework = "stencil"
	ResponseBodyFrameworkNuxtjs         ResponseBodyFramework = "nuxtjs"
	ResponseBodyFrameworkRedwoodjs      ResponseBodyFramework = "redwoodjs"
	ResponseBodyFrameworkHugo           ResponseBodyFramework = "hugo"
	ResponseBodyFrameworkJekyll         ResponseBodyFramework = "jekyll"
	ResponseBodyFrameworkBrunch         ResponseBodyFramework = "brunch"
	ResponseBodyFrameworkMiddleman      ResponseBodyFramework = "middleman"
	ResponseBodyFrameworkZola           ResponseBodyFramework = "zola"
	ResponseBodyFrameworkHydrogen       ResponseBodyFramework = "hydrogen"
	ResponseBodyFrameworkVite           ResponseBodyFramework = "vite"
	ResponseBodyFrameworkVitepress      ResponseBodyFramework = "vitepress"
	ResponseBodyFrameworkVuepress       ResponseBodyFramework = "vuepress"
	ResponseBodyFrameworkParcel         ResponseBodyFramework = "parcel"
	ResponseBodyFrameworkFasthtml       ResponseBodyFramework = "fasthtml"
	ResponseBodyFrameworkSanityV3       ResponseBodyFramework = "sanity-v3"
	ResponseBodyFrameworkSanity         ResponseBodyFramework = "sanity"
	ResponseBodyFrameworkStorybook      ResponseBodyFramework = "storybook"
)

func (e ResponseBodyFramework) ToPointer() *ResponseBodyFramework {
	return &e
}
func (e *ResponseBodyFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = ResponseBodyFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyFramework: %v", v)
	}
}

type ResponseBodySpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *ResponseBodySpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBodySpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *ResponseBodySpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *ResponseBodySpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *ResponseBodySpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *ResponseBodySpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type ResponseBodyWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *ResponseBodyWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBodyWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *ResponseBodyWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *ResponseBodyWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *ResponseBodyWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type ResponseBodyProjectSettings struct {
	BuildCommand                *string                    `json:"buildCommand,omitempty"`
	DevCommand                  *string                    `json:"devCommand,omitempty"`
	Framework                   *ResponseBodyFramework     `json:"framework,omitempty"`
	CommandForIgnoringBuildStep *string                    `json:"commandForIgnoringBuildStep,omitempty"`
	InstallCommand              *string                    `json:"installCommand,omitempty"`
	OutputDirectory             *string                    `json:"outputDirectory,omitempty"`
	SpeedInsights               *ResponseBodySpeedInsights `json:"speedInsights,omitempty"`
	WebAnalytics                *ResponseBodyWebAnalytics  `json:"webAnalytics,omitempty"`
}

func (o *ResponseBodyProjectSettings) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *ResponseBodyProjectSettings) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *ResponseBodyProjectSettings) GetFramework() *ResponseBodyFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *ResponseBodyProjectSettings) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *ResponseBodyProjectSettings) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *ResponseBodyProjectSettings) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *ResponseBodyProjectSettings) GetSpeedInsights() *ResponseBodySpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *ResponseBodyProjectSettings) GetWebAnalytics() *ResponseBodyWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

type GetDeploymentResponseBodyDeploymentsStatus string

const (
	GetDeploymentResponseBodyDeploymentsStatusError   GetDeploymentResponseBodyDeploymentsStatus = "error"
	GetDeploymentResponseBodyDeploymentsStatusSkipped GetDeploymentResponseBodyDeploymentsStatus = "skipped"
	GetDeploymentResponseBodyDeploymentsStatusPending GetDeploymentResponseBodyDeploymentsStatus = "pending"
	GetDeploymentResponseBodyDeploymentsStatusReady   GetDeploymentResponseBodyDeploymentsStatus = "ready"
	GetDeploymentResponseBodyDeploymentsStatusTimeout GetDeploymentResponseBodyDeploymentsStatus = "timeout"
)

func (e GetDeploymentResponseBodyDeploymentsStatus) ToPointer() *GetDeploymentResponseBodyDeploymentsStatus {
	return &e
}
func (e *GetDeploymentResponseBodyDeploymentsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "ready":
		fallthrough
	case "timeout":
		*e = GetDeploymentResponseBodyDeploymentsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyDeploymentsStatus: %v", v)
	}
}

type ResponseBodyIntegrations struct {
	Status      GetDeploymentResponseBodyDeploymentsStatus `json:"status"`
	StartedAt   float64                                    `json:"startedAt"`
	CompletedAt *float64                                   `json:"completedAt,omitempty"`
	SkippedAt   *float64                                   `json:"skippedAt,omitempty"`
	SkippedBy   *string                                    `json:"skippedBy,omitempty"`
}

func (o *ResponseBodyIntegrations) GetStatus() GetDeploymentResponseBodyDeploymentsStatus {
	if o == nil {
		return GetDeploymentResponseBodyDeploymentsStatus("")
	}
	return o.Status
}

func (o *ResponseBodyIntegrations) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *ResponseBodyIntegrations) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *ResponseBodyIntegrations) GetSkippedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkippedAt
}

func (o *ResponseBodyIntegrations) GetSkippedBy() *string {
	if o == nil {
		return nil
	}
	return o.SkippedBy
}

// ResponseBodyProtocol - Must be `http` or `https`.
type ResponseBodyProtocol string

const (
	ResponseBodyProtocolHTTP  ResponseBodyProtocol = "http"
	ResponseBodyProtocolHTTPS ResponseBodyProtocol = "https"
)

func (e ResponseBodyProtocol) ToPointer() *ResponseBodyProtocol {
	return &e
}
func (e *ResponseBodyProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = ResponseBodyProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyProtocol: %v", v)
	}
}

type ResponseBodyRemotePatterns struct {
	// Must be `http` or `https`.
	Protocol *ResponseBodyProtocol `json:"protocol,omitempty"`
	// Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains.
	Hostname string `json:"hostname"`
	// Can be literal port such as `8080` or empty string meaning no port.
	Port *string `json:"port,omitempty"`
	// Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
	Pathname *string `json:"pathname,omitempty"`
	// Can be literal query string such as `?v=1` or empty string meaning no query string.
	Search *string `json:"search,omitempty"`
}

func (o *ResponseBodyRemotePatterns) GetProtocol() *ResponseBodyProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *ResponseBodyRemotePatterns) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *ResponseBodyRemotePatterns) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *ResponseBodyRemotePatterns) GetPathname() *string {
	if o == nil {
		return nil
	}
	return o.Pathname
}

func (o *ResponseBodyRemotePatterns) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

type ResponseBodyLocalPatterns struct {
	// Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
	Pathname *string `json:"pathname,omitempty"`
	// Can be literal query string such as `?v=1` or empty string meaning no query string.
	Search *string `json:"search,omitempty"`
}

func (o *ResponseBodyLocalPatterns) GetPathname() *string {
	if o == nil {
		return nil
	}
	return o.Pathname
}

func (o *ResponseBodyLocalPatterns) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

type ResponseBodyFormats string

const (
	ResponseBodyFormatsImageAvif ResponseBodyFormats = "image/avif"
	ResponseBodyFormatsImageWebp ResponseBodyFormats = "image/webp"
)

func (e ResponseBodyFormats) ToPointer() *ResponseBodyFormats {
	return &e
}
func (e *ResponseBodyFormats) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image/avif":
		fallthrough
	case "image/webp":
		*e = ResponseBodyFormats(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyFormats: %v", v)
	}
}

type ResponseBodyContentDispositionType string

const (
	ResponseBodyContentDispositionTypeInline     ResponseBodyContentDispositionType = "inline"
	ResponseBodyContentDispositionTypeAttachment ResponseBodyContentDispositionType = "attachment"
)

func (e ResponseBodyContentDispositionType) ToPointer() *ResponseBodyContentDispositionType {
	return &e
}
func (e *ResponseBodyContentDispositionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inline":
		fallthrough
	case "attachment":
		*e = ResponseBodyContentDispositionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyContentDispositionType: %v", v)
	}
}

type ResponseBodyImages struct {
	Sizes                  []float64                           `json:"sizes,omitempty"`
	Qualities              []float64                           `json:"qualities,omitempty"`
	Domains                []string                            `json:"domains,omitempty"`
	RemotePatterns         []ResponseBodyRemotePatterns        `json:"remotePatterns,omitempty"`
	LocalPatterns          []ResponseBodyLocalPatterns         `json:"localPatterns,omitempty"`
	MinimumCacheTTL        *float64                            `json:"minimumCacheTTL,omitempty"`
	Formats                []ResponseBodyFormats               `json:"formats,omitempty"`
	DangerouslyAllowSVG    *bool                               `json:"dangerouslyAllowSVG,omitempty"`
	ContentSecurityPolicy  *string                             `json:"contentSecurityPolicy,omitempty"`
	ContentDispositionType *ResponseBodyContentDispositionType `json:"contentDispositionType,omitempty"`
}

func (o *ResponseBodyImages) GetSizes() []float64 {
	if o == nil {
		return nil
	}
	return o.Sizes
}

func (o *ResponseBodyImages) GetQualities() []float64 {
	if o == nil {
		return nil
	}
	return o.Qualities
}

func (o *ResponseBodyImages) GetDomains() []string {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *ResponseBodyImages) GetRemotePatterns() []ResponseBodyRemotePatterns {
	if o == nil {
		return nil
	}
	return o.RemotePatterns
}

func (o *ResponseBodyImages) GetLocalPatterns() []ResponseBodyLocalPatterns {
	if o == nil {
		return nil
	}
	return o.LocalPatterns
}

func (o *ResponseBodyImages) GetMinimumCacheTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.MinimumCacheTTL
}

func (o *ResponseBodyImages) GetFormats() []ResponseBodyFormats {
	if o == nil {
		return nil
	}
	return o.Formats
}

func (o *ResponseBodyImages) GetDangerouslyAllowSVG() *bool {
	if o == nil {
		return nil
	}
	return o.DangerouslyAllowSVG
}

func (o *ResponseBodyImages) GetContentSecurityPolicy() *string {
	if o == nil {
		return nil
	}
	return o.ContentSecurityPolicy
}

func (o *ResponseBodyImages) GetContentDispositionType() *ResponseBodyContentDispositionType {
	if o == nil {
		return nil
	}
	return o.ContentDispositionType
}

type ResponseBodyCreator struct {
	UID      string  `json:"uid"`
	Username *string `json:"username,omitempty"`
	Avatar   *string `json:"avatar,omitempty"`
}

func (o *ResponseBodyCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *ResponseBodyCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ResponseBodyCreator) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentResponseBodyDeploymentsResponseReadyState string

const (
	GetDeploymentResponseBodyDeploymentsResponseReadyStateBuilding     GetDeploymentResponseBodyDeploymentsResponseReadyState = "BUILDING"
	GetDeploymentResponseBodyDeploymentsResponseReadyStateError        GetDeploymentResponseBodyDeploymentsResponseReadyState = "ERROR"
	GetDeploymentResponseBodyDeploymentsResponseReadyStateInitializing GetDeploymentResponseBodyDeploymentsResponseReadyState = "INITIALIZING"
	GetDeploymentResponseBodyDeploymentsResponseReadyStateReady        GetDeploymentResponseBodyDeploymentsResponseReadyState = "READY"
)

func (e GetDeploymentResponseBodyDeploymentsResponseReadyState) ToPointer() *GetDeploymentResponseBodyDeploymentsResponseReadyState {
	return &e
}
func (e *GetDeploymentResponseBodyDeploymentsResponseReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeploymentResponseBodyDeploymentsResponseReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseBodyDeploymentsResponseReadyState: %v", v)
	}
}

type ResponseBodyOutput struct {
	Path         string `json:"path"`
	FunctionName string `json:"functionName"`
}

func (o *ResponseBodyOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *ResponseBodyOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

// GetDeploymentResponseBodyLambdas - A partial representation of a Build used by the deployment endpoint.
type GetDeploymentResponseBodyLambdas struct {
	ID           *string                                                 `json:"id,omitempty"`
	CreatedAt    *float64                                                `json:"createdAt,omitempty"`
	Entrypoint   *string                                                 `json:"entrypoint,omitempty"`
	ReadyState   *GetDeploymentResponseBodyDeploymentsResponseReadyState `json:"readyState,omitempty"`
	ReadyStateAt *float64                                                `json:"readyStateAt,omitempty"`
	Output       []ResponseBodyOutput                                    `json:"output"`
}

func (o *GetDeploymentResponseBodyLambdas) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetDeploymentResponseBodyLambdas) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetDeploymentResponseBodyLambdas) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentResponseBodyLambdas) GetReadyState() *GetDeploymentResponseBodyDeploymentsResponseReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentResponseBodyLambdas) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

func (o *GetDeploymentResponseBodyLambdas) GetOutput() []ResponseBodyOutput {
	if o == nil {
		return []ResponseBodyOutput{}
	}
	return o.Output
}

type ResponseBodyStatus string

const (
	ResponseBodyStatusQueued       ResponseBodyStatus = "QUEUED"
	ResponseBodyStatusBuilding     ResponseBodyStatus = "BUILDING"
	ResponseBodyStatusError        ResponseBodyStatus = "ERROR"
	ResponseBodyStatusInitializing ResponseBodyStatus = "INITIALIZING"
	ResponseBodyStatusReady        ResponseBodyStatus = "READY"
	ResponseBodyStatusCanceled     ResponseBodyStatus = "CANCELED"
)

func (e ResponseBodyStatus) ToPointer() *ResponseBodyStatus {
	return &e
}
func (e *ResponseBodyStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = ResponseBodyStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyStatus: %v", v)
	}
}

type GetDeploymentResponseBodyTeam struct {
	ID     string  `json:"id"`
	Name   string  `json:"name"`
	Slug   string  `json:"slug"`
	Avatar *string `json:"avatar,omitempty"`
}

func (o *GetDeploymentResponseBodyTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentResponseBodyTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentResponseBodyTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentResponseBodyTeam) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentCustomEnvironmentDeployments2 struct {
	ID string `json:"id"`
}

func (o *GetDeploymentCustomEnvironmentDeployments2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetDeploymentCustomEnvironmentDeployments1 struct {
}

type GetDeploymentResponseBodyCustomEnvironmentType string

const (
	GetDeploymentResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironmentDeployments1 GetDeploymentResponseBodyCustomEnvironmentType = "getDeployment_customEnvironment_deployments_1"
	GetDeploymentResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironmentDeployments2 GetDeploymentResponseBodyCustomEnvironmentType = "getDeployment_customEnvironment_deployments_2"
)

type GetDeploymentResponseBodyCustomEnvironment struct {
	GetDeploymentCustomEnvironmentDeployments1 *GetDeploymentCustomEnvironmentDeployments1
	GetDeploymentCustomEnvironmentDeployments2 *GetDeploymentCustomEnvironmentDeployments2

	Type GetDeploymentResponseBodyCustomEnvironmentType
}

func CreateGetDeploymentResponseBodyCustomEnvironmentGetDeploymentCustomEnvironmentDeployments1(getDeploymentCustomEnvironmentDeployments1 GetDeploymentCustomEnvironmentDeployments1) GetDeploymentResponseBodyCustomEnvironment {
	typ := GetDeploymentResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironmentDeployments1

	return GetDeploymentResponseBodyCustomEnvironment{
		GetDeploymentCustomEnvironmentDeployments1: &getDeploymentCustomEnvironmentDeployments1,
		Type: typ,
	}
}

func CreateGetDeploymentResponseBodyCustomEnvironmentGetDeploymentCustomEnvironmentDeployments2(getDeploymentCustomEnvironmentDeployments2 GetDeploymentCustomEnvironmentDeployments2) GetDeploymentResponseBodyCustomEnvironment {
	typ := GetDeploymentResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironmentDeployments2

	return GetDeploymentResponseBodyCustomEnvironment{
		GetDeploymentCustomEnvironmentDeployments2: &getDeploymentCustomEnvironmentDeployments2,
		Type: typ,
	}
}

func (u *GetDeploymentResponseBodyCustomEnvironment) UnmarshalJSON(data []byte) error {

	var getDeploymentCustomEnvironmentDeployments1 GetDeploymentCustomEnvironmentDeployments1 = GetDeploymentCustomEnvironmentDeployments1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentCustomEnvironmentDeployments1, "", true, true); err == nil {
		u.GetDeploymentCustomEnvironmentDeployments1 = &getDeploymentCustomEnvironmentDeployments1
		u.Type = GetDeploymentResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironmentDeployments1
		return nil
	}

	var getDeploymentCustomEnvironmentDeployments2 GetDeploymentCustomEnvironmentDeployments2 = GetDeploymentCustomEnvironmentDeployments2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentCustomEnvironmentDeployments2, "", true, true); err == nil {
		u.GetDeploymentCustomEnvironmentDeployments2 = &getDeploymentCustomEnvironmentDeployments2
		u.Type = GetDeploymentResponseBodyCustomEnvironmentTypeGetDeploymentCustomEnvironmentDeployments2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentResponseBodyCustomEnvironment", string(data))
}

func (u GetDeploymentResponseBodyCustomEnvironment) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentCustomEnvironmentDeployments1 != nil {
		return utils.MarshalJSON(u.GetDeploymentCustomEnvironmentDeployments1, "", true)
	}

	if u.GetDeploymentCustomEnvironmentDeployments2 != nil {
		return utils.MarshalJSON(u.GetDeploymentCustomEnvironmentDeployments2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentResponseBodyCustomEnvironment: all fields are null")
}

type GetDeploymentResponseBodyAliasWarning struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Link    *string `json:"link,omitempty"`
	Action  *string `json:"action,omitempty"`
}

func (o *GetDeploymentResponseBodyAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentResponseBodyAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *GetDeploymentResponseBodyAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetDeploymentResponseBodyAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

type ResponseBodyType string

const (
	ResponseBodyTypeLambdas ResponseBodyType = "LAMBDAS"
)

func (e ResponseBodyType) ToPointer() *ResponseBodyType {
	return &e
}
func (e *ResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = ResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyType: %v", v)
	}
}

type ResponseBodyReadyState string

const (
	ResponseBodyReadyStateQueued       ResponseBodyReadyState = "QUEUED"
	ResponseBodyReadyStateBuilding     ResponseBodyReadyState = "BUILDING"
	ResponseBodyReadyStateError        ResponseBodyReadyState = "ERROR"
	ResponseBodyReadyStateInitializing ResponseBodyReadyState = "INITIALIZING"
	ResponseBodyReadyStateReady        ResponseBodyReadyState = "READY"
	ResponseBodyReadyStateCanceled     ResponseBodyReadyState = "CANCELED"
)

func (e ResponseBodyReadyState) ToPointer() *ResponseBodyReadyState {
	return &e
}
func (e *ResponseBodyReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = ResponseBodyReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyReadyState: %v", v)
	}
}

type ResponseBodyAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *ResponseBodyAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *ResponseBodyAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type ResponseBodyChecksState string

const (
	ResponseBodyChecksStateRegistered ResponseBodyChecksState = "registered"
	ResponseBodyChecksStateRunning    ResponseBodyChecksState = "running"
	ResponseBodyChecksStateCompleted  ResponseBodyChecksState = "completed"
)

func (e ResponseBodyChecksState) ToPointer() *ResponseBodyChecksState {
	return &e
}
func (e *ResponseBodyChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = ResponseBodyChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyChecksState: %v", v)
	}
}

type ResponseBodyChecksConclusion string

const (
	ResponseBodyChecksConclusionSucceeded ResponseBodyChecksConclusion = "succeeded"
	ResponseBodyChecksConclusionFailed    ResponseBodyChecksConclusion = "failed"
	ResponseBodyChecksConclusionSkipped   ResponseBodyChecksConclusion = "skipped"
	ResponseBodyChecksConclusionCanceled  ResponseBodyChecksConclusion = "canceled"
)

func (e ResponseBodyChecksConclusion) ToPointer() *ResponseBodyChecksConclusion {
	return &e
}
func (e *ResponseBodyChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = ResponseBodyChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyChecksConclusion: %v", v)
	}
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type: %v", v)
	}
}

type GetDeploymentGitSourceDeployments9 struct {
	Type          GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type `json:"type"`
	Ref           string                                                                        `json:"ref"`
	Sha           string                                                                        `json:"sha"`
	Owner         *string                                                                       `json:"owner,omitempty"`
	Slug          *string                                                                       `json:"slug,omitempty"`
	WorkspaceUUID string                                                                        `json:"workspaceUuid"`
	RepoUUID      string                                                                        `json:"repoUuid"`
}

func (o *GetDeploymentGitSourceDeployments9) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments9) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments9) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments9) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetDeploymentGitSourceDeployments9) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeploymentGitSourceDeployments9) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSourceDeployments9) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1TypeGitlab GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type = "gitlab"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type: %v", v)
	}
}

type GetDeploymentGitSourceDeployments8 struct {
	Type      GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type `json:"type"`
	Ref       string                                                                       `json:"ref"`
	Sha       string                                                                       `json:"sha"`
	ProjectID float64                                                                      `json:"projectId"`
}

func (o *GetDeploymentGitSourceDeployments8) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments8) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments8) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments8) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyTypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GetDeploymentGitSourceDeployments7 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Ref    string                                                                      `json:"ref"`
	Sha    string                                                                      `json:"sha"`
	RepoID float64                                                                     `json:"repoId"`
	Org    *string                                                                     `json:"org,omitempty"`
	Repo   *string                                                                     `json:"repo,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments7) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments7) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments7) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments7) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceDeployments7) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeploymentGitSourceDeployments7) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONTypeCustom GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType = "custom"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType: %v", v)
	}
}

// GetDeploymentGitSourceDeployments6 - Allows custom git sources (local folder mounted to the container) in test mode
type GetDeploymentGitSourceDeployments6 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType `json:"type"`
	Ref    string                                                          `json:"ref"`
	Sha    string                                                          `json:"sha"`
	GitURL string                                                          `json:"gitUrl"`
}

func (o *GetDeploymentGitSourceDeployments6) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments6) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

type GetDeploymentGitSourceDeploymentsResponse200Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200TypeBitbucket GetDeploymentGitSourceDeploymentsResponse200Type = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponse200Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200Type: %v", v)
	}
}

type GetDeploymentGitSourceDeployments5 struct {
	Type  GetDeploymentGitSourceDeploymentsResponse200Type `json:"type"`
	Owner string                                           `json:"owner"`
	Slug  string                                           `json:"slug"`
	Ref   *string                                          `json:"ref,omitempty"`
	Sha   *string                                          `json:"sha,omitempty"`
	PrID  *float64                                         `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments5) GetType() GetDeploymentGitSourceDeploymentsResponse200Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentGitSourceDeployments5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentGitSourceDeployments5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponseType string

const (
	GetDeploymentGitSourceDeploymentsResponseTypeBitbucket GetDeploymentGitSourceDeploymentsResponseType = "bitbucket"
)

func (e GetDeploymentGitSourceDeploymentsResponseType) ToPointer() *GetDeploymentGitSourceDeploymentsResponseType {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponseType: %v", v)
	}
}

type GetDeploymentGitSourceDeployments4 struct {
	Type          GetDeploymentGitSourceDeploymentsResponseType `json:"type"`
	WorkspaceUUID *string                                       `json:"workspaceUuid,omitempty"`
	RepoUUID      string                                        `json:"repoUuid"`
	Ref           *string                                       `json:"ref,omitempty"`
	Sha           *string                                       `json:"sha,omitempty"`
	PrID          *float64                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments4) GetType() GetDeploymentGitSourceDeploymentsResponseType {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponseType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSourceDeployments4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentGitSourceDeployments4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsType string

const (
	GetDeploymentGitSourceDeploymentsTypeGitlab GetDeploymentGitSourceDeploymentsType = "gitlab"
)

func (e GetDeploymentGitSourceDeploymentsType) ToPointer() *GetDeploymentGitSourceDeploymentsType {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsType: %v", v)
	}
}

type GetDeploymentGitSourceProjectIDType string

const (
	GetDeploymentGitSourceProjectIDTypeStr    GetDeploymentGitSourceProjectIDType = "str"
	GetDeploymentGitSourceProjectIDTypeNumber GetDeploymentGitSourceProjectIDType = "number"
)

type GetDeploymentGitSourceProjectID struct {
	Str    *string
	Number *float64

	Type GetDeploymentGitSourceProjectIDType
}

func CreateGetDeploymentGitSourceProjectIDStr(str string) GetDeploymentGitSourceProjectID {
	typ := GetDeploymentGitSourceProjectIDTypeStr

	return GetDeploymentGitSourceProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentGitSourceProjectIDNumber(number float64) GetDeploymentGitSourceProjectID {
	typ := GetDeploymentGitSourceProjectIDTypeNumber

	return GetDeploymentGitSourceProjectID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentGitSourceProjectID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentGitSourceProjectIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentGitSourceProjectIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceProjectID", string(data))
}

func (u GetDeploymentGitSourceProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceProjectID: all fields are null")
}

type GetDeploymentGitSourceDeployments3 struct {
	Type      GetDeploymentGitSourceDeploymentsType `json:"type"`
	ProjectID GetDeploymentGitSourceProjectID       `json:"projectId"`
	Ref       *string                               `json:"ref,omitempty"`
	Sha       *string                               `json:"sha,omitempty"`
	PrID      *float64                              `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments3) GetType() GetDeploymentGitSourceDeploymentsType {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments3) GetProjectID() GetDeploymentGitSourceProjectID {
	if o == nil {
		return GetDeploymentGitSourceProjectID{}
	}
	return o.ProjectID
}

func (o *GetDeploymentGitSourceDeployments3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments3) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceType string

const (
	GetDeploymentGitSourceTypeGithub GetDeploymentGitSourceType = "github"
)

func (e GetDeploymentGitSourceType) ToPointer() *GetDeploymentGitSourceType {
	return &e
}
func (e *GetDeploymentGitSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceType: %v", v)
	}
}

type GetDeploymentGitSourceDeployments2 struct {
	Type GetDeploymentGitSourceType `json:"type"`
	Org  string                     `json:"org"`
	Repo string                     `json:"repo"`
	Ref  *string                    `json:"ref,omitempty"`
	Sha  *string                    `json:"sha,omitempty"`
	PrID *float64                   `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments2) GetType() GetDeploymentGitSourceType {
	if o == nil {
		return GetDeploymentGitSourceType("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitSourceDeployments2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitSourceDeployments2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type string

const (
	GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11TypeGithub GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type = "github"
)

func (e GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type) ToPointer() *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type {
	return &e
}
func (e *GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type: %v", v)
	}
}

type GetDeploymentGitSourceRepoIDType string

const (
	GetDeploymentGitSourceRepoIDTypeStr    GetDeploymentGitSourceRepoIDType = "str"
	GetDeploymentGitSourceRepoIDTypeNumber GetDeploymentGitSourceRepoIDType = "number"
)

type GetDeploymentGitSourceRepoID struct {
	Str    *string
	Number *float64

	Type GetDeploymentGitSourceRepoIDType
}

func CreateGetDeploymentGitSourceRepoIDStr(str string) GetDeploymentGitSourceRepoID {
	typ := GetDeploymentGitSourceRepoIDTypeStr

	return GetDeploymentGitSourceRepoID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentGitSourceRepoIDNumber(number float64) GetDeploymentGitSourceRepoID {
	typ := GetDeploymentGitSourceRepoIDTypeNumber

	return GetDeploymentGitSourceRepoID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentGitSourceRepoID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentGitSourceRepoIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentGitSourceRepoIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceRepoID", string(data))
}

func (u GetDeploymentGitSourceRepoID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceRepoID: all fields are null")
}

type GetDeploymentGitSourceDeployments1 struct {
	Type   GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type `json:"type"`
	RepoID GetDeploymentGitSourceRepoID                                                  `json:"repoId"`
	Ref    *string                                                                       `json:"ref,omitempty"`
	Sha    *string                                                                       `json:"sha,omitempty"`
	PrID   *float64                                                                      `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceDeployments1) GetType() GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type {
	if o == nil {
		return GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceDeployments1) GetRepoID() GetDeploymentGitSourceRepoID {
	if o == nil {
		return GetDeploymentGitSourceRepoID{}
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceDeployments1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceDeployments1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceDeployments1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentResponseBodyGitSourceType string

const (
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments1 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_1"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments2 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_2"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments3 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_3"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments4 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_4"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments5 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_5"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments6 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_6"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments7 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_7"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments8 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_8"
	GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments9 GetDeploymentResponseBodyGitSourceType = "getDeployment_gitSource_deployments_9"
)

type GetDeploymentResponseBodyGitSource struct {
	GetDeploymentGitSourceDeployments1 *GetDeploymentGitSourceDeployments1
	GetDeploymentGitSourceDeployments2 *GetDeploymentGitSourceDeployments2
	GetDeploymentGitSourceDeployments3 *GetDeploymentGitSourceDeployments3
	GetDeploymentGitSourceDeployments4 *GetDeploymentGitSourceDeployments4
	GetDeploymentGitSourceDeployments5 *GetDeploymentGitSourceDeployments5
	GetDeploymentGitSourceDeployments6 *GetDeploymentGitSourceDeployments6
	GetDeploymentGitSourceDeployments7 *GetDeploymentGitSourceDeployments7
	GetDeploymentGitSourceDeployments8 *GetDeploymentGitSourceDeployments8
	GetDeploymentGitSourceDeployments9 *GetDeploymentGitSourceDeployments9

	Type GetDeploymentResponseBodyGitSourceType
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments1(getDeploymentGitSourceDeployments1 GetDeploymentGitSourceDeployments1) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments1

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments1: &getDeploymentGitSourceDeployments1,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments2(getDeploymentGitSourceDeployments2 GetDeploymentGitSourceDeployments2) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments2

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments2: &getDeploymentGitSourceDeployments2,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments3(getDeploymentGitSourceDeployments3 GetDeploymentGitSourceDeployments3) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments3

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments3: &getDeploymentGitSourceDeployments3,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments4(getDeploymentGitSourceDeployments4 GetDeploymentGitSourceDeployments4) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments4

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments4: &getDeploymentGitSourceDeployments4,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments5(getDeploymentGitSourceDeployments5 GetDeploymentGitSourceDeployments5) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments5

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments5: &getDeploymentGitSourceDeployments5,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments6(getDeploymentGitSourceDeployments6 GetDeploymentGitSourceDeployments6) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments6

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments6: &getDeploymentGitSourceDeployments6,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments7(getDeploymentGitSourceDeployments7 GetDeploymentGitSourceDeployments7) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments7

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments7: &getDeploymentGitSourceDeployments7,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments8(getDeploymentGitSourceDeployments8 GetDeploymentGitSourceDeployments8) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments8

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments8: &getDeploymentGitSourceDeployments8,
		Type:                               typ,
	}
}

func CreateGetDeploymentResponseBodyGitSourceGetDeploymentGitSourceDeployments9(getDeploymentGitSourceDeployments9 GetDeploymentGitSourceDeployments9) GetDeploymentResponseBodyGitSource {
	typ := GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments9

	return GetDeploymentResponseBodyGitSource{
		GetDeploymentGitSourceDeployments9: &getDeploymentGitSourceDeployments9,
		Type:                               typ,
	}
}

func (u *GetDeploymentResponseBodyGitSource) UnmarshalJSON(data []byte) error {

	var getDeploymentGitSourceDeployments6 GetDeploymentGitSourceDeployments6 = GetDeploymentGitSourceDeployments6{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments6, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments6 = &getDeploymentGitSourceDeployments6
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments6
		return nil
	}

	var getDeploymentGitSourceDeployments8 GetDeploymentGitSourceDeployments8 = GetDeploymentGitSourceDeployments8{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments8, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments8 = &getDeploymentGitSourceDeployments8
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments8
		return nil
	}

	var getDeploymentGitSourceDeployments1 GetDeploymentGitSourceDeployments1 = GetDeploymentGitSourceDeployments1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments1, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments1 = &getDeploymentGitSourceDeployments1
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments1
		return nil
	}

	var getDeploymentGitSourceDeployments3 GetDeploymentGitSourceDeployments3 = GetDeploymentGitSourceDeployments3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments3, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments3 = &getDeploymentGitSourceDeployments3
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments3
		return nil
	}

	var getDeploymentGitSourceDeployments2 GetDeploymentGitSourceDeployments2 = GetDeploymentGitSourceDeployments2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments2, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments2 = &getDeploymentGitSourceDeployments2
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments2
		return nil
	}

	var getDeploymentGitSourceDeployments4 GetDeploymentGitSourceDeployments4 = GetDeploymentGitSourceDeployments4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments4, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments4 = &getDeploymentGitSourceDeployments4
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments4
		return nil
	}

	var getDeploymentGitSourceDeployments5 GetDeploymentGitSourceDeployments5 = GetDeploymentGitSourceDeployments5{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments5, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments5 = &getDeploymentGitSourceDeployments5
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments5
		return nil
	}

	var getDeploymentGitSourceDeployments7 GetDeploymentGitSourceDeployments7 = GetDeploymentGitSourceDeployments7{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments7, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments7 = &getDeploymentGitSourceDeployments7
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments7
		return nil
	}

	var getDeploymentGitSourceDeployments9 GetDeploymentGitSourceDeployments9 = GetDeploymentGitSourceDeployments9{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceDeployments9, "", true, true); err == nil {
		u.GetDeploymentGitSourceDeployments9 = &getDeploymentGitSourceDeployments9
		u.Type = GetDeploymentResponseBodyGitSourceTypeGetDeploymentGitSourceDeployments9
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentResponseBodyGitSource", string(data))
}

func (u GetDeploymentResponseBodyGitSource) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentGitSourceDeployments1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments1, "", true)
	}

	if u.GetDeploymentGitSourceDeployments2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments2, "", true)
	}

	if u.GetDeploymentGitSourceDeployments3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments3, "", true)
	}

	if u.GetDeploymentGitSourceDeployments4 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments4, "", true)
	}

	if u.GetDeploymentGitSourceDeployments5 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments5, "", true)
	}

	if u.GetDeploymentGitSourceDeployments6 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments6, "", true)
	}

	if u.GetDeploymentGitSourceDeployments7 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments7, "", true)
	}

	if u.GetDeploymentGitSourceDeployments8 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments8, "", true)
	}

	if u.GetDeploymentGitSourceDeployments9 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceDeployments9, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentResponseBodyGitSource: all fields are null")
}

type ResponseBodyProject struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Framework *string `json:"framework,omitempty"`
}

func (o *ResponseBodyProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBodyProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ResponseBodyProject) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

// ResponseBodyReadySubstate - Since June 2023 Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - PROMOTED: has seen production traffic
type ResponseBodyReadySubstate string

const (
	ResponseBodyReadySubstateStaged   ResponseBodyReadySubstate = "STAGED"
	ResponseBodyReadySubstatePromoted ResponseBodyReadySubstate = "PROMOTED"
)

func (e ResponseBodyReadySubstate) ToPointer() *ResponseBodyReadySubstate {
	return &e
}
func (e *ResponseBodyReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = ResponseBodyReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyReadySubstate: %v", v)
	}
}

type ResponseBodySource string

const (
	ResponseBodySourceAPITriggerGitDeploy ResponseBodySource = "api-trigger-git-deploy"
	ResponseBodySourceCli                 ResponseBodySource = "cli"
	ResponseBodySourceCloneRepo           ResponseBodySource = "clone/repo"
	ResponseBodySourceGit                 ResponseBodySource = "git"
	ResponseBodySourceImport              ResponseBodySource = "import"
	ResponseBodySourceImportRepo          ResponseBodySource = "import/repo"
	ResponseBodySourceRedeploy            ResponseBodySource = "redeploy"
	ResponseBodySourceV0Web               ResponseBodySource = "v0-web"
)

func (e ResponseBodySource) ToPointer() *ResponseBodySource {
	return &e
}
func (e *ResponseBodySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = ResponseBodySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodySource: %v", v)
	}
}

type ResponseBodyTarget string

const (
	ResponseBodyTargetStaging    ResponseBodyTarget = "staging"
	ResponseBodyTargetProduction ResponseBodyTarget = "production"
)

func (e ResponseBodyTarget) ToPointer() *ResponseBodyTarget {
	return &e
}
func (e *ResponseBodyTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = ResponseBodyTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyTarget: %v", v)
	}
}

type ResponseBodyOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *ResponseBodyOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *ResponseBodyOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *ResponseBodyOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *ResponseBodyOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *ResponseBodyOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *ResponseBodyOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *ResponseBodyOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *ResponseBodyOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *ResponseBodyOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type ResponseBodyPlan string

const (
	ResponseBodyPlanPro        ResponseBodyPlan = "pro"
	ResponseBodyPlanEnterprise ResponseBodyPlan = "enterprise"
	ResponseBodyPlanHobby      ResponseBodyPlan = "hobby"
)

func (e ResponseBodyPlan) ToPointer() *ResponseBodyPlan {
	return &e
}
func (e *ResponseBodyPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = ResponseBodyPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyPlan: %v", v)
	}
}

type ResponseBodyCrons struct {
	Schedule string `json:"schedule"`
	Path     string `json:"path"`
}

func (o *ResponseBodyCrons) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

func (o *ResponseBodyCrons) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type ResponseBodyFunctions struct {
	Memory       *float64 `json:"memory,omitempty"`
	MaxDuration  *float64 `json:"maxDuration,omitempty"`
	Runtime      *string  `json:"runtime,omitempty"`
	IncludeFiles *string  `json:"includeFiles,omitempty"`
	ExcludeFiles *string  `json:"excludeFiles,omitempty"`
}

func (o *ResponseBodyFunctions) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *ResponseBodyFunctions) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *ResponseBodyFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

func (o *ResponseBodyFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *ResponseBodyFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

type GetDeploymentRoutes3 struct {
	Src        string  `json:"src"`
	Continue   bool    `json:"continue"`
	Middleware float64 `json:"middleware"`
}

func (o *GetDeploymentRoutes3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *GetDeploymentRoutes3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *GetDeploymentRoutes3) GetMiddleware() float64 {
	if o == nil {
		return 0.0
	}
	return o.Middleware
}

type GetDeploymentRoutesHandle string

const (
	GetDeploymentRoutesHandleError      GetDeploymentRoutesHandle = "error"
	GetDeploymentRoutesHandleFilesystem GetDeploymentRoutesHandle = "filesystem"
	GetDeploymentRoutesHandleHit        GetDeploymentRoutesHandle = "hit"
	GetDeploymentRoutesHandleMiss       GetDeploymentRoutesHandle = "miss"
	GetDeploymentRoutesHandleRewrite    GetDeploymentRoutesHandle = "rewrite"
	GetDeploymentRoutesHandleResource   GetDeploymentRoutesHandle = "resource"
)

func (e GetDeploymentRoutesHandle) ToPointer() *GetDeploymentRoutesHandle {
	return &e
}
func (e *GetDeploymentRoutesHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "rewrite":
		fallthrough
	case "resource":
		*e = GetDeploymentRoutesHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentRoutesHandle: %v", v)
	}
}

type GetDeploymentRoutes2 struct {
	Handle GetDeploymentRoutesHandle `json:"handle"`
	Src    *string                   `json:"src,omitempty"`
	Dest   *string                   `json:"dest,omitempty"`
	Status *float64                  `json:"status,omitempty"`
}

func (o *GetDeploymentRoutes2) GetHandle() GetDeploymentRoutesHandle {
	if o == nil {
		return GetDeploymentRoutesHandle("")
	}
	return o.Handle
}

func (o *GetDeploymentRoutes2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetDeploymentRoutes2) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetDeploymentRoutes2) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetDeploymentHasType string

const (
	GetDeploymentHasTypeHeader GetDeploymentHasType = "header"
	GetDeploymentHasTypeCookie GetDeploymentHasType = "cookie"
	GetDeploymentHasTypeQuery  GetDeploymentHasType = "query"
)

func (e GetDeploymentHasType) ToPointer() *GetDeploymentHasType {
	return &e
}
func (e *GetDeploymentHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeploymentHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentHasType: %v", v)
	}
}

type GetDeploymentHas2 struct {
	Type  GetDeploymentHasType `json:"type"`
	Key   string               `json:"key"`
	Value *string              `json:"value,omitempty"`
}

func (o *GetDeploymentHas2) GetType() GetDeploymentHasType {
	if o == nil {
		return GetDeploymentHasType("")
	}
	return o.Type
}

func (o *GetDeploymentHas2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetDeploymentHas2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetDeploymentHasDeploymentsType string

const (
	GetDeploymentHasDeploymentsTypeHost GetDeploymentHasDeploymentsType = "host"
)

func (e GetDeploymentHasDeploymentsType) ToPointer() *GetDeploymentHasDeploymentsType {
	return &e
}
func (e *GetDeploymentHasDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeploymentHasDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentHasDeploymentsType: %v", v)
	}
}

type GetDeploymentHas1 struct {
	Type  GetDeploymentHasDeploymentsType `json:"type"`
	Value string                          `json:"value"`
}

func (o *GetDeploymentHas1) GetType() GetDeploymentHasDeploymentsType {
	if o == nil {
		return GetDeploymentHasDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeploymentHas1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetDeploymentRoutesHasType string

const (
	GetDeploymentRoutesHasTypeGetDeploymentHas1 GetDeploymentRoutesHasType = "getDeployment_has_1"
	GetDeploymentRoutesHasTypeGetDeploymentHas2 GetDeploymentRoutesHasType = "getDeployment_has_2"
)

type GetDeploymentRoutesHas struct {
	GetDeploymentHas1 *GetDeploymentHas1
	GetDeploymentHas2 *GetDeploymentHas2

	Type GetDeploymentRoutesHasType
}

func CreateGetDeploymentRoutesHasGetDeploymentHas1(getDeploymentHas1 GetDeploymentHas1) GetDeploymentRoutesHas {
	typ := GetDeploymentRoutesHasTypeGetDeploymentHas1

	return GetDeploymentRoutesHas{
		GetDeploymentHas1: &getDeploymentHas1,
		Type:              typ,
	}
}

func CreateGetDeploymentRoutesHasGetDeploymentHas2(getDeploymentHas2 GetDeploymentHas2) GetDeploymentRoutesHas {
	typ := GetDeploymentRoutesHasTypeGetDeploymentHas2

	return GetDeploymentRoutesHas{
		GetDeploymentHas2: &getDeploymentHas2,
		Type:              typ,
	}
}

func (u *GetDeploymentRoutesHas) UnmarshalJSON(data []byte) error {

	var getDeploymentHas1 GetDeploymentHas1 = GetDeploymentHas1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentHas1, "", true, true); err == nil {
		u.GetDeploymentHas1 = &getDeploymentHas1
		u.Type = GetDeploymentRoutesHasTypeGetDeploymentHas1
		return nil
	}

	var getDeploymentHas2 GetDeploymentHas2 = GetDeploymentHas2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentHas2, "", true, true); err == nil {
		u.GetDeploymentHas2 = &getDeploymentHas2
		u.Type = GetDeploymentRoutesHasTypeGetDeploymentHas2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRoutesHas", string(data))
}

func (u GetDeploymentRoutesHas) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentHas1 != nil {
		return utils.MarshalJSON(u.GetDeploymentHas1, "", true)
	}

	if u.GetDeploymentHas2 != nil {
		return utils.MarshalJSON(u.GetDeploymentHas2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRoutesHas: all fields are null")
}

type GetDeploymentMissingType string

const (
	GetDeploymentMissingTypeHeader GetDeploymentMissingType = "header"
	GetDeploymentMissingTypeCookie GetDeploymentMissingType = "cookie"
	GetDeploymentMissingTypeQuery  GetDeploymentMissingType = "query"
)

func (e GetDeploymentMissingType) ToPointer() *GetDeploymentMissingType {
	return &e
}
func (e *GetDeploymentMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeploymentMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentMissingType: %v", v)
	}
}

type GetDeploymentMissing2 struct {
	Type  GetDeploymentMissingType `json:"type"`
	Key   string                   `json:"key"`
	Value *string                  `json:"value,omitempty"`
}

func (o *GetDeploymentMissing2) GetType() GetDeploymentMissingType {
	if o == nil {
		return GetDeploymentMissingType("")
	}
	return o.Type
}

func (o *GetDeploymentMissing2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetDeploymentMissing2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetDeploymentMissingDeploymentsType string

const (
	GetDeploymentMissingDeploymentsTypeHost GetDeploymentMissingDeploymentsType = "host"
)

func (e GetDeploymentMissingDeploymentsType) ToPointer() *GetDeploymentMissingDeploymentsType {
	return &e
}
func (e *GetDeploymentMissingDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeploymentMissingDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentMissingDeploymentsType: %v", v)
	}
}

type GetDeploymentMissing1 struct {
	Type  GetDeploymentMissingDeploymentsType `json:"type"`
	Value string                              `json:"value"`
}

func (o *GetDeploymentMissing1) GetType() GetDeploymentMissingDeploymentsType {
	if o == nil {
		return GetDeploymentMissingDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeploymentMissing1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetDeploymentRoutesMissingType string

const (
	GetDeploymentRoutesMissingTypeGetDeploymentMissing1 GetDeploymentRoutesMissingType = "getDeployment_missing_1"
	GetDeploymentRoutesMissingTypeGetDeploymentMissing2 GetDeploymentRoutesMissingType = "getDeployment_missing_2"
)

type GetDeploymentRoutesMissing struct {
	GetDeploymentMissing1 *GetDeploymentMissing1
	GetDeploymentMissing2 *GetDeploymentMissing2

	Type GetDeploymentRoutesMissingType
}

func CreateGetDeploymentRoutesMissingGetDeploymentMissing1(getDeploymentMissing1 GetDeploymentMissing1) GetDeploymentRoutesMissing {
	typ := GetDeploymentRoutesMissingTypeGetDeploymentMissing1

	return GetDeploymentRoutesMissing{
		GetDeploymentMissing1: &getDeploymentMissing1,
		Type:                  typ,
	}
}

func CreateGetDeploymentRoutesMissingGetDeploymentMissing2(getDeploymentMissing2 GetDeploymentMissing2) GetDeploymentRoutesMissing {
	typ := GetDeploymentRoutesMissingTypeGetDeploymentMissing2

	return GetDeploymentRoutesMissing{
		GetDeploymentMissing2: &getDeploymentMissing2,
		Type:                  typ,
	}
}

func (u *GetDeploymentRoutesMissing) UnmarshalJSON(data []byte) error {

	var getDeploymentMissing1 GetDeploymentMissing1 = GetDeploymentMissing1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMissing1, "", true, true); err == nil {
		u.GetDeploymentMissing1 = &getDeploymentMissing1
		u.Type = GetDeploymentRoutesMissingTypeGetDeploymentMissing1
		return nil
	}

	var getDeploymentMissing2 GetDeploymentMissing2 = GetDeploymentMissing2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMissing2, "", true, true); err == nil {
		u.GetDeploymentMissing2 = &getDeploymentMissing2
		u.Type = GetDeploymentRoutesMissingTypeGetDeploymentMissing2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRoutesMissing", string(data))
}

func (u GetDeploymentRoutesMissing) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentMissing1 != nil {
		return utils.MarshalJSON(u.GetDeploymentMissing1, "", true)
	}

	if u.GetDeploymentMissing2 != nil {
		return utils.MarshalJSON(u.GetDeploymentMissing2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRoutesMissing: all fields are null")
}

type GetDeploymentRoutesLocale struct {
	Redirect map[string]string `json:"redirect,omitempty"`
	Cookie   *string           `json:"cookie,omitempty"`
}

func (o *GetDeploymentRoutesLocale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetDeploymentRoutesLocale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

type GetDeploymentRoutes1 struct {
	Src           string                       `json:"src"`
	Dest          *string                      `json:"dest,omitempty"`
	Headers       map[string]string            `json:"headers,omitempty"`
	Methods       []string                     `json:"methods,omitempty"`
	Continue      *bool                        `json:"continue,omitempty"`
	Override      *bool                        `json:"override,omitempty"`
	CaseSensitive *bool                        `json:"caseSensitive,omitempty"`
	Check         *bool                        `json:"check,omitempty"`
	Important     *bool                        `json:"important,omitempty"`
	Status        *float64                     `json:"status,omitempty"`
	Has           []GetDeploymentRoutesHas     `json:"has,omitempty"`
	Missing       []GetDeploymentRoutesMissing `json:"missing,omitempty"`
	Locale        *GetDeploymentRoutesLocale   `json:"locale,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string `json:"middlewareRawSrc,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *float64 `json:"middleware,omitempty"`
}

func (o *GetDeploymentRoutes1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *GetDeploymentRoutes1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetDeploymentRoutes1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetDeploymentRoutes1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *GetDeploymentRoutes1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *GetDeploymentRoutes1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *GetDeploymentRoutes1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *GetDeploymentRoutes1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *GetDeploymentRoutes1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *GetDeploymentRoutes1) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetDeploymentRoutes1) GetHas() []GetDeploymentRoutesHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *GetDeploymentRoutes1) GetMissing() []GetDeploymentRoutesMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *GetDeploymentRoutes1) GetLocale() *GetDeploymentRoutesLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetDeploymentRoutes1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *GetDeploymentRoutes1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *GetDeploymentRoutes1) GetMiddleware() *float64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

type ResponseBodyRoutesType string

const (
	ResponseBodyRoutesTypeGetDeploymentRoutes1 ResponseBodyRoutesType = "getDeployment_routes_1"
	ResponseBodyRoutesTypeGetDeploymentRoutes2 ResponseBodyRoutesType = "getDeployment_routes_2"
	ResponseBodyRoutesTypeGetDeploymentRoutes3 ResponseBodyRoutesType = "getDeployment_routes_3"
)

type ResponseBodyRoutes struct {
	GetDeploymentRoutes1 *GetDeploymentRoutes1
	GetDeploymentRoutes2 *GetDeploymentRoutes2
	GetDeploymentRoutes3 *GetDeploymentRoutes3

	Type ResponseBodyRoutesType
}

func CreateResponseBodyRoutesGetDeploymentRoutes1(getDeploymentRoutes1 GetDeploymentRoutes1) ResponseBodyRoutes {
	typ := ResponseBodyRoutesTypeGetDeploymentRoutes1

	return ResponseBodyRoutes{
		GetDeploymentRoutes1: &getDeploymentRoutes1,
		Type:                 typ,
	}
}

func CreateResponseBodyRoutesGetDeploymentRoutes2(getDeploymentRoutes2 GetDeploymentRoutes2) ResponseBodyRoutes {
	typ := ResponseBodyRoutesTypeGetDeploymentRoutes2

	return ResponseBodyRoutes{
		GetDeploymentRoutes2: &getDeploymentRoutes2,
		Type:                 typ,
	}
}

func CreateResponseBodyRoutesGetDeploymentRoutes3(getDeploymentRoutes3 GetDeploymentRoutes3) ResponseBodyRoutes {
	typ := ResponseBodyRoutesTypeGetDeploymentRoutes3

	return ResponseBodyRoutes{
		GetDeploymentRoutes3: &getDeploymentRoutes3,
		Type:                 typ,
	}
}

func (u *ResponseBodyRoutes) UnmarshalJSON(data []byte) error {

	var getDeploymentRoutes3 GetDeploymentRoutes3 = GetDeploymentRoutes3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentRoutes3, "", true, true); err == nil {
		u.GetDeploymentRoutes3 = &getDeploymentRoutes3
		u.Type = ResponseBodyRoutesTypeGetDeploymentRoutes3
		return nil
	}

	var getDeploymentRoutes2 GetDeploymentRoutes2 = GetDeploymentRoutes2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentRoutes2, "", true, true); err == nil {
		u.GetDeploymentRoutes2 = &getDeploymentRoutes2
		u.Type = ResponseBodyRoutesTypeGetDeploymentRoutes2
		return nil
	}

	var getDeploymentRoutes1 GetDeploymentRoutes1 = GetDeploymentRoutes1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentRoutes1, "", true, true); err == nil {
		u.GetDeploymentRoutes1 = &getDeploymentRoutes1
		u.Type = ResponseBodyRoutesTypeGetDeploymentRoutes1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyRoutes", string(data))
}

func (u ResponseBodyRoutes) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentRoutes1 != nil {
		return utils.MarshalJSON(u.GetDeploymentRoutes1, "", true)
	}

	if u.GetDeploymentRoutes2 != nil {
		return utils.MarshalJSON(u.GetDeploymentRoutes2, "", true)
	}

	if u.GetDeploymentRoutes3 != nil {
		return utils.MarshalJSON(u.GetDeploymentRoutes3, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyRoutes: all fields are null")
}

type GetDeploymentGitRepoDeploymentsType string

const (
	GetDeploymentGitRepoDeploymentsTypeBitbucket GetDeploymentGitRepoDeploymentsType = "bitbucket"
)

func (e GetDeploymentGitRepoDeploymentsType) ToPointer() *GetDeploymentGitRepoDeploymentsType {
	return &e
}
func (e *GetDeploymentGitRepoDeploymentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitRepoDeploymentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoDeploymentsType: %v", v)
	}
}

type GetDeploymentGitRepoOwnerType string

const (
	GetDeploymentGitRepoOwnerTypeTeam GetDeploymentGitRepoOwnerType = "team"
	GetDeploymentGitRepoOwnerTypeUser GetDeploymentGitRepoOwnerType = "user"
)

func (e GetDeploymentGitRepoOwnerType) ToPointer() *GetDeploymentGitRepoOwnerType {
	return &e
}
func (e *GetDeploymentGitRepoOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentGitRepoOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoOwnerType: %v", v)
	}
}

type GetDeploymentGitRepo3 struct {
	Owner         string                              `json:"owner"`
	RepoUUID      string                              `json:"repoUuid"`
	Slug          string                              `json:"slug"`
	Type          GetDeploymentGitRepoDeploymentsType `json:"type"`
	WorkspaceUUID string                              `json:"workspaceUuid"`
	Path          string                              `json:"path"`
	DefaultBranch string                              `json:"defaultBranch"`
	Name          string                              `json:"name"`
	Private       bool                                `json:"private"`
	OwnerType     GetDeploymentGitRepoOwnerType       `json:"ownerType"`
}

func (o *GetDeploymentGitRepo3) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentGitRepo3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentGitRepo3) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentGitRepo3) GetType() GetDeploymentGitRepoDeploymentsType {
	if o == nil {
		return GetDeploymentGitRepoDeploymentsType("")
	}
	return o.Type
}

func (o *GetDeploymentGitRepo3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitRepo3) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentGitRepo3) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentGitRepo3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentGitRepo3) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentGitRepo3) GetOwnerType() GetDeploymentGitRepoOwnerType {
	if o == nil {
		return GetDeploymentGitRepoOwnerType("")
	}
	return o.OwnerType
}

type GetDeploymentGitRepoType string

const (
	GetDeploymentGitRepoTypeGithub GetDeploymentGitRepoType = "github"
)

func (e GetDeploymentGitRepoType) ToPointer() *GetDeploymentGitRepoType {
	return &e
}
func (e *GetDeploymentGitRepoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitRepoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoType: %v", v)
	}
}

type GetDeploymentGitRepoDeploymentsResponseOwnerType string

const (
	GetDeploymentGitRepoDeploymentsResponseOwnerTypeTeam GetDeploymentGitRepoDeploymentsResponseOwnerType = "team"
	GetDeploymentGitRepoDeploymentsResponseOwnerTypeUser GetDeploymentGitRepoDeploymentsResponseOwnerType = "user"
)

func (e GetDeploymentGitRepoDeploymentsResponseOwnerType) ToPointer() *GetDeploymentGitRepoDeploymentsResponseOwnerType {
	return &e
}
func (e *GetDeploymentGitRepoDeploymentsResponseOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentGitRepoDeploymentsResponseOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoDeploymentsResponseOwnerType: %v", v)
	}
}

type GetDeploymentGitRepo2 struct {
	Org           string                                           `json:"org"`
	Repo          string                                           `json:"repo"`
	RepoID        float64                                          `json:"repoId"`
	Type          GetDeploymentGitRepoType                         `json:"type"`
	RepoOwnerID   float64                                          `json:"repoOwnerId"`
	Path          string                                           `json:"path"`
	DefaultBranch string                                           `json:"defaultBranch"`
	Name          string                                           `json:"name"`
	Private       bool                                             `json:"private"`
	OwnerType     GetDeploymentGitRepoDeploymentsResponseOwnerType `json:"ownerType"`
}

func (o *GetDeploymentGitRepo2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitRepo2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitRepo2) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitRepo2) GetType() GetDeploymentGitRepoType {
	if o == nil {
		return GetDeploymentGitRepoType("")
	}
	return o.Type
}

func (o *GetDeploymentGitRepo2) GetRepoOwnerID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoOwnerID
}

func (o *GetDeploymentGitRepo2) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentGitRepo2) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentGitRepo2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentGitRepo2) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentGitRepo2) GetOwnerType() GetDeploymentGitRepoDeploymentsResponseOwnerType {
	if o == nil {
		return GetDeploymentGitRepoDeploymentsResponseOwnerType("")
	}
	return o.OwnerType
}

type GetDeploymentGitRepoDeploymentsResponseType string

const (
	GetDeploymentGitRepoDeploymentsResponseTypeGitlab GetDeploymentGitRepoDeploymentsResponseType = "gitlab"
)

func (e GetDeploymentGitRepoDeploymentsResponseType) ToPointer() *GetDeploymentGitRepoDeploymentsResponseType {
	return &e
}
func (e *GetDeploymentGitRepoDeploymentsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitRepoDeploymentsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoDeploymentsResponseType: %v", v)
	}
}

type GetDeploymentGitRepoDeploymentsOwnerType string

const (
	GetDeploymentGitRepoDeploymentsOwnerTypeTeam GetDeploymentGitRepoDeploymentsOwnerType = "team"
	GetDeploymentGitRepoDeploymentsOwnerTypeUser GetDeploymentGitRepoDeploymentsOwnerType = "user"
)

func (e GetDeploymentGitRepoDeploymentsOwnerType) ToPointer() *GetDeploymentGitRepoDeploymentsOwnerType {
	return &e
}
func (e *GetDeploymentGitRepoDeploymentsOwnerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentGitRepoDeploymentsOwnerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoDeploymentsOwnerType: %v", v)
	}
}

type GetDeploymentGitRepo1 struct {
	Namespace     string                                      `json:"namespace"`
	ProjectID     float64                                     `json:"projectId"`
	Type          GetDeploymentGitRepoDeploymentsResponseType `json:"type"`
	URL           string                                      `json:"url"`
	Path          string                                      `json:"path"`
	DefaultBranch string                                      `json:"defaultBranch"`
	Name          string                                      `json:"name"`
	Private       bool                                        `json:"private"`
	OwnerType     GetDeploymentGitRepoDeploymentsOwnerType    `json:"ownerType"`
}

func (o *GetDeploymentGitRepo1) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *GetDeploymentGitRepo1) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *GetDeploymentGitRepo1) GetType() GetDeploymentGitRepoDeploymentsResponseType {
	if o == nil {
		return GetDeploymentGitRepoDeploymentsResponseType("")
	}
	return o.Type
}

func (o *GetDeploymentGitRepo1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetDeploymentGitRepo1) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentGitRepo1) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentGitRepo1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentGitRepo1) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentGitRepo1) GetOwnerType() GetDeploymentGitRepoDeploymentsOwnerType {
	if o == nil {
		return GetDeploymentGitRepoDeploymentsOwnerType("")
	}
	return o.OwnerType
}

type ResponseBodyGitRepoType string

const (
	ResponseBodyGitRepoTypeGetDeploymentGitRepo1 ResponseBodyGitRepoType = "getDeployment_gitRepo_1"
	ResponseBodyGitRepoTypeGetDeploymentGitRepo2 ResponseBodyGitRepoType = "getDeployment_gitRepo_2"
	ResponseBodyGitRepoTypeGetDeploymentGitRepo3 ResponseBodyGitRepoType = "getDeployment_gitRepo_3"
)

type ResponseBodyGitRepo struct {
	GetDeploymentGitRepo1 *GetDeploymentGitRepo1
	GetDeploymentGitRepo2 *GetDeploymentGitRepo2
	GetDeploymentGitRepo3 *GetDeploymentGitRepo3

	Type ResponseBodyGitRepoType
}

func CreateResponseBodyGitRepoGetDeploymentGitRepo1(getDeploymentGitRepo1 GetDeploymentGitRepo1) ResponseBodyGitRepo {
	typ := ResponseBodyGitRepoTypeGetDeploymentGitRepo1

	return ResponseBodyGitRepo{
		GetDeploymentGitRepo1: &getDeploymentGitRepo1,
		Type:                  typ,
	}
}

func CreateResponseBodyGitRepoGetDeploymentGitRepo2(getDeploymentGitRepo2 GetDeploymentGitRepo2) ResponseBodyGitRepo {
	typ := ResponseBodyGitRepoTypeGetDeploymentGitRepo2

	return ResponseBodyGitRepo{
		GetDeploymentGitRepo2: &getDeploymentGitRepo2,
		Type:                  typ,
	}
}

func CreateResponseBodyGitRepoGetDeploymentGitRepo3(getDeploymentGitRepo3 GetDeploymentGitRepo3) ResponseBodyGitRepo {
	typ := ResponseBodyGitRepoTypeGetDeploymentGitRepo3

	return ResponseBodyGitRepo{
		GetDeploymentGitRepo3: &getDeploymentGitRepo3,
		Type:                  typ,
	}
}

func (u *ResponseBodyGitRepo) UnmarshalJSON(data []byte) error {

	var getDeploymentGitRepo1 GetDeploymentGitRepo1 = GetDeploymentGitRepo1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitRepo1, "", true, true); err == nil {
		u.GetDeploymentGitRepo1 = &getDeploymentGitRepo1
		u.Type = ResponseBodyGitRepoTypeGetDeploymentGitRepo1
		return nil
	}

	var getDeploymentGitRepo2 GetDeploymentGitRepo2 = GetDeploymentGitRepo2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitRepo2, "", true, true); err == nil {
		u.GetDeploymentGitRepo2 = &getDeploymentGitRepo2
		u.Type = ResponseBodyGitRepoTypeGetDeploymentGitRepo2
		return nil
	}

	var getDeploymentGitRepo3 GetDeploymentGitRepo3 = GetDeploymentGitRepo3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitRepo3, "", true, true); err == nil {
		u.GetDeploymentGitRepo3 = &getDeploymentGitRepo3
		u.Type = ResponseBodyGitRepoTypeGetDeploymentGitRepo3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyGitRepo", string(data))
}

func (u ResponseBodyGitRepo) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentGitRepo1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitRepo1, "", true)
	}

	if u.GetDeploymentGitRepo2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitRepo2, "", true)
	}

	if u.GetDeploymentGitRepo3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitRepo3, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyGitRepo: all fields are null")
}

// GetDeploymentFlags2 - Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
type GetDeploymentFlags2 struct {
}

type GetDeploymentFlagsOptions struct {
	Value *components.FlagJSONValue `json:"value"`
	Label *string                   `json:"label,omitempty"`
}

func (o *GetDeploymentFlagsOptions) GetValue() *components.FlagJSONValue {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetDeploymentFlagsOptions) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

type GetDeploymentFlagsDefinitions struct {
	Options     []GetDeploymentFlagsOptions `json:"options,omitempty"`
	URL         *string                     `json:"url,omitempty"`
	Description *string                     `json:"description,omitempty"`
}

func (o *GetDeploymentFlagsDefinitions) GetOptions() []GetDeploymentFlagsOptions {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *GetDeploymentFlagsDefinitions) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *GetDeploymentFlagsDefinitions) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// GetDeploymentFlags1 - Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
type GetDeploymentFlags1 struct {
	Definitions map[string]GetDeploymentFlagsDefinitions `json:"definitions"`
}

func (o *GetDeploymentFlags1) GetDefinitions() map[string]GetDeploymentFlagsDefinitions {
	if o == nil {
		return map[string]GetDeploymentFlagsDefinitions{}
	}
	return o.Definitions
}

type ResponseBodyFlagsType string

const (
	ResponseBodyFlagsTypeGetDeploymentFlags1        ResponseBodyFlagsType = "getDeployment_flags_1"
	ResponseBodyFlagsTypeArrayOfGetDeploymentFlags2 ResponseBodyFlagsType = "arrayOfGetDeploymentFlags2"
)

type ResponseBodyFlags struct {
	GetDeploymentFlags1        *GetDeploymentFlags1
	ArrayOfGetDeploymentFlags2 []GetDeploymentFlags2

	Type ResponseBodyFlagsType
}

func CreateResponseBodyFlagsGetDeploymentFlags1(getDeploymentFlags1 GetDeploymentFlags1) ResponseBodyFlags {
	typ := ResponseBodyFlagsTypeGetDeploymentFlags1

	return ResponseBodyFlags{
		GetDeploymentFlags1: &getDeploymentFlags1,
		Type:                typ,
	}
}

func CreateResponseBodyFlagsArrayOfGetDeploymentFlags2(arrayOfGetDeploymentFlags2 []GetDeploymentFlags2) ResponseBodyFlags {
	typ := ResponseBodyFlagsTypeArrayOfGetDeploymentFlags2

	return ResponseBodyFlags{
		ArrayOfGetDeploymentFlags2: arrayOfGetDeploymentFlags2,
		Type:                       typ,
	}
}

func (u *ResponseBodyFlags) UnmarshalJSON(data []byte) error {

	var getDeploymentFlags1 GetDeploymentFlags1 = GetDeploymentFlags1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentFlags1, "", true, true); err == nil {
		u.GetDeploymentFlags1 = &getDeploymentFlags1
		u.Type = ResponseBodyFlagsTypeGetDeploymentFlags1
		return nil
	}

	var arrayOfGetDeploymentFlags2 []GetDeploymentFlags2 = []GetDeploymentFlags2{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetDeploymentFlags2, "", true, true); err == nil {
		u.ArrayOfGetDeploymentFlags2 = arrayOfGetDeploymentFlags2
		u.Type = ResponseBodyFlagsTypeArrayOfGetDeploymentFlags2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyFlags", string(data))
}

func (u ResponseBodyFlags) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentFlags1 != nil {
		return utils.MarshalJSON(u.GetDeploymentFlags1, "", true)
	}

	if u.ArrayOfGetDeploymentFlags2 != nil {
		return utils.MarshalJSON(u.ArrayOfGetDeploymentFlags2, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyFlags: all fields are null")
}

// GetDeploymentMicrofrontendsApplications - A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment.
type GetDeploymentMicrofrontendsApplications struct {
	// This is the production alias, it will always show the most up to date of each application.
	ProductionHost string `json:"productionHost"`
	// Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used.
	DeploymentAlias *string `json:"deploymentAlias,omitempty"`
	DeploymentHost  *string `json:"deploymentHost,omitempty"`
}

func (o *GetDeploymentMicrofrontendsApplications) GetProductionHost() string {
	if o == nil {
		return ""
	}
	return o.ProductionHost
}

func (o *GetDeploymentMicrofrontendsApplications) GetDeploymentAlias() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentAlias
}

func (o *GetDeploymentMicrofrontendsApplications) GetDeploymentHost() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentHost
}

type GetDeploymentMicrofrontends2 struct {
	// A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment.
	Applications map[string]GetDeploymentMicrofrontendsApplications `json:"applications,omitempty"`
	IsDefaultApp bool                                               `json:"isDefaultApp"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
}

func (o *GetDeploymentMicrofrontends2) GetApplications() map[string]GetDeploymentMicrofrontendsApplications {
	if o == nil {
		return nil
	}
	return o.Applications
}

func (o *GetDeploymentMicrofrontends2) GetIsDefaultApp() bool {
	if o == nil {
		return false
	}
	return o.IsDefaultApp
}

func (o *GetDeploymentMicrofrontends2) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *GetDeploymentMicrofrontends2) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

type GetDeploymentMicrofrontends1 struct {
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
}

func (o *GetDeploymentMicrofrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *GetDeploymentMicrofrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *GetDeploymentMicrofrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

type ResponseBodyMicrofrontendsType string

const (
	ResponseBodyMicrofrontendsTypeGetDeploymentMicrofrontends1 ResponseBodyMicrofrontendsType = "getDeployment_microfrontends_1"
	ResponseBodyMicrofrontendsTypeGetDeploymentMicrofrontends2 ResponseBodyMicrofrontendsType = "getDeployment_microfrontends_2"
)

type ResponseBodyMicrofrontends struct {
	GetDeploymentMicrofrontends1 *GetDeploymentMicrofrontends1
	GetDeploymentMicrofrontends2 *GetDeploymentMicrofrontends2

	Type ResponseBodyMicrofrontendsType
}

func CreateResponseBodyMicrofrontendsGetDeploymentMicrofrontends1(getDeploymentMicrofrontends1 GetDeploymentMicrofrontends1) ResponseBodyMicrofrontends {
	typ := ResponseBodyMicrofrontendsTypeGetDeploymentMicrofrontends1

	return ResponseBodyMicrofrontends{
		GetDeploymentMicrofrontends1: &getDeploymentMicrofrontends1,
		Type:                         typ,
	}
}

func CreateResponseBodyMicrofrontendsGetDeploymentMicrofrontends2(getDeploymentMicrofrontends2 GetDeploymentMicrofrontends2) ResponseBodyMicrofrontends {
	typ := ResponseBodyMicrofrontendsTypeGetDeploymentMicrofrontends2

	return ResponseBodyMicrofrontends{
		GetDeploymentMicrofrontends2: &getDeploymentMicrofrontends2,
		Type:                         typ,
	}
}

func (u *ResponseBodyMicrofrontends) UnmarshalJSON(data []byte) error {

	var getDeploymentMicrofrontends1 GetDeploymentMicrofrontends1 = GetDeploymentMicrofrontends1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMicrofrontends1, "", true, true); err == nil {
		u.GetDeploymentMicrofrontends1 = &getDeploymentMicrofrontends1
		u.Type = ResponseBodyMicrofrontendsTypeGetDeploymentMicrofrontends1
		return nil
	}

	var getDeploymentMicrofrontends2 GetDeploymentMicrofrontends2 = GetDeploymentMicrofrontends2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMicrofrontends2, "", true, true); err == nil {
		u.GetDeploymentMicrofrontends2 = &getDeploymentMicrofrontends2
		u.Type = ResponseBodyMicrofrontendsTypeGetDeploymentMicrofrontends2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyMicrofrontends", string(data))
}

func (u ResponseBodyMicrofrontends) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentMicrofrontends1 != nil {
		return utils.MarshalJSON(u.GetDeploymentMicrofrontends1, "", true)
	}

	if u.GetDeploymentMicrofrontends2 != nil {
		return utils.MarshalJSON(u.GetDeploymentMicrofrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyMicrofrontends: all fields are null")
}

type ResponseBodyFunctionType string

const (
	ResponseBodyFunctionTypeFluid    ResponseBodyFunctionType = "fluid"
	ResponseBodyFunctionTypeStandard ResponseBodyFunctionType = "standard"
)

func (e ResponseBodyFunctionType) ToPointer() *ResponseBodyFunctionType {
	return &e
}
func (e *ResponseBodyFunctionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fluid":
		fallthrough
	case "standard":
		*e = ResponseBodyFunctionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyFunctionType: %v", v)
	}
}

type ResponseBodyFunctionMemoryType string

const (
	ResponseBodyFunctionMemoryTypeStandard       ResponseBodyFunctionMemoryType = "standard"
	ResponseBodyFunctionMemoryTypeStandardLegacy ResponseBodyFunctionMemoryType = "standard_legacy"
	ResponseBodyFunctionMemoryTypePerformance    ResponseBodyFunctionMemoryType = "performance"
)

func (e ResponseBodyFunctionMemoryType) ToPointer() *ResponseBodyFunctionMemoryType {
	return &e
}
func (e *ResponseBodyFunctionMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "standard_legacy":
		fallthrough
	case "performance":
		*e = ResponseBodyFunctionMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyFunctionMemoryType: %v", v)
	}
}

// ResponseBodyConfig - Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
type ResponseBodyConfig struct {
	Version                     *float64                       `json:"version,omitempty"`
	FunctionType                ResponseBodyFunctionType       `json:"functionType"`
	FunctionMemoryType          ResponseBodyFunctionMemoryType `json:"functionMemoryType"`
	FunctionTimeout             *float64                       `json:"functionTimeout"`
	SecureComputePrimaryRegion  *string                        `json:"secureComputePrimaryRegion"`
	SecureComputeFallbackRegion *string                        `json:"secureComputeFallbackRegion"`
}

func (o *ResponseBodyConfig) GetVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *ResponseBodyConfig) GetFunctionType() ResponseBodyFunctionType {
	if o == nil {
		return ResponseBodyFunctionType("")
	}
	return o.FunctionType
}

func (o *ResponseBodyConfig) GetFunctionMemoryType() ResponseBodyFunctionMemoryType {
	if o == nil {
		return ResponseBodyFunctionMemoryType("")
	}
	return o.FunctionMemoryType
}

func (o *ResponseBodyConfig) GetFunctionTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionTimeout
}

func (o *ResponseBodyConfig) GetSecureComputePrimaryRegion() *string {
	if o == nil {
		return nil
	}
	return o.SecureComputePrimaryRegion
}

func (o *ResponseBodyConfig) GetSecureComputeFallbackRegion() *string {
	if o == nil {
		return nil
	}
	return o.SecureComputeFallbackRegion
}

// GetDeploymentResponseBody1 - The deployment including both public and private information
type GetDeploymentResponseBody1 struct {
	AliasAssignedAt           *ResponseBodyAliasAssignedAt                `json:"aliasAssignedAt,omitempty"`
	AlwaysRefuseToBuild       *bool                                       `json:"alwaysRefuseToBuild,omitempty"`
	Build                     ResponseBodyBuild                           `json:"build"`
	BuildArtifactUrls         []string                                    `json:"buildArtifactUrls,omitempty"`
	Builds                    []ResponseBodyBuilds                        `json:"builds,omitempty"`
	Env                       []string                                    `json:"env"`
	InspectorURL              *string                                     `json:"inspectorUrl"`
	IsInConcurrentBuildsQueue bool                                        `json:"isInConcurrentBuildsQueue"`
	IsInSystemBuildsQueue     bool                                        `json:"isInSystemBuildsQueue"`
	ProjectSettings           ResponseBodyProjectSettings                 `json:"projectSettings"`
	ReadyStateReason          *string                                     `json:"readyStateReason,omitempty"`
	Integrations              *ResponseBodyIntegrations                   `json:"integrations,omitempty"`
	Images                    *ResponseBodyImages                         `json:"images,omitempty"`
	Alias                     []string                                    `json:"alias,omitempty"`
	AliasAssigned             bool                                        `json:"aliasAssigned"`
	BootedAt                  float64                                     `json:"bootedAt"`
	BuildingAt                float64                                     `json:"buildingAt"`
	BuildSkipped              bool                                        `json:"buildSkipped"`
	Creator                   ResponseBodyCreator                         `json:"creator"`
	InitReadyAt               *float64                                    `json:"initReadyAt,omitempty"`
	IsFirstBranchDeployment   *bool                                       `json:"isFirstBranchDeployment,omitempty"`
	Lambdas                   []GetDeploymentResponseBodyLambdas          `json:"lambdas,omitempty"`
	Public                    bool                                        `json:"public"`
	Ready                     *float64                                    `json:"ready,omitempty"`
	Status                    ResponseBodyStatus                          `json:"status"`
	Team                      *GetDeploymentResponseBodyTeam              `json:"team,omitempty"`
	UserAliases               []string                                    `json:"userAliases,omitempty"`
	PreviewCommentsEnabled    *bool                                       `json:"previewCommentsEnabled,omitempty"`
	TtyBuildLogs              *bool                                       `json:"ttyBuildLogs,omitempty"`
	CustomEnvironment         *GetDeploymentResponseBodyCustomEnvironment `json:"customEnvironment,omitempty"`
	AliasWarning              *GetDeploymentResponseBodyAliasWarning      `json:"aliasWarning,omitempty"`
	ID                        string                                      `json:"id"`
	Name                      string                                      `json:"name"`
	Type                      ResponseBodyType                            `json:"type"`
	CreatedAt                 float64                                     `json:"createdAt"`
	ReadyState                ResponseBodyReadyState                      `json:"readyState"`
	AliasError                *ResponseBodyAliasError                     `json:"aliasError,omitempty"`
	AliasFinal                *string                                     `json:"aliasFinal,omitempty"`
	// applies to custom domains only, defaults to `true`
	AutoAssignCustomDomains *bool                         `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                      `json:"automaticAliases,omitempty"`
	BuildErrorAt            *float64                      `json:"buildErrorAt,omitempty"`
	ChecksState             *ResponseBodyChecksState      `json:"checksState,omitempty"`
	ChecksConclusion        *ResponseBodyChecksConclusion `json:"checksConclusion,omitempty"`
	DeletedAt               *float64                      `json:"deletedAt,omitempty"`
	// Computed field that is only available for deployments with a microfrontend configuration.
	DefaultRoute *string  `json:"defaultRoute,omitempty"`
	CanceledAt   *float64 `json:"canceledAt,omitempty"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
	PassiveRegions    []string                            `json:"passiveRegions,omitempty"`
	GitSource         *GetDeploymentResponseBodyGitSource `json:"gitSource,omitempty"`
	Meta              map[string]string                   `json:"meta"`
	OriginCacheRegion *string                             `json:"originCacheRegion,omitempty"`
	Project           *ResponseBodyProject                `json:"project,omitempty"`
	// Since June 2023 Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - PROMOTED: has seen production traffic
	ReadySubstate          *ResponseBodyReadySubstate       `json:"readySubstate,omitempty"`
	Regions                []string                         `json:"regions"`
	SoftDeletedByRetention *bool                            `json:"softDeletedByRetention,omitempty"`
	Source                 *ResponseBodySource              `json:"source,omitempty"`
	Target                 *ResponseBodyTarget              `json:"target,omitempty"`
	UndeletedAt            *float64                         `json:"undeletedAt,omitempty"`
	URL                    string                           `json:"url"`
	Version                float64                          `json:"version"`
	OidcTokenClaims        *ResponseBodyOidcTokenClaims     `json:"oidcTokenClaims,omitempty"`
	ProjectID              string                           `json:"projectId"`
	Plan                   ResponseBodyPlan                 `json:"plan"`
	ConnectBuildsEnabled   *bool                            `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                          `json:"connectConfigurationId,omitempty"`
	CreatedIn              string                           `json:"createdIn"`
	Crons                  []ResponseBodyCrons              `json:"crons,omitempty"`
	Functions              map[string]ResponseBodyFunctions `json:"functions,omitempty"`
	MonorepoManager        *string                          `json:"monorepoManager,omitempty"`
	OwnerID                string                           `json:"ownerId"`
	// Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)
	PassiveConnectConfigurationID *string                     `json:"passiveConnectConfigurationId,omitempty"`
	Routes                        []ResponseBodyRoutes        `json:"routes"`
	GitRepo                       *ResponseBodyGitRepo        `json:"gitRepo,omitempty"`
	Flags                         *ResponseBodyFlags          `json:"flags,omitempty"`
	Microfrontends                *ResponseBodyMicrofrontends `json:"microfrontends,omitempty"`
	// Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
	Config *ResponseBodyConfig `json:"config,omitempty"`
}

func (o *GetDeploymentResponseBody1) GetAliasAssignedAt() *ResponseBodyAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *GetDeploymentResponseBody1) GetAlwaysRefuseToBuild() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysRefuseToBuild
}

func (o *GetDeploymentResponseBody1) GetBuild() ResponseBodyBuild {
	if o == nil {
		return ResponseBodyBuild{}
	}
	return o.Build
}

func (o *GetDeploymentResponseBody1) GetBuildArtifactUrls() []string {
	if o == nil {
		return nil
	}
	return o.BuildArtifactUrls
}

func (o *GetDeploymentResponseBody1) GetBuilds() []ResponseBodyBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetDeploymentResponseBody1) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *GetDeploymentResponseBody1) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *GetDeploymentResponseBody1) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *GetDeploymentResponseBody1) GetIsInSystemBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInSystemBuildsQueue
}

func (o *GetDeploymentResponseBody1) GetProjectSettings() ResponseBodyProjectSettings {
	if o == nil {
		return ResponseBodyProjectSettings{}
	}
	return o.ProjectSettings
}

func (o *GetDeploymentResponseBody1) GetReadyStateReason() *string {
	if o == nil {
		return nil
	}
	return o.ReadyStateReason
}

func (o *GetDeploymentResponseBody1) GetIntegrations() *ResponseBodyIntegrations {
	if o == nil {
		return nil
	}
	return o.Integrations
}

func (o *GetDeploymentResponseBody1) GetImages() *ResponseBodyImages {
	if o == nil {
		return nil
	}
	return o.Images
}

func (o *GetDeploymentResponseBody1) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *GetDeploymentResponseBody1) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *GetDeploymentResponseBody1) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *GetDeploymentResponseBody1) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *GetDeploymentResponseBody1) GetBuildSkipped() bool {
	if o == nil {
		return false
	}
	return o.BuildSkipped
}

func (o *GetDeploymentResponseBody1) GetCreator() ResponseBodyCreator {
	if o == nil {
		return ResponseBodyCreator{}
	}
	return o.Creator
}

func (o *GetDeploymentResponseBody1) GetInitReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.InitReadyAt
}

func (o *GetDeploymentResponseBody1) GetIsFirstBranchDeployment() *bool {
	if o == nil {
		return nil
	}
	return o.IsFirstBranchDeployment
}

func (o *GetDeploymentResponseBody1) GetLambdas() []GetDeploymentResponseBodyLambdas {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *GetDeploymentResponseBody1) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *GetDeploymentResponseBody1) GetReady() *float64 {
	if o == nil {
		return nil
	}
	return o.Ready
}

func (o *GetDeploymentResponseBody1) GetStatus() ResponseBodyStatus {
	if o == nil {
		return ResponseBodyStatus("")
	}
	return o.Status
}

func (o *GetDeploymentResponseBody1) GetTeam() *GetDeploymentResponseBodyTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetDeploymentResponseBody1) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *GetDeploymentResponseBody1) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetDeploymentResponseBody1) GetTtyBuildLogs() *bool {
	if o == nil {
		return nil
	}
	return o.TtyBuildLogs
}

func (o *GetDeploymentResponseBody1) GetCustomEnvironment() *GetDeploymentResponseBodyCustomEnvironment {
	if o == nil {
		return nil
	}
	return o.CustomEnvironment
}

func (o *GetDeploymentResponseBody1) GetAliasWarning() *GetDeploymentResponseBodyAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *GetDeploymentResponseBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentResponseBody1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentResponseBody1) GetType() ResponseBodyType {
	if o == nil {
		return ResponseBodyType("")
	}
	return o.Type
}

func (o *GetDeploymentResponseBody1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDeploymentResponseBody1) GetReadyState() ResponseBodyReadyState {
	if o == nil {
		return ResponseBodyReadyState("")
	}
	return o.ReadyState
}

func (o *GetDeploymentResponseBody1) GetAliasError() *ResponseBodyAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetDeploymentResponseBody1) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetDeploymentResponseBody1) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetDeploymentResponseBody1) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetDeploymentResponseBody1) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *GetDeploymentResponseBody1) GetChecksState() *ResponseBodyChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetDeploymentResponseBody1) GetChecksConclusion() *ResponseBodyChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetDeploymentResponseBody1) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetDeploymentResponseBody1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *GetDeploymentResponseBody1) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetDeploymentResponseBody1) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *GetDeploymentResponseBody1) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *GetDeploymentResponseBody1) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *GetDeploymentResponseBody1) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *GetDeploymentResponseBody1) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *GetDeploymentResponseBody1) GetGitSource() *GetDeploymentResponseBodyGitSource {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *GetDeploymentResponseBody1) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *GetDeploymentResponseBody1) GetOriginCacheRegion() *string {
	if o == nil {
		return nil
	}
	return o.OriginCacheRegion
}

func (o *GetDeploymentResponseBody1) GetProject() *ResponseBodyProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDeploymentResponseBody1) GetReadySubstate() *ResponseBodyReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetDeploymentResponseBody1) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *GetDeploymentResponseBody1) GetSoftDeletedByRetention() *bool {
	if o == nil {
		return nil
	}
	return o.SoftDeletedByRetention
}

func (o *GetDeploymentResponseBody1) GetSource() *ResponseBodySource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetDeploymentResponseBody1) GetTarget() *ResponseBodyTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetDeploymentResponseBody1) GetUndeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UndeletedAt
}

func (o *GetDeploymentResponseBody1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetDeploymentResponseBody1) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *GetDeploymentResponseBody1) GetOidcTokenClaims() *ResponseBodyOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *GetDeploymentResponseBody1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetDeploymentResponseBody1) GetPlan() ResponseBodyPlan {
	if o == nil {
		return ResponseBodyPlan("")
	}
	return o.Plan
}

func (o *GetDeploymentResponseBody1) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetDeploymentResponseBody1) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetDeploymentResponseBody1) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetDeploymentResponseBody1) GetCrons() []ResponseBodyCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *GetDeploymentResponseBody1) GetFunctions() map[string]ResponseBodyFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *GetDeploymentResponseBody1) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetDeploymentResponseBody1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetDeploymentResponseBody1) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *GetDeploymentResponseBody1) GetRoutes() []ResponseBodyRoutes {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *GetDeploymentResponseBody1) GetGitRepo() *ResponseBodyGitRepo {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *GetDeploymentResponseBody1) GetFlags() *ResponseBodyFlags {
	if o == nil {
		return nil
	}
	return o.Flags
}

func (o *GetDeploymentResponseBody1) GetMicrofrontends() *ResponseBodyMicrofrontends {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *GetDeploymentResponseBody1) GetConfig() *ResponseBodyConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

type GetDeploymentResponseBodyUnionType string

const (
	GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody1 GetDeploymentResponseBodyUnionType = "getDeployment_responseBody_1"
	GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody2 GetDeploymentResponseBodyUnionType = "getDeployment_responseBody_2"
)

// GetDeploymentResponseBody - The deployment including only public information
// The deployment including both public and private information
type GetDeploymentResponseBody struct {
	GetDeploymentResponseBody1 *GetDeploymentResponseBody1
	GetDeploymentResponseBody2 *GetDeploymentResponseBody2

	Type GetDeploymentResponseBodyUnionType
}

func CreateGetDeploymentResponseBodyGetDeploymentResponseBody1(getDeploymentResponseBody1 GetDeploymentResponseBody1) GetDeploymentResponseBody {
	typ := GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody1

	return GetDeploymentResponseBody{
		GetDeploymentResponseBody1: &getDeploymentResponseBody1,
		Type:                       typ,
	}
}

func CreateGetDeploymentResponseBodyGetDeploymentResponseBody2(getDeploymentResponseBody2 GetDeploymentResponseBody2) GetDeploymentResponseBody {
	typ := GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody2

	return GetDeploymentResponseBody{
		GetDeploymentResponseBody2: &getDeploymentResponseBody2,
		Type:                       typ,
	}
}

func (u *GetDeploymentResponseBody) UnmarshalJSON(data []byte) error {

	var getDeploymentResponseBody2 GetDeploymentResponseBody2 = GetDeploymentResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentResponseBody2, "", true, true); err == nil {
		u.GetDeploymentResponseBody2 = &getDeploymentResponseBody2
		u.Type = GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody2
		return nil
	}

	var getDeploymentResponseBody1 GetDeploymentResponseBody1 = GetDeploymentResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentResponseBody1, "", true, true); err == nil {
		u.GetDeploymentResponseBody1 = &getDeploymentResponseBody1
		u.Type = GetDeploymentResponseBodyUnionTypeGetDeploymentResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentResponseBody", string(data))
}

func (u GetDeploymentResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentResponseBody1 != nil {
		return utils.MarshalJSON(u.GetDeploymentResponseBody1, "", true)
	}

	if u.GetDeploymentResponseBody2 != nil {
		return utils.MarshalJSON(u.GetDeploymentResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentResponseBody: all fields are null")
}

type GetDeploymentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The deployment including only public information
	// The deployment including both public and private information
	OneOf *GetDeploymentResponseBody
}

func (o *GetDeploymentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetDeploymentResponse) GetOneOf() *GetDeploymentResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
