// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type View string

const (
	ViewAccount View = "account"
	ViewProject View = "project"
)

func (e View) ToPointer() *View {
	return &e
}
func (e *View) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account":
		fallthrough
	case "project":
		*e = View(v)
		return nil
	default:
		return fmt.Errorf("invalid value for View: %v", v)
	}
}

type InstallationType string

const (
	InstallationTypeMarketplace InstallationType = "marketplace"
	InstallationTypeExternal    InstallationType = "external"
)

func (e InstallationType) ToPointer() *InstallationType {
	return &e
}
func (e *InstallationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "external":
		*e = InstallationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InstallationType: %v", v)
	}
}

type GetConfigurationsRequest struct {
	View             View              `queryParam:"style=form,explode=true,name=view"`
	InstallationType *InstallationType `queryParam:"style=form,explode=true,name=installationType"`
	// ID of the integration
	IntegrationIDOrSlug *string `queryParam:"style=form,explode=true,name=integrationIdOrSlug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetConfigurationsRequest) GetView() View {
	if o == nil {
		return View("")
	}
	return o.View
}

func (o *GetConfigurationsRequest) GetInstallationType() *InstallationType {
	if o == nil {
		return nil
	}
	return o.InstallationType
}

func (o *GetConfigurationsRequest) GetIntegrationIDOrSlug() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationIDOrSlug
}

func (o *GetConfigurationsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type TagIds string

const (
	TagIdsTagAi              TagIds = "tag_ai"
	TagIdsTagAnalytics       TagIds = "tag_analytics"
	TagIdsTagAuthentication  TagIds = "tag_authentication"
	TagIdsTagCms             TagIds = "tag_cms"
	TagIdsTagCodeRepository  TagIds = "tag_code_repository"
	TagIdsTagCommerce        TagIds = "tag_commerce"
	TagIdsTagDatabases       TagIds = "tag_databases"
	TagIdsTagDevTools        TagIds = "tag_dev_tools"
	TagIdsTagExperimentation TagIds = "tag_experimentation"
	TagIdsTagFlags           TagIds = "tag_flags"
	TagIdsTagLogging         TagIds = "tag_logging"
	TagIdsTagMessaging       TagIds = "tag_messaging"
	TagIdsTagMonitoring      TagIds = "tag_monitoring"
	TagIdsTagObservability   TagIds = "tag_observability"
	TagIdsTagPerformance     TagIds = "tag_performance"
	TagIdsTagProductivity    TagIds = "tag_productivity"
	TagIdsTagSearching       TagIds = "tag_searching"
	TagIdsTagSecurity        TagIds = "tag_security"
	TagIdsTagTesting         TagIds = "tag_testing"
	TagIdsTagVideo           TagIds = "tag_video"
)

func (e TagIds) ToPointer() *TagIds {
	return &e
}
func (e *TagIds) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tag_ai":
		fallthrough
	case "tag_analytics":
		fallthrough
	case "tag_authentication":
		fallthrough
	case "tag_cms":
		fallthrough
	case "tag_code_repository":
		fallthrough
	case "tag_commerce":
		fallthrough
	case "tag_databases":
		fallthrough
	case "tag_dev_tools":
		fallthrough
	case "tag_experimentation":
		fallthrough
	case "tag_flags":
		fallthrough
	case "tag_logging":
		fallthrough
	case "tag_messaging":
		fallthrough
	case "tag_monitoring":
		fallthrough
	case "tag_observability":
		fallthrough
	case "tag_performance":
		fallthrough
	case "tag_productivity":
		fallthrough
	case "tag_searching":
		fallthrough
	case "tag_security":
		fallthrough
	case "tag_testing":
		fallthrough
	case "tag_video":
		*e = TagIds(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagIds: %v", v)
	}
}

type Integration struct {
	Name                string   `json:"name"`
	Icon                string   `json:"icon"`
	IsLegacy            bool     `json:"isLegacy"`
	Flags               []string `json:"flags,omitempty"`
	AssignedBetaLabelAt *float64 `json:"assignedBetaLabelAt,omitempty"`
	TagIds              []TagIds `json:"tagIds,omitempty"`
}

func (o *Integration) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Integration) GetIcon() string {
	if o == nil {
		return ""
	}
	return o.Icon
}

func (o *Integration) GetIsLegacy() bool {
	if o == nil {
		return false
	}
	return o.IsLegacy
}

func (o *Integration) GetFlags() []string {
	if o == nil {
		return nil
	}
	return o.Flags
}

func (o *Integration) GetAssignedBetaLabelAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AssignedBetaLabelAt
}

func (o *Integration) GetTagIds() []TagIds {
	if o == nil {
		return nil
	}
	return o.TagIds
}

// GetConfigurationsResponseBodyIntegrationsSource - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfigurationsResponseBodyIntegrationsSource string

const (
	GetConfigurationsResponseBodyIntegrationsSourceMarketplace  GetConfigurationsResponseBodyIntegrationsSource = "marketplace"
	GetConfigurationsResponseBodyIntegrationsSourceDeployButton GetConfigurationsResponseBodyIntegrationsSource = "deploy-button"
	GetConfigurationsResponseBodyIntegrationsSourceExternal     GetConfigurationsResponseBodyIntegrationsSource = "external"
)

func (e GetConfigurationsResponseBodyIntegrationsSource) ToPointer() *GetConfigurationsResponseBodyIntegrationsSource {
	return &e
}
func (e *GetConfigurationsResponseBodyIntegrationsSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		*e = GetConfigurationsResponseBodyIntegrationsSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsResponseBodyIntegrationsSource: %v", v)
	}
}

type GetConfigurationsResponseBodyIntegrationsType string

const (
	GetConfigurationsResponseBodyIntegrationsTypeIntegrationConfiguration GetConfigurationsResponseBodyIntegrationsType = "integration-configuration"
)

func (e GetConfigurationsResponseBodyIntegrationsType) ToPointer() *GetConfigurationsResponseBodyIntegrationsType {
	return &e
}
func (e *GetConfigurationsResponseBodyIntegrationsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfigurationsResponseBodyIntegrationsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsResponseBodyIntegrationsType: %v", v)
	}
}

type GetConfigurationsResponseBodyDisabledReason string

const (
	GetConfigurationsResponseBodyDisabledReasonDisabledByOwner             GetConfigurationsResponseBodyDisabledReason = "disabled-by-owner"
	GetConfigurationsResponseBodyDisabledReasonFeatureNotAvailable         GetConfigurationsResponseBodyDisabledReason = "feature-not-available"
	GetConfigurationsResponseBodyDisabledReasonDisabledByAdmin             GetConfigurationsResponseBodyDisabledReason = "disabled-by-admin"
	GetConfigurationsResponseBodyDisabledReasonOriginalOwnerLeftTheTeam    GetConfigurationsResponseBodyDisabledReason = "original-owner-left-the-team"
	GetConfigurationsResponseBodyDisabledReasonAccountPlanDowngrade        GetConfigurationsResponseBodyDisabledReason = "account-plan-downgrade"
	GetConfigurationsResponseBodyDisabledReasonOriginalOwnerRoleDowngraded GetConfigurationsResponseBodyDisabledReason = "original-owner-role-downgraded"
)

func (e GetConfigurationsResponseBodyDisabledReason) ToPointer() *GetConfigurationsResponseBodyDisabledReason {
	return &e
}
func (e *GetConfigurationsResponseBodyDisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "original-owner-role-downgraded":
		*e = GetConfigurationsResponseBodyDisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsResponseBodyDisabledReason: %v", v)
	}
}

// GetConfigurationsResponseBodyInstallationType - Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
type GetConfigurationsResponseBodyInstallationType string

const (
	GetConfigurationsResponseBodyInstallationTypeMarketplace GetConfigurationsResponseBodyInstallationType = "marketplace"
	GetConfigurationsResponseBodyInstallationTypeExternal    GetConfigurationsResponseBodyInstallationType = "external"
)

func (e GetConfigurationsResponseBodyInstallationType) ToPointer() *GetConfigurationsResponseBodyInstallationType {
	return &e
}
func (e *GetConfigurationsResponseBodyInstallationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "external":
		*e = GetConfigurationsResponseBodyInstallationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsResponseBodyInstallationType: %v", v)
	}
}

type GetConfigurationsResponseBody2 struct {
	Integration Integration `json:"integration"`
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *float64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt float64 `json:"createdAt"`
	// The unique identifier of the configuration
	ID string `json:"id"`
	// The unique identifier of the app the configuration was created for
	IntegrationID string `json:"integrationId"`
	// The user or team ID that owns the configuration
	OwnerID string `json:"ownerId"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects []string `json:"projects,omitempty"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfigurationsResponseBodyIntegrationsSource `json:"source,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug string `json:"slug"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string                                       `json:"teamId,omitempty"`
	Type   GetConfigurationsResponseBodyIntegrationsType `json:"type"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the user that created the configuration.
	UserID string `json:"userId"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes []string `json:"scopes"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	// A timestamp that tells you when the configuration was deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
	DeleteRequestedAt *float64                                     `json:"deleteRequestedAt,omitempty"`
	DisabledReason    *GetConfigurationsResponseBodyDisabledReason `json:"disabledReason,omitempty"`
	// Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
	InstallationType *GetConfigurationsResponseBodyInstallationType `json:"installationType,omitempty"`
}

func (o *GetConfigurationsResponseBody2) GetIntegration() Integration {
	if o == nil {
		return Integration{}
	}
	return o.Integration
}

func (o *GetConfigurationsResponseBody2) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetConfigurationsResponseBody2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetConfigurationsResponseBody2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurationsResponseBody2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetConfigurationsResponseBody2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetConfigurationsResponseBody2) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *GetConfigurationsResponseBody2) GetSource() *GetConfigurationsResponseBodyIntegrationsSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetConfigurationsResponseBody2) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetConfigurationsResponseBody2) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationsResponseBody2) GetType() GetConfigurationsResponseBodyIntegrationsType {
	if o == nil {
		return GetConfigurationsResponseBodyIntegrationsType("")
	}
	return o.Type
}

func (o *GetConfigurationsResponseBody2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetConfigurationsResponseBody2) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetConfigurationsResponseBody2) GetScopes() []string {
	if o == nil {
		return []string{}
	}
	return o.Scopes
}

func (o *GetConfigurationsResponseBody2) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfigurationsResponseBody2) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetConfigurationsResponseBody2) GetDeleteRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeleteRequestedAt
}

func (o *GetConfigurationsResponseBody2) GetDisabledReason() *GetConfigurationsResponseBodyDisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfigurationsResponseBody2) GetInstallationType() *GetConfigurationsResponseBodyInstallationType {
	if o == nil {
		return nil
	}
	return o.InstallationType
}

// GetConfigurationsResponseBodySource - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfigurationsResponseBodySource string

const (
	GetConfigurationsResponseBodySourceMarketplace  GetConfigurationsResponseBodySource = "marketplace"
	GetConfigurationsResponseBodySourceDeployButton GetConfigurationsResponseBodySource = "deploy-button"
	GetConfigurationsResponseBodySourceExternal     GetConfigurationsResponseBodySource = "external"
)

func (e GetConfigurationsResponseBodySource) ToPointer() *GetConfigurationsResponseBodySource {
	return &e
}
func (e *GetConfigurationsResponseBodySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		*e = GetConfigurationsResponseBodySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsResponseBodySource: %v", v)
	}
}

type GetConfigurationsResponseBodyType string

const (
	GetConfigurationsResponseBodyTypeIntegrationConfiguration GetConfigurationsResponseBodyType = "integration-configuration"
)

func (e GetConfigurationsResponseBodyType) ToPointer() *GetConfigurationsResponseBodyType {
	return &e
}
func (e *GetConfigurationsResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfigurationsResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsResponseBodyType: %v", v)
	}
}

type ResponseBodyDisabledReason string

const (
	ResponseBodyDisabledReasonDisabledByOwner             ResponseBodyDisabledReason = "disabled-by-owner"
	ResponseBodyDisabledReasonFeatureNotAvailable         ResponseBodyDisabledReason = "feature-not-available"
	ResponseBodyDisabledReasonDisabledByAdmin             ResponseBodyDisabledReason = "disabled-by-admin"
	ResponseBodyDisabledReasonOriginalOwnerLeftTheTeam    ResponseBodyDisabledReason = "original-owner-left-the-team"
	ResponseBodyDisabledReasonAccountPlanDowngrade        ResponseBodyDisabledReason = "account-plan-downgrade"
	ResponseBodyDisabledReasonOriginalOwnerRoleDowngraded ResponseBodyDisabledReason = "original-owner-role-downgraded"
)

func (e ResponseBodyDisabledReason) ToPointer() *ResponseBodyDisabledReason {
	return &e
}
func (e *ResponseBodyDisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "original-owner-role-downgraded":
		*e = ResponseBodyDisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyDisabledReason: %v", v)
	}
}

// ResponseBodyInstallationType - Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
type ResponseBodyInstallationType string

const (
	ResponseBodyInstallationTypeMarketplace ResponseBodyInstallationType = "marketplace"
	ResponseBodyInstallationTypeExternal    ResponseBodyInstallationType = "external"
)

func (e ResponseBodyInstallationType) ToPointer() *ResponseBodyInstallationType {
	return &e
}
func (e *ResponseBodyInstallationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "external":
		*e = ResponseBodyInstallationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyInstallationType: %v", v)
	}
}

// GetConfigurationsResponseBody1 - The list of configurations for the authenticated user
type GetConfigurationsResponseBody1 struct {
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *float64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// The unique identifier of the configuration
	ID *string `json:"id,omitempty"`
	// The unique identifier of the app the configuration was created for
	IntegrationID *string `json:"integrationId,omitempty"`
	// The user or team ID that owns the configuration
	OwnerID *string `json:"ownerId,omitempty"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects []string `json:"projects,omitempty"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfigurationsResponseBodySource `json:"source,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug *string `json:"slug,omitempty"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string                            `json:"teamId,omitempty"`
	Type   *GetConfigurationsResponseBodyType `json:"type,omitempty"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The ID of the user that created the configuration.
	UserID *string `json:"userId,omitempty"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes []string `json:"scopes,omitempty"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	// A timestamp that tells you when the configuration was deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
	DeleteRequestedAt *float64                    `json:"deleteRequestedAt,omitempty"`
	DisabledReason    *ResponseBodyDisabledReason `json:"disabledReason,omitempty"`
	// Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
	InstallationType *ResponseBodyInstallationType `json:"installationType,omitempty"`
}

func (o *GetConfigurationsResponseBody1) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetConfigurationsResponseBody1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetConfigurationsResponseBody1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetConfigurationsResponseBody1) GetIntegrationID() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationID
}

func (o *GetConfigurationsResponseBody1) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *GetConfigurationsResponseBody1) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *GetConfigurationsResponseBody1) GetSource() *GetConfigurationsResponseBodySource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetConfigurationsResponseBody1) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetConfigurationsResponseBody1) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationsResponseBody1) GetType() *GetConfigurationsResponseBodyType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetConfigurationsResponseBody1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetConfigurationsResponseBody1) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetConfigurationsResponseBody1) GetScopes() []string {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *GetConfigurationsResponseBody1) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfigurationsResponseBody1) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetConfigurationsResponseBody1) GetDeleteRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeleteRequestedAt
}

func (o *GetConfigurationsResponseBody1) GetDisabledReason() *ResponseBodyDisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfigurationsResponseBody1) GetInstallationType() *ResponseBodyInstallationType {
	if o == nil {
		return nil
	}
	return o.InstallationType
}

type GetConfigurationsResponseBodyUnionType string

const (
	GetConfigurationsResponseBodyUnionTypeArrayOfGetConfigurationsResponseBody1 GetConfigurationsResponseBodyUnionType = "arrayOfGetConfigurationsResponseBody1"
	GetConfigurationsResponseBodyUnionTypeArrayOfGetConfigurationsResponseBody2 GetConfigurationsResponseBodyUnionType = "arrayOfGetConfigurationsResponseBody2"
)

// GetConfigurationsResponseBody - The list of configurations for the authenticated user
type GetConfigurationsResponseBody struct {
	ArrayOfGetConfigurationsResponseBody1 []GetConfigurationsResponseBody1
	ArrayOfGetConfigurationsResponseBody2 []GetConfigurationsResponseBody2

	Type GetConfigurationsResponseBodyUnionType
}

func CreateGetConfigurationsResponseBodyArrayOfGetConfigurationsResponseBody1(arrayOfGetConfigurationsResponseBody1 []GetConfigurationsResponseBody1) GetConfigurationsResponseBody {
	typ := GetConfigurationsResponseBodyUnionTypeArrayOfGetConfigurationsResponseBody1

	return GetConfigurationsResponseBody{
		ArrayOfGetConfigurationsResponseBody1: arrayOfGetConfigurationsResponseBody1,
		Type:                                  typ,
	}
}

func CreateGetConfigurationsResponseBodyArrayOfGetConfigurationsResponseBody2(arrayOfGetConfigurationsResponseBody2 []GetConfigurationsResponseBody2) GetConfigurationsResponseBody {
	typ := GetConfigurationsResponseBodyUnionTypeArrayOfGetConfigurationsResponseBody2

	return GetConfigurationsResponseBody{
		ArrayOfGetConfigurationsResponseBody2: arrayOfGetConfigurationsResponseBody2,
		Type:                                  typ,
	}
}

func (u *GetConfigurationsResponseBody) UnmarshalJSON(data []byte) error {

	var arrayOfGetConfigurationsResponseBody1 []GetConfigurationsResponseBody1 = []GetConfigurationsResponseBody1{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetConfigurationsResponseBody1, "", true, true); err == nil {
		u.ArrayOfGetConfigurationsResponseBody1 = arrayOfGetConfigurationsResponseBody1
		u.Type = GetConfigurationsResponseBodyUnionTypeArrayOfGetConfigurationsResponseBody1
		return nil
	}

	var arrayOfGetConfigurationsResponseBody2 []GetConfigurationsResponseBody2 = []GetConfigurationsResponseBody2{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetConfigurationsResponseBody2, "", true, true); err == nil {
		u.ArrayOfGetConfigurationsResponseBody2 = arrayOfGetConfigurationsResponseBody2
		u.Type = GetConfigurationsResponseBodyUnionTypeArrayOfGetConfigurationsResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetConfigurationsResponseBody", string(data))
}

func (u GetConfigurationsResponseBody) MarshalJSON() ([]byte, error) {
	if u.ArrayOfGetConfigurationsResponseBody1 != nil {
		return utils.MarshalJSON(u.ArrayOfGetConfigurationsResponseBody1, "", true)
	}

	if u.ArrayOfGetConfigurationsResponseBody2 != nil {
		return utils.MarshalJSON(u.ArrayOfGetConfigurationsResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetConfigurationsResponseBody: all fields are null")
}

type GetConfigurationsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The list of configurations for the authenticated user
	OneOf *GetConfigurationsResponseBody
}

func (o *GetConfigurationsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetConfigurationsResponse) GetOneOf() *GetConfigurationsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
