// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetWebhooksRequest struct {
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetWebhooksRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetWebhooksRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetWebhooksRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetWebhooksResponseBodyEvents - The webhooks events
type GetWebhooksResponseBodyEvents string

const (
	GetWebhooksResponseBodyEventsBudgetReached                                      GetWebhooksResponseBodyEvents = "budget.reached"
	GetWebhooksResponseBodyEventsBudgetReset                                        GetWebhooksResponseBodyEvents = "budget.reset"
	GetWebhooksResponseBodyEventsDomainCreated                                      GetWebhooksResponseBodyEvents = "domain.created"
	GetWebhooksResponseBodyEventsDeploymentCreated                                  GetWebhooksResponseBodyEvents = "deployment.created"
	GetWebhooksResponseBodyEventsDeploymentError                                    GetWebhooksResponseBodyEvents = "deployment.error"
	GetWebhooksResponseBodyEventsDeploymentCanceled                                 GetWebhooksResponseBodyEvents = "deployment.canceled"
	GetWebhooksResponseBodyEventsDeploymentSucceeded                                GetWebhooksResponseBodyEvents = "deployment.succeeded"
	GetWebhooksResponseBodyEventsDeploymentReady                                    GetWebhooksResponseBodyEvents = "deployment.ready"
	GetWebhooksResponseBodyEventsDeploymentCheckRerequested                         GetWebhooksResponseBodyEvents = "deployment.check-rerequested"
	GetWebhooksResponseBodyEventsDeploymentPromoted                                 GetWebhooksResponseBodyEvents = "deployment.promoted"
	GetWebhooksResponseBodyEventsDeploymentIntegrationActionStart                   GetWebhooksResponseBodyEvents = "deployment.integration.action.start"
	GetWebhooksResponseBodyEventsDeploymentIntegrationActionCancel                  GetWebhooksResponseBodyEvents = "deployment.integration.action.cancel"
	GetWebhooksResponseBodyEventsDeploymentIntegrationActionCleanup                 GetWebhooksResponseBodyEvents = "deployment.integration.action.cleanup"
	GetWebhooksResponseBodyEventsEdgeConfigCreated                                  GetWebhooksResponseBodyEvents = "edge-config.created"
	GetWebhooksResponseBodyEventsEdgeConfigDeleted                                  GetWebhooksResponseBodyEvents = "edge-config.deleted"
	GetWebhooksResponseBodyEventsEdgeConfigItemsUpdated                             GetWebhooksResponseBodyEvents = "edge-config.items.updated"
	GetWebhooksResponseBodyEventsFirewallAttack                                     GetWebhooksResponseBodyEvents = "firewall.attack"
	GetWebhooksResponseBodyEventsIntegrationConfigurationPermissionUpgraded         GetWebhooksResponseBodyEvents = "integration-configuration.permission-upgraded"
	GetWebhooksResponseBodyEventsIntegrationConfigurationRemoved                    GetWebhooksResponseBodyEvents = "integration-configuration.removed"
	GetWebhooksResponseBodyEventsIntegrationConfigurationScopeChangeConfirmed       GetWebhooksResponseBodyEvents = "integration-configuration.scope-change-confirmed"
	GetWebhooksResponseBodyEventsIntegrationResourceProjectConnected                GetWebhooksResponseBodyEvents = "integration-resource.project-connected"
	GetWebhooksResponseBodyEventsIntegrationResourceProjectDisconnected             GetWebhooksResponseBodyEvents = "integration-resource.project-disconnected"
	GetWebhooksResponseBodyEventsProjectCreated                                     GetWebhooksResponseBodyEvents = "project.created"
	GetWebhooksResponseBodyEventsProjectRemoved                                     GetWebhooksResponseBodyEvents = "project.removed"
	GetWebhooksResponseBodyEventsDeploymentChecksCompletedLegacy                    GetWebhooksResponseBodyEvents = "deployment-checks-completed"
	GetWebhooksResponseBodyEventsDeploymentReadyLegacy                              GetWebhooksResponseBodyEvents = "deployment-ready"
	GetWebhooksResponseBodyEventsDeploymentPreparedLegacy                           GetWebhooksResponseBodyEvents = "deployment-prepared"
	GetWebhooksResponseBodyEventsDeploymentErrorLegacy                              GetWebhooksResponseBodyEvents = "deployment-error"
	GetWebhooksResponseBodyEventsDeploymentCheckRerequestedLegacy                   GetWebhooksResponseBodyEvents = "deployment-check-rerequested"
	GetWebhooksResponseBodyEventsDeploymentCanceledLegacy                           GetWebhooksResponseBodyEvents = "deployment-canceled"
	GetWebhooksResponseBodyEventsProjectCreatedLegacy                               GetWebhooksResponseBodyEvents = "project-created"
	GetWebhooksResponseBodyEventsProjectRemovedLegacy                               GetWebhooksResponseBodyEvents = "project-removed"
	GetWebhooksResponseBodyEventsDomainCreatedLegacy                                GetWebhooksResponseBodyEvents = "domain-created"
	GetWebhooksResponseBodyEventsDeploymentLegacy                                   GetWebhooksResponseBodyEvents = "deployment"
	GetWebhooksResponseBodyEventsIntegrationConfigurationPermissionUpdatedLegacy    GetWebhooksResponseBodyEvents = "integration-configuration-permission-updated"
	GetWebhooksResponseBodyEventsIntegrationConfigurationRemovedLegacy              GetWebhooksResponseBodyEvents = "integration-configuration-removed"
	GetWebhooksResponseBodyEventsIntegrationConfigurationScopeChangeConfirmedLegacy GetWebhooksResponseBodyEvents = "integration-configuration-scope-change-confirmed"
	GetWebhooksResponseBodyEventsMarketplaceInvoiceCreated                          GetWebhooksResponseBodyEvents = "marketplace.invoice.created"
	GetWebhooksResponseBodyEventsMarketplaceInvoicePaid                             GetWebhooksResponseBodyEvents = "marketplace.invoice.paid"
	GetWebhooksResponseBodyEventsMarketplaceInvoiceNotpaid                          GetWebhooksResponseBodyEvents = "marketplace.invoice.notpaid"
	GetWebhooksResponseBodyEventsMarketplaceInvoiceRefunded                         GetWebhooksResponseBodyEvents = "marketplace.invoice.refunded"
	GetWebhooksResponseBodyEventsObservabilityAnomaly                               GetWebhooksResponseBodyEvents = "observability.anomaly"
	GetWebhooksResponseBodyEventsTestWebhook                                        GetWebhooksResponseBodyEvents = "test-webhook"
)

func (e GetWebhooksResponseBodyEvents) ToPointer() *GetWebhooksResponseBodyEvents {
	return &e
}
func (e *GetWebhooksResponseBodyEvents) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "deployment.promoted":
		fallthrough
	case "deployment.integration.action.start":
		fallthrough
	case "deployment.integration.action.cancel":
		fallthrough
	case "deployment.integration.action.cleanup":
		fallthrough
	case "edge-config.created":
		fallthrough
	case "edge-config.deleted":
		fallthrough
	case "edge-config.items.updated":
		fallthrough
	case "firewall.attack":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "integration-resource.project-connected":
		fallthrough
	case "integration-resource.project-disconnected":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "marketplace.invoice.created":
		fallthrough
	case "marketplace.invoice.paid":
		fallthrough
	case "marketplace.invoice.notpaid":
		fallthrough
	case "marketplace.invoice.refunded":
		fallthrough
	case "observability.anomaly":
		fallthrough
	case "test-webhook":
		*e = GetWebhooksResponseBodyEvents(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhooksResponseBodyEvents: %v", v)
	}
}

type GetWebhooksResponseBody2 struct {
	// The webhooks events
	Events []GetWebhooksResponseBodyEvents `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// A string with the URL of the webhook
	URL string `json:"url"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the projects the webhook is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
}

func (o *GetWebhooksResponseBody2) GetEvents() []GetWebhooksResponseBodyEvents {
	if o == nil {
		return []GetWebhooksResponseBodyEvents{}
	}
	return o.Events
}

func (o *GetWebhooksResponseBody2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhooksResponseBody2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetWebhooksResponseBody2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetWebhooksResponseBody2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetWebhooksResponseBody2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetWebhooksResponseBody2) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

type GetWebhooksResponseBodyFramework string

const (
	GetWebhooksResponseBodyFrameworkBlitzjs        GetWebhooksResponseBodyFramework = "blitzjs"
	GetWebhooksResponseBodyFrameworkNextjs         GetWebhooksResponseBodyFramework = "nextjs"
	GetWebhooksResponseBodyFrameworkGatsby         GetWebhooksResponseBodyFramework = "gatsby"
	GetWebhooksResponseBodyFrameworkRemix          GetWebhooksResponseBodyFramework = "remix"
	GetWebhooksResponseBodyFrameworkReactRouter    GetWebhooksResponseBodyFramework = "react-router"
	GetWebhooksResponseBodyFrameworkAstro          GetWebhooksResponseBodyFramework = "astro"
	GetWebhooksResponseBodyFrameworkHexo           GetWebhooksResponseBodyFramework = "hexo"
	GetWebhooksResponseBodyFrameworkEleventy       GetWebhooksResponseBodyFramework = "eleventy"
	GetWebhooksResponseBodyFrameworkDocusaurus2    GetWebhooksResponseBodyFramework = "docusaurus-2"
	GetWebhooksResponseBodyFrameworkDocusaurus     GetWebhooksResponseBodyFramework = "docusaurus"
	GetWebhooksResponseBodyFrameworkPreact         GetWebhooksResponseBodyFramework = "preact"
	GetWebhooksResponseBodyFrameworkSolidstart1    GetWebhooksResponseBodyFramework = "solidstart-1"
	GetWebhooksResponseBodyFrameworkSolidstart     GetWebhooksResponseBodyFramework = "solidstart"
	GetWebhooksResponseBodyFrameworkDojo           GetWebhooksResponseBodyFramework = "dojo"
	GetWebhooksResponseBodyFrameworkEmber          GetWebhooksResponseBodyFramework = "ember"
	GetWebhooksResponseBodyFrameworkVue            GetWebhooksResponseBodyFramework = "vue"
	GetWebhooksResponseBodyFrameworkScully         GetWebhooksResponseBodyFramework = "scully"
	GetWebhooksResponseBodyFrameworkIonicAngular   GetWebhooksResponseBodyFramework = "ionic-angular"
	GetWebhooksResponseBodyFrameworkAngular        GetWebhooksResponseBodyFramework = "angular"
	GetWebhooksResponseBodyFrameworkPolymer        GetWebhooksResponseBodyFramework = "polymer"
	GetWebhooksResponseBodyFrameworkSvelte         GetWebhooksResponseBodyFramework = "svelte"
	GetWebhooksResponseBodyFrameworkSveltekit      GetWebhooksResponseBodyFramework = "sveltekit"
	GetWebhooksResponseBodyFrameworkSveltekit1     GetWebhooksResponseBodyFramework = "sveltekit-1"
	GetWebhooksResponseBodyFrameworkIonicReact     GetWebhooksResponseBodyFramework = "ionic-react"
	GetWebhooksResponseBodyFrameworkCreateReactApp GetWebhooksResponseBodyFramework = "create-react-app"
	GetWebhooksResponseBodyFrameworkGridsome       GetWebhooksResponseBodyFramework = "gridsome"
	GetWebhooksResponseBodyFrameworkUmijs          GetWebhooksResponseBodyFramework = "umijs"
	GetWebhooksResponseBodyFrameworkSapper         GetWebhooksResponseBodyFramework = "sapper"
	GetWebhooksResponseBodyFrameworkSaber          GetWebhooksResponseBodyFramework = "saber"
	GetWebhooksResponseBodyFrameworkStencil        GetWebhooksResponseBodyFramework = "stencil"
	GetWebhooksResponseBodyFrameworkNuxtjs         GetWebhooksResponseBodyFramework = "nuxtjs"
	GetWebhooksResponseBodyFrameworkRedwoodjs      GetWebhooksResponseBodyFramework = "redwoodjs"
	GetWebhooksResponseBodyFrameworkHugo           GetWebhooksResponseBodyFramework = "hugo"
	GetWebhooksResponseBodyFrameworkJekyll         GetWebhooksResponseBodyFramework = "jekyll"
	GetWebhooksResponseBodyFrameworkBrunch         GetWebhooksResponseBodyFramework = "brunch"
	GetWebhooksResponseBodyFrameworkMiddleman      GetWebhooksResponseBodyFramework = "middleman"
	GetWebhooksResponseBodyFrameworkZola           GetWebhooksResponseBodyFramework = "zola"
	GetWebhooksResponseBodyFrameworkHydrogen       GetWebhooksResponseBodyFramework = "hydrogen"
	GetWebhooksResponseBodyFrameworkVite           GetWebhooksResponseBodyFramework = "vite"
	GetWebhooksResponseBodyFrameworkVitepress      GetWebhooksResponseBodyFramework = "vitepress"
	GetWebhooksResponseBodyFrameworkVuepress       GetWebhooksResponseBodyFramework = "vuepress"
	GetWebhooksResponseBodyFrameworkParcel         GetWebhooksResponseBodyFramework = "parcel"
	GetWebhooksResponseBodyFrameworkFasthtml       GetWebhooksResponseBodyFramework = "fasthtml"
	GetWebhooksResponseBodyFrameworkSanityV3       GetWebhooksResponseBodyFramework = "sanity-v3"
	GetWebhooksResponseBodyFrameworkSanity         GetWebhooksResponseBodyFramework = "sanity"
	GetWebhooksResponseBodyFrameworkStorybook      GetWebhooksResponseBodyFramework = "storybook"
)

func (e GetWebhooksResponseBodyFramework) ToPointer() *GetWebhooksResponseBodyFramework {
	return &e
}
func (e *GetWebhooksResponseBodyFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = GetWebhooksResponseBodyFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhooksResponseBodyFramework: %v", v)
	}
}

type ProjectsMetadata struct {
	ID               string                            `json:"id"`
	Name             string                            `json:"name"`
	Framework        *GetWebhooksResponseBodyFramework `json:"framework,omitempty"`
	LatestDeployment *string                           `json:"latestDeployment,omitempty"`
}

func (o *ProjectsMetadata) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProjectsMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProjectsMetadata) GetFramework() *GetWebhooksResponseBodyFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *ProjectsMetadata) GetLatestDeployment() *string {
	if o == nil {
		return nil
	}
	return o.LatestDeployment
}

// ResponseBodyEvents - The webhooks events
type ResponseBodyEvents string

const (
	ResponseBodyEventsBudgetReached                                      ResponseBodyEvents = "budget.reached"
	ResponseBodyEventsBudgetReset                                        ResponseBodyEvents = "budget.reset"
	ResponseBodyEventsDomainCreated                                      ResponseBodyEvents = "domain.created"
	ResponseBodyEventsDeploymentCreated                                  ResponseBodyEvents = "deployment.created"
	ResponseBodyEventsDeploymentError                                    ResponseBodyEvents = "deployment.error"
	ResponseBodyEventsDeploymentCanceled                                 ResponseBodyEvents = "deployment.canceled"
	ResponseBodyEventsDeploymentSucceeded                                ResponseBodyEvents = "deployment.succeeded"
	ResponseBodyEventsDeploymentReady                                    ResponseBodyEvents = "deployment.ready"
	ResponseBodyEventsDeploymentCheckRerequested                         ResponseBodyEvents = "deployment.check-rerequested"
	ResponseBodyEventsDeploymentPromoted                                 ResponseBodyEvents = "deployment.promoted"
	ResponseBodyEventsDeploymentIntegrationActionStart                   ResponseBodyEvents = "deployment.integration.action.start"
	ResponseBodyEventsDeploymentIntegrationActionCancel                  ResponseBodyEvents = "deployment.integration.action.cancel"
	ResponseBodyEventsDeploymentIntegrationActionCleanup                 ResponseBodyEvents = "deployment.integration.action.cleanup"
	ResponseBodyEventsEdgeConfigCreated                                  ResponseBodyEvents = "edge-config.created"
	ResponseBodyEventsEdgeConfigDeleted                                  ResponseBodyEvents = "edge-config.deleted"
	ResponseBodyEventsEdgeConfigItemsUpdated                             ResponseBodyEvents = "edge-config.items.updated"
	ResponseBodyEventsFirewallAttack                                     ResponseBodyEvents = "firewall.attack"
	ResponseBodyEventsIntegrationConfigurationPermissionUpgraded         ResponseBodyEvents = "integration-configuration.permission-upgraded"
	ResponseBodyEventsIntegrationConfigurationRemoved                    ResponseBodyEvents = "integration-configuration.removed"
	ResponseBodyEventsIntegrationConfigurationScopeChangeConfirmed       ResponseBodyEvents = "integration-configuration.scope-change-confirmed"
	ResponseBodyEventsIntegrationResourceProjectConnected                ResponseBodyEvents = "integration-resource.project-connected"
	ResponseBodyEventsIntegrationResourceProjectDisconnected             ResponseBodyEvents = "integration-resource.project-disconnected"
	ResponseBodyEventsProjectCreated                                     ResponseBodyEvents = "project.created"
	ResponseBodyEventsProjectRemoved                                     ResponseBodyEvents = "project.removed"
	ResponseBodyEventsDeploymentChecksCompletedLegacy                    ResponseBodyEvents = "deployment-checks-completed"
	ResponseBodyEventsDeploymentReadyLegacy                              ResponseBodyEvents = "deployment-ready"
	ResponseBodyEventsDeploymentPreparedLegacy                           ResponseBodyEvents = "deployment-prepared"
	ResponseBodyEventsDeploymentErrorLegacy                              ResponseBodyEvents = "deployment-error"
	ResponseBodyEventsDeploymentCheckRerequestedLegacy                   ResponseBodyEvents = "deployment-check-rerequested"
	ResponseBodyEventsDeploymentCanceledLegacy                           ResponseBodyEvents = "deployment-canceled"
	ResponseBodyEventsProjectCreatedLegacy                               ResponseBodyEvents = "project-created"
	ResponseBodyEventsProjectRemovedLegacy                               ResponseBodyEvents = "project-removed"
	ResponseBodyEventsDomainCreatedLegacy                                ResponseBodyEvents = "domain-created"
	ResponseBodyEventsDeploymentLegacy                                   ResponseBodyEvents = "deployment"
	ResponseBodyEventsIntegrationConfigurationPermissionUpdatedLegacy    ResponseBodyEvents = "integration-configuration-permission-updated"
	ResponseBodyEventsIntegrationConfigurationRemovedLegacy              ResponseBodyEvents = "integration-configuration-removed"
	ResponseBodyEventsIntegrationConfigurationScopeChangeConfirmedLegacy ResponseBodyEvents = "integration-configuration-scope-change-confirmed"
	ResponseBodyEventsMarketplaceInvoiceCreated                          ResponseBodyEvents = "marketplace.invoice.created"
	ResponseBodyEventsMarketplaceInvoicePaid                             ResponseBodyEvents = "marketplace.invoice.paid"
	ResponseBodyEventsMarketplaceInvoiceNotpaid                          ResponseBodyEvents = "marketplace.invoice.notpaid"
	ResponseBodyEventsMarketplaceInvoiceRefunded                         ResponseBodyEvents = "marketplace.invoice.refunded"
	ResponseBodyEventsObservabilityAnomaly                               ResponseBodyEvents = "observability.anomaly"
	ResponseBodyEventsTestWebhook                                        ResponseBodyEvents = "test-webhook"
)

func (e ResponseBodyEvents) ToPointer() *ResponseBodyEvents {
	return &e
}
func (e *ResponseBodyEvents) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "deployment.promoted":
		fallthrough
	case "deployment.integration.action.start":
		fallthrough
	case "deployment.integration.action.cancel":
		fallthrough
	case "deployment.integration.action.cleanup":
		fallthrough
	case "edge-config.created":
		fallthrough
	case "edge-config.deleted":
		fallthrough
	case "edge-config.items.updated":
		fallthrough
	case "firewall.attack":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "integration-resource.project-connected":
		fallthrough
	case "integration-resource.project-disconnected":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "marketplace.invoice.created":
		fallthrough
	case "marketplace.invoice.paid":
		fallthrough
	case "marketplace.invoice.notpaid":
		fallthrough
	case "marketplace.invoice.refunded":
		fallthrough
	case "observability.anomaly":
		fallthrough
	case "test-webhook":
		*e = ResponseBodyEvents(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseBodyEvents: %v", v)
	}
}

type GetWebhooksResponseBody1 struct {
	ProjectsMetadata []ProjectsMetadata `json:"projectsMetadata"`
	// The webhooks events
	Events []ResponseBodyEvents `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// A string with the URL of the webhook
	URL string `json:"url"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the projects the webhook is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
}

func (o *GetWebhooksResponseBody1) GetProjectsMetadata() []ProjectsMetadata {
	if o == nil {
		return nil
	}
	return o.ProjectsMetadata
}

func (o *GetWebhooksResponseBody1) GetEvents() []ResponseBodyEvents {
	if o == nil {
		return []ResponseBodyEvents{}
	}
	return o.Events
}

func (o *GetWebhooksResponseBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhooksResponseBody1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetWebhooksResponseBody1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetWebhooksResponseBody1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetWebhooksResponseBody1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetWebhooksResponseBody1) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

type GetWebhooksResponseBodyType string

const (
	GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody1 GetWebhooksResponseBodyType = "arrayOfGetWebhooksResponseBody1"
	GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody2 GetWebhooksResponseBodyType = "arrayOfGetWebhooksResponseBody2"
)

type GetWebhooksResponseBody struct {
	ArrayOfGetWebhooksResponseBody1 []GetWebhooksResponseBody1
	ArrayOfGetWebhooksResponseBody2 []GetWebhooksResponseBody2

	Type GetWebhooksResponseBodyType
}

func CreateGetWebhooksResponseBodyArrayOfGetWebhooksResponseBody1(arrayOfGetWebhooksResponseBody1 []GetWebhooksResponseBody1) GetWebhooksResponseBody {
	typ := GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody1

	return GetWebhooksResponseBody{
		ArrayOfGetWebhooksResponseBody1: arrayOfGetWebhooksResponseBody1,
		Type:                            typ,
	}
}

func CreateGetWebhooksResponseBodyArrayOfGetWebhooksResponseBody2(arrayOfGetWebhooksResponseBody2 []GetWebhooksResponseBody2) GetWebhooksResponseBody {
	typ := GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody2

	return GetWebhooksResponseBody{
		ArrayOfGetWebhooksResponseBody2: arrayOfGetWebhooksResponseBody2,
		Type:                            typ,
	}
}

func (u *GetWebhooksResponseBody) UnmarshalJSON(data []byte) error {

	var arrayOfGetWebhooksResponseBody1 []GetWebhooksResponseBody1 = []GetWebhooksResponseBody1{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetWebhooksResponseBody1, "", true, true); err == nil {
		u.ArrayOfGetWebhooksResponseBody1 = arrayOfGetWebhooksResponseBody1
		u.Type = GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody1
		return nil
	}

	var arrayOfGetWebhooksResponseBody2 []GetWebhooksResponseBody2 = []GetWebhooksResponseBody2{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetWebhooksResponseBody2, "", true, true); err == nil {
		u.ArrayOfGetWebhooksResponseBody2 = arrayOfGetWebhooksResponseBody2
		u.Type = GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetWebhooksResponseBody", string(data))
}

func (u GetWebhooksResponseBody) MarshalJSON() ([]byte, error) {
	if u.ArrayOfGetWebhooksResponseBody1 != nil {
		return utils.MarshalJSON(u.ArrayOfGetWebhooksResponseBody1, "", true)
	}

	if u.ArrayOfGetWebhooksResponseBody2 != nil {
		return utils.MarshalJSON(u.ArrayOfGetWebhooksResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetWebhooksResponseBody: all fields are null")
}

type GetWebhooksResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	OneOf    *GetWebhooksResponseBody
}

func (o *GetWebhooksResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetWebhooksResponse) GetOneOf() *GetWebhooksResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
