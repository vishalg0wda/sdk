// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type CreateEdgeConfigRequestBody struct {
	Slug  string         `json:"slug"`
	Items map[string]any `json:"items,omitempty"`
}

func (o *CreateEdgeConfigRequestBody) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateEdgeConfigRequestBody) GetItems() map[string]any {
	if o == nil {
		return nil
	}
	return o.Items
}

type CreateEdgeConfigRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                     `queryParam:"style=form,explode=true,name=slug"`
	RequestBody CreateEdgeConfigRequestBody `request:"mediaType=application/json"`
}

func (o *CreateEdgeConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateEdgeConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateEdgeConfigRequest) GetRequestBody() CreateEdgeConfigRequestBody {
	if o == nil {
		return CreateEdgeConfigRequestBody{}
	}
	return o.RequestBody
}

// CreateEdgeConfigTransfer - Keeps track of the current state of the Edge Config while it gets transferred.
type CreateEdgeConfigTransfer struct {
	FromAccountID string   `json:"fromAccountId"`
	StartedAt     float64  `json:"startedAt"`
	DoneAt        *float64 `json:"doneAt"`
}

func (o *CreateEdgeConfigTransfer) GetFromAccountID() string {
	if o == nil {
		return ""
	}
	return o.FromAccountID
}

func (o *CreateEdgeConfigTransfer) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *CreateEdgeConfigTransfer) GetDoneAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DoneAt
}

type CreateEdgeConfigSchema struct {
}

type CreateEdgeConfigPurposeType string

const (
	CreateEdgeConfigPurposeTypeExperimentation CreateEdgeConfigPurposeType = "experimentation"
)

func (e CreateEdgeConfigPurposeType) ToPointer() *CreateEdgeConfigPurposeType {
	return &e
}
func (e *CreateEdgeConfigPurposeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "experimentation":
		*e = CreateEdgeConfigPurposeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEdgeConfigPurposeType: %v", v)
	}
}

type Purpose2 struct {
	Type       CreateEdgeConfigPurposeType `json:"type"`
	ResourceID string                      `json:"resourceId"`
}

func (o *Purpose2) GetType() CreateEdgeConfigPurposeType {
	if o == nil {
		return CreateEdgeConfigPurposeType("")
	}
	return o.Type
}

func (o *Purpose2) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

type PurposeType string

const (
	PurposeTypeFlags PurposeType = "flags"
)

func (e PurposeType) ToPointer() *PurposeType {
	return &e
}
func (e *PurposeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags":
		*e = PurposeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurposeType: %v", v)
	}
}

type Purpose1 struct {
	Type      PurposeType `json:"type"`
	ProjectID string      `json:"projectId"`
}

func (o *Purpose1) GetType() PurposeType {
	if o == nil {
		return PurposeType("")
	}
	return o.Type
}

func (o *Purpose1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type CreateEdgeConfigPurposeUnionType string

const (
	CreateEdgeConfigPurposeUnionTypePurpose1 CreateEdgeConfigPurposeUnionType = "purpose_1"
	CreateEdgeConfigPurposeUnionTypePurpose2 CreateEdgeConfigPurposeUnionType = "purpose_2"
)

type CreateEdgeConfigPurpose struct {
	Purpose1 *Purpose1
	Purpose2 *Purpose2

	Type CreateEdgeConfigPurposeUnionType
}

func CreateCreateEdgeConfigPurposePurpose1(purpose1 Purpose1) CreateEdgeConfigPurpose {
	typ := CreateEdgeConfigPurposeUnionTypePurpose1

	return CreateEdgeConfigPurpose{
		Purpose1: &purpose1,
		Type:     typ,
	}
}

func CreateCreateEdgeConfigPurposePurpose2(purpose2 Purpose2) CreateEdgeConfigPurpose {
	typ := CreateEdgeConfigPurposeUnionTypePurpose2

	return CreateEdgeConfigPurpose{
		Purpose2: &purpose2,
		Type:     typ,
	}
}

func (u *CreateEdgeConfigPurpose) UnmarshalJSON(data []byte) error {

	var purpose1 Purpose1 = Purpose1{}
	if err := utils.UnmarshalJSON(data, &purpose1, "", true, true); err == nil {
		u.Purpose1 = &purpose1
		u.Type = CreateEdgeConfigPurposeUnionTypePurpose1
		return nil
	}

	var purpose2 Purpose2 = Purpose2{}
	if err := utils.UnmarshalJSON(data, &purpose2, "", true, true); err == nil {
		u.Purpose2 = &purpose2
		u.Type = CreateEdgeConfigPurposeUnionTypePurpose2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateEdgeConfigPurpose", string(data))
}

func (u CreateEdgeConfigPurpose) MarshalJSON() ([]byte, error) {
	if u.Purpose1 != nil {
		return utils.MarshalJSON(u.Purpose1, "", true)
	}

	if u.Purpose2 != nil {
		return utils.MarshalJSON(u.Purpose2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateEdgeConfigPurpose: all fields are null")
}

// CreateEdgeConfigResponseBody - An Edge Config
type CreateEdgeConfigResponseBody struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	ID        *string  `json:"id,omitempty"`
	// Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
	Slug    *string `json:"slug,omitempty"`
	OwnerID *string `json:"ownerId,omitempty"`
	Digest  *string `json:"digest,omitempty"`
	// Keeps track of the current state of the Edge Config while it gets transferred.
	Transfer    *CreateEdgeConfigTransfer `json:"transfer,omitempty"`
	Schema      *CreateEdgeConfigSchema   `json:"schema,omitempty"`
	Purpose     *CreateEdgeConfigPurpose  `json:"purpose,omitempty"`
	SizeInBytes float64                   `json:"sizeInBytes"`
	ItemCount   float64                   `json:"itemCount"`
}

func (o *CreateEdgeConfigResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateEdgeConfigResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateEdgeConfigResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateEdgeConfigResponseBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateEdgeConfigResponseBody) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *CreateEdgeConfigResponseBody) GetDigest() *string {
	if o == nil {
		return nil
	}
	return o.Digest
}

func (o *CreateEdgeConfigResponseBody) GetTransfer() *CreateEdgeConfigTransfer {
	if o == nil {
		return nil
	}
	return o.Transfer
}

func (o *CreateEdgeConfigResponseBody) GetSchema() *CreateEdgeConfigSchema {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *CreateEdgeConfigResponseBody) GetPurpose() *CreateEdgeConfigPurpose {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *CreateEdgeConfigResponseBody) GetSizeInBytes() float64 {
	if o == nil {
		return 0.0
	}
	return o.SizeInBytes
}

func (o *CreateEdgeConfigResponseBody) GetItemCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ItemCount
}

type CreateEdgeConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateEdgeConfigResponseBody
}

func (o *CreateEdgeConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateEdgeConfigResponse) GetObject() *CreateEdgeConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
