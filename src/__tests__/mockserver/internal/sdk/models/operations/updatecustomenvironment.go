// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// UpdateCustomEnvironmentType - Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
type UpdateCustomEnvironmentType string

const (
	UpdateCustomEnvironmentTypeEquals     UpdateCustomEnvironmentType = "equals"
	UpdateCustomEnvironmentTypeStartsWith UpdateCustomEnvironmentType = "startsWith"
	UpdateCustomEnvironmentTypeEndsWith   UpdateCustomEnvironmentType = "endsWith"
)

func (e UpdateCustomEnvironmentType) ToPointer() *UpdateCustomEnvironmentType {
	return &e
}
func (e *UpdateCustomEnvironmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "equals":
		fallthrough
	case "startsWith":
		fallthrough
	case "endsWith":
		*e = UpdateCustomEnvironmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomEnvironmentType: %v", v)
	}
}

// UpdateCustomEnvironmentBranchMatcher - How we want to determine a matching branch. This is optional.
type UpdateCustomEnvironmentBranchMatcher struct {
	// Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
	Type UpdateCustomEnvironmentType `json:"type"`
	// Git branch name or portion thereof.
	Pattern string `json:"pattern"`
}

func (o *UpdateCustomEnvironmentBranchMatcher) GetType() UpdateCustomEnvironmentType {
	if o == nil {
		return UpdateCustomEnvironmentType("")
	}
	return o.Type
}

func (o *UpdateCustomEnvironmentBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type UpdateCustomEnvironmentRequestBody struct {
	// The slug of the custom environment.
	Slug *string `json:"slug,omitempty"`
	// Description of the custom environment. This is optional.
	Description *string `json:"description,omitempty"`
	// How we want to determine a matching branch. This is optional.
	BranchMatcher *UpdateCustomEnvironmentBranchMatcher `json:"branchMatcher,omitempty"`
}

func (o *UpdateCustomEnvironmentRequestBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateCustomEnvironmentRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateCustomEnvironmentRequestBody) GetBranchMatcher() *UpdateCustomEnvironmentBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

type UpdateCustomEnvironmentRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The unique custom environment identifier within the project
	EnvironmentSlugOrID string `pathParam:"style=simple,explode=false,name=environmentSlugOrId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                             `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *UpdateCustomEnvironmentRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateCustomEnvironmentRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateCustomEnvironmentRequest) GetEnvironmentSlugOrID() string {
	if o == nil {
		return ""
	}
	return o.EnvironmentSlugOrID
}

func (o *UpdateCustomEnvironmentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateCustomEnvironmentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateCustomEnvironmentRequest) GetRequestBody() *UpdateCustomEnvironmentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateCustomEnvironmentResponseBody struct {
}

type UpdateCustomEnvironmentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateCustomEnvironmentResponseBody
}

func (o *UpdateCustomEnvironmentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateCustomEnvironmentResponse) GetObject() *UpdateCustomEnvironmentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
