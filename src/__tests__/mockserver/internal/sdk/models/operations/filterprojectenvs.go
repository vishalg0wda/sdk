// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Decrypt - If true, the environment variable value will be decrypted
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type Decrypt string

const (
	DecryptTrue  Decrypt = "true"
	DecryptFalse Decrypt = "false"
)

func (e Decrypt) ToPointer() *Decrypt {
	return &e
}
func (e *Decrypt) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = Decrypt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Decrypt: %v", v)
	}
}

type FilterProjectEnvsRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// If defined, the git branch of the environment variable to filter the results (must have target=preview)
	GitBranch *string `queryParam:"style=form,explode=true,name=gitBranch"`
	// If true, the environment variable value will be decrypted
	Decrypt *Decrypt `queryParam:"style=form,explode=true,name=decrypt"`
	// The source that is calling the endpoint.
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// The unique custom environment identifier within the project
	CustomEnvironmentID *string `queryParam:"style=form,explode=true,name=customEnvironmentId"`
	// The custom environment slug (name) within the project
	CustomEnvironmentSlug *string `queryParam:"style=form,explode=true,name=customEnvironmentSlug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *FilterProjectEnvsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *FilterProjectEnvsRequest) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvsRequest) GetDecrypt() *Decrypt {
	if o == nil {
		return nil
	}
	return o.Decrypt
}

func (o *FilterProjectEnvsRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *FilterProjectEnvsRequest) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *FilterProjectEnvsRequest) GetCustomEnvironmentSlug() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentSlug
}

func (o *FilterProjectEnvsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *FilterProjectEnvsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type FilterProjectEnvsTargetProjectsResponse2 string

const (
	FilterProjectEnvsTargetProjectsResponse2Production  FilterProjectEnvsTargetProjectsResponse2 = "production"
	FilterProjectEnvsTargetProjectsResponse2Preview     FilterProjectEnvsTargetProjectsResponse2 = "preview"
	FilterProjectEnvsTargetProjectsResponse2Development FilterProjectEnvsTargetProjectsResponse2 = "development"
)

func (e FilterProjectEnvsTargetProjectsResponse2) ToPointer() *FilterProjectEnvsTargetProjectsResponse2 {
	return &e
}
func (e *FilterProjectEnvsTargetProjectsResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetProjectsResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetProjectsResponse2: %v", v)
	}
}

type FilterProjectEnvsTargetProjectsResponse1 string

const (
	FilterProjectEnvsTargetProjectsResponse1Production  FilterProjectEnvsTargetProjectsResponse1 = "production"
	FilterProjectEnvsTargetProjectsResponse1Preview     FilterProjectEnvsTargetProjectsResponse1 = "preview"
	FilterProjectEnvsTargetProjectsResponse1Development FilterProjectEnvsTargetProjectsResponse1 = "development"
)

func (e FilterProjectEnvsTargetProjectsResponse1) ToPointer() *FilterProjectEnvsTargetProjectsResponse1 {
	return &e
}
func (e *FilterProjectEnvsTargetProjectsResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetProjectsResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetProjectsResponse1: %v", v)
	}
}

type FilterProjectEnvsResponseBodyProjectsResponseTargetType string

const (
	FilterProjectEnvsResponseBodyProjectsResponseTargetTypeArrayOfFilterProjectEnvsTargetProjectsResponse1 FilterProjectEnvsResponseBodyProjectsResponseTargetType = "arrayOfFilterProjectEnvsTargetProjectsResponse1"
	FilterProjectEnvsResponseBodyProjectsResponseTargetTypeFilterProjectEnvsTargetProjectsResponse2        FilterProjectEnvsResponseBodyProjectsResponseTargetType = "filterProjectEnvs_target_projects_response_2"
)

type FilterProjectEnvsResponseBodyProjectsResponseTarget struct {
	ArrayOfFilterProjectEnvsTargetProjectsResponse1 []FilterProjectEnvsTargetProjectsResponse1
	FilterProjectEnvsTargetProjectsResponse2        *FilterProjectEnvsTargetProjectsResponse2

	Type FilterProjectEnvsResponseBodyProjectsResponseTargetType
}

func CreateFilterProjectEnvsResponseBodyProjectsResponseTargetArrayOfFilterProjectEnvsTargetProjectsResponse1(arrayOfFilterProjectEnvsTargetProjectsResponse1 []FilterProjectEnvsTargetProjectsResponse1) FilterProjectEnvsResponseBodyProjectsResponseTarget {
	typ := FilterProjectEnvsResponseBodyProjectsResponseTargetTypeArrayOfFilterProjectEnvsTargetProjectsResponse1

	return FilterProjectEnvsResponseBodyProjectsResponseTarget{
		ArrayOfFilterProjectEnvsTargetProjectsResponse1: arrayOfFilterProjectEnvsTargetProjectsResponse1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsResponseTargetFilterProjectEnvsTargetProjectsResponse2(filterProjectEnvsTargetProjectsResponse2 FilterProjectEnvsTargetProjectsResponse2) FilterProjectEnvsResponseBodyProjectsResponseTarget {
	typ := FilterProjectEnvsResponseBodyProjectsResponseTargetTypeFilterProjectEnvsTargetProjectsResponse2

	return FilterProjectEnvsResponseBodyProjectsResponseTarget{
		FilterProjectEnvsTargetProjectsResponse2: &filterProjectEnvsTargetProjectsResponse2,
		Type:                                     typ,
	}
}

func (u *FilterProjectEnvsResponseBodyProjectsResponseTarget) UnmarshalJSON(data []byte) error {

	var arrayOfFilterProjectEnvsTargetProjectsResponse1 []FilterProjectEnvsTargetProjectsResponse1 = []FilterProjectEnvsTargetProjectsResponse1{}
	if err := utils.UnmarshalJSON(data, &arrayOfFilterProjectEnvsTargetProjectsResponse1, "", true, true); err == nil {
		u.ArrayOfFilterProjectEnvsTargetProjectsResponse1 = arrayOfFilterProjectEnvsTargetProjectsResponse1
		u.Type = FilterProjectEnvsResponseBodyProjectsResponseTargetTypeArrayOfFilterProjectEnvsTargetProjectsResponse1
		return nil
	}

	var filterProjectEnvsTargetProjectsResponse2 FilterProjectEnvsTargetProjectsResponse2 = FilterProjectEnvsTargetProjectsResponse2("")
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsTargetProjectsResponse2, "", true, true); err == nil {
		u.FilterProjectEnvsTargetProjectsResponse2 = &filterProjectEnvsTargetProjectsResponse2
		u.Type = FilterProjectEnvsResponseBodyProjectsResponseTargetTypeFilterProjectEnvsTargetProjectsResponse2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsResponseBodyProjectsResponseTarget", string(data))
}

func (u FilterProjectEnvsResponseBodyProjectsResponseTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfFilterProjectEnvsTargetProjectsResponse1 != nil {
		return utils.MarshalJSON(u.ArrayOfFilterProjectEnvsTargetProjectsResponse1, "", true)
	}

	if u.FilterProjectEnvsTargetProjectsResponse2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsTargetProjectsResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsResponseBodyProjectsResponseTarget: all fields are null")
}

type FilterProjectEnvsResponseBodyProjectsResponse200Type string

const (
	FilterProjectEnvsResponseBodyProjectsResponse200TypeSystem    FilterProjectEnvsResponseBodyProjectsResponse200Type = "system"
	FilterProjectEnvsResponseBodyProjectsResponse200TypeEncrypted FilterProjectEnvsResponseBodyProjectsResponse200Type = "encrypted"
	FilterProjectEnvsResponseBodyProjectsResponse200TypePlain     FilterProjectEnvsResponseBodyProjectsResponse200Type = "plain"
	FilterProjectEnvsResponseBodyProjectsResponse200TypeSensitive FilterProjectEnvsResponseBodyProjectsResponse200Type = "sensitive"
	FilterProjectEnvsResponseBodyProjectsResponse200TypeSecret    FilterProjectEnvsResponseBodyProjectsResponse200Type = "secret"
)

func (e FilterProjectEnvsResponseBodyProjectsResponse200Type) ToPointer() *FilterProjectEnvsResponseBodyProjectsResponse200Type {
	return &e
}
func (e *FilterProjectEnvsResponseBodyProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = FilterProjectEnvsResponseBodyProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsResponseBodyProjectsResponse200Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15TypeFlagsConnectionString FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type = "flags-connection-string"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse15 struct {
	Type      FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type `json:"type"`
	ProjectID string                                                                                `json:"projectId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse15) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs15Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse15) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14TypeIntegrationStoreSecret FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type = "integration-store-secret"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse14 struct {
	Type                       FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type `json:"type"`
	StoreID                    string                                                                                `json:"storeId"`
	IntegrationID              string                                                                                `json:"integrationId"`
	IntegrationProductID       string                                                                                `json:"integrationProductId"`
	IntegrationConfigurationID string                                                                                `json:"integrationConfigurationId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse14) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsContentHintProjectsResponse14) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *FilterProjectEnvsContentHintProjectsResponse14) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *FilterProjectEnvsContentHintProjectsResponse14) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13TypePostgresURLNoSsl FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type = "postgres-url-no-ssl"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse13 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse13) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12TypePostgresDatabase FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type = "postgres-database"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse12 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse12) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11TypePostgresPassword FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type = "postgres-password"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse11 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse11) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10TypePostgresHost FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type = "postgres-host"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse10 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse10) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9TypePostgresUser FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type = "postgres-user"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse9 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse9) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8TypePostgresPrismaURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type = "postgres-prisma-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse8 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse8) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7TypePostgresURLNonPooling FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type = "postgres-url-non-pooling"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse7 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse7) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6TypePostgresURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type = "postgres-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse6 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse6) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5TypeBlobReadWriteToken FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type = "blob-read-write-token"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse5 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse5) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4TypeRedisRestAPIReadOnlyToken FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse4 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse4) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3TypeRedisRestAPIToken FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type = "redis-rest-api-token"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse3 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse3) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsTypeRedisRestAPIURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType = "redis-rest-api-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse2 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType `json:"type"`
	StoreID string                                                                              `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse2) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3TypeRedisURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type = "redis-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse1 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjectsResponse1) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjectsResponse1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsResponseBodyProjectsContentHintType string

const (
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse1  FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_1"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse2  FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_2"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse3  FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_3"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse4  FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_4"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse5  FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_5"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse6  FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_6"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse7  FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_7"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse8  FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_8"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse9  FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_9"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse10 FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_10"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse11 FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_11"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse12 FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_12"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse13 FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_13"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse14 FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_14"
	FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse15 FilterProjectEnvsResponseBodyProjectsContentHintType = "filterProjectEnvs_contentHint_projects_response_15"
)

type FilterProjectEnvsResponseBodyProjectsContentHint struct {
	FilterProjectEnvsContentHintProjectsResponse1  *FilterProjectEnvsContentHintProjectsResponse1
	FilterProjectEnvsContentHintProjectsResponse2  *FilterProjectEnvsContentHintProjectsResponse2
	FilterProjectEnvsContentHintProjectsResponse3  *FilterProjectEnvsContentHintProjectsResponse3
	FilterProjectEnvsContentHintProjectsResponse4  *FilterProjectEnvsContentHintProjectsResponse4
	FilterProjectEnvsContentHintProjectsResponse5  *FilterProjectEnvsContentHintProjectsResponse5
	FilterProjectEnvsContentHintProjectsResponse6  *FilterProjectEnvsContentHintProjectsResponse6
	FilterProjectEnvsContentHintProjectsResponse7  *FilterProjectEnvsContentHintProjectsResponse7
	FilterProjectEnvsContentHintProjectsResponse8  *FilterProjectEnvsContentHintProjectsResponse8
	FilterProjectEnvsContentHintProjectsResponse9  *FilterProjectEnvsContentHintProjectsResponse9
	FilterProjectEnvsContentHintProjectsResponse10 *FilterProjectEnvsContentHintProjectsResponse10
	FilterProjectEnvsContentHintProjectsResponse11 *FilterProjectEnvsContentHintProjectsResponse11
	FilterProjectEnvsContentHintProjectsResponse12 *FilterProjectEnvsContentHintProjectsResponse12
	FilterProjectEnvsContentHintProjectsResponse13 *FilterProjectEnvsContentHintProjectsResponse13
	FilterProjectEnvsContentHintProjectsResponse14 *FilterProjectEnvsContentHintProjectsResponse14
	FilterProjectEnvsContentHintProjectsResponse15 *FilterProjectEnvsContentHintProjectsResponse15

	Type FilterProjectEnvsResponseBodyProjectsContentHintType
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse1(filterProjectEnvsContentHintProjectsResponse1 FilterProjectEnvsContentHintProjectsResponse1) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse1

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse1: &filterProjectEnvsContentHintProjectsResponse1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse2(filterProjectEnvsContentHintProjectsResponse2 FilterProjectEnvsContentHintProjectsResponse2) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse2

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse2: &filterProjectEnvsContentHintProjectsResponse2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse3(filterProjectEnvsContentHintProjectsResponse3 FilterProjectEnvsContentHintProjectsResponse3) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse3

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse3: &filterProjectEnvsContentHintProjectsResponse3,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse4(filterProjectEnvsContentHintProjectsResponse4 FilterProjectEnvsContentHintProjectsResponse4) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse4

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse4: &filterProjectEnvsContentHintProjectsResponse4,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse5(filterProjectEnvsContentHintProjectsResponse5 FilterProjectEnvsContentHintProjectsResponse5) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse5

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse5: &filterProjectEnvsContentHintProjectsResponse5,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse6(filterProjectEnvsContentHintProjectsResponse6 FilterProjectEnvsContentHintProjectsResponse6) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse6

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse6: &filterProjectEnvsContentHintProjectsResponse6,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse7(filterProjectEnvsContentHintProjectsResponse7 FilterProjectEnvsContentHintProjectsResponse7) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse7

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse7: &filterProjectEnvsContentHintProjectsResponse7,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse8(filterProjectEnvsContentHintProjectsResponse8 FilterProjectEnvsContentHintProjectsResponse8) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse8

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse8: &filterProjectEnvsContentHintProjectsResponse8,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse9(filterProjectEnvsContentHintProjectsResponse9 FilterProjectEnvsContentHintProjectsResponse9) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse9

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse9: &filterProjectEnvsContentHintProjectsResponse9,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse10(filterProjectEnvsContentHintProjectsResponse10 FilterProjectEnvsContentHintProjectsResponse10) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse10

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse10: &filterProjectEnvsContentHintProjectsResponse10,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse11(filterProjectEnvsContentHintProjectsResponse11 FilterProjectEnvsContentHintProjectsResponse11) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse11

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse11: &filterProjectEnvsContentHintProjectsResponse11,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse12(filterProjectEnvsContentHintProjectsResponse12 FilterProjectEnvsContentHintProjectsResponse12) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse12

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse12: &filterProjectEnvsContentHintProjectsResponse12,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse13(filterProjectEnvsContentHintProjectsResponse13 FilterProjectEnvsContentHintProjectsResponse13) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse13

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse13: &filterProjectEnvsContentHintProjectsResponse13,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse14(filterProjectEnvsContentHintProjectsResponse14 FilterProjectEnvsContentHintProjectsResponse14) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse14

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse14: &filterProjectEnvsContentHintProjectsResponse14,
		Type: typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsContentHintFilterProjectEnvsContentHintProjectsResponse15(filterProjectEnvsContentHintProjectsResponse15 FilterProjectEnvsContentHintProjectsResponse15) FilterProjectEnvsResponseBodyProjectsContentHint {
	typ := FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse15

	return FilterProjectEnvsResponseBodyProjectsContentHint{
		FilterProjectEnvsContentHintProjectsResponse15: &filterProjectEnvsContentHintProjectsResponse15,
		Type: typ,
	}
}

func (u *FilterProjectEnvsResponseBodyProjectsContentHint) UnmarshalJSON(data []byte) error {

	var filterProjectEnvsContentHintProjectsResponse7 FilterProjectEnvsContentHintProjectsResponse7 = FilterProjectEnvsContentHintProjectsResponse7{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse7, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse7 = &filterProjectEnvsContentHintProjectsResponse7
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse7
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse11 FilterProjectEnvsContentHintProjectsResponse11 = FilterProjectEnvsContentHintProjectsResponse11{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse11, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse11 = &filterProjectEnvsContentHintProjectsResponse11
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse11
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse3 FilterProjectEnvsContentHintProjectsResponse3 = FilterProjectEnvsContentHintProjectsResponse3{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse3, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse3 = &filterProjectEnvsContentHintProjectsResponse3
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse3
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse4 FilterProjectEnvsContentHintProjectsResponse4 = FilterProjectEnvsContentHintProjectsResponse4{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse4, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse4 = &filterProjectEnvsContentHintProjectsResponse4
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse4
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse5 FilterProjectEnvsContentHintProjectsResponse5 = FilterProjectEnvsContentHintProjectsResponse5{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse5, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse5 = &filterProjectEnvsContentHintProjectsResponse5
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse5
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse6 FilterProjectEnvsContentHintProjectsResponse6 = FilterProjectEnvsContentHintProjectsResponse6{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse6, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse6 = &filterProjectEnvsContentHintProjectsResponse6
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse6
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse2 FilterProjectEnvsContentHintProjectsResponse2 = FilterProjectEnvsContentHintProjectsResponse2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse2 = &filterProjectEnvsContentHintProjectsResponse2
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse2
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse9 FilterProjectEnvsContentHintProjectsResponse9 = FilterProjectEnvsContentHintProjectsResponse9{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse9, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse9 = &filterProjectEnvsContentHintProjectsResponse9
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse9
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse1 FilterProjectEnvsContentHintProjectsResponse1 = FilterProjectEnvsContentHintProjectsResponse1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse1 = &filterProjectEnvsContentHintProjectsResponse1
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse1
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse10 FilterProjectEnvsContentHintProjectsResponse10 = FilterProjectEnvsContentHintProjectsResponse10{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse10, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse10 = &filterProjectEnvsContentHintProjectsResponse10
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse10
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse8 FilterProjectEnvsContentHintProjectsResponse8 = FilterProjectEnvsContentHintProjectsResponse8{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse8, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse8 = &filterProjectEnvsContentHintProjectsResponse8
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse8
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse12 FilterProjectEnvsContentHintProjectsResponse12 = FilterProjectEnvsContentHintProjectsResponse12{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse12, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse12 = &filterProjectEnvsContentHintProjectsResponse12
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse12
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse13 FilterProjectEnvsContentHintProjectsResponse13 = FilterProjectEnvsContentHintProjectsResponse13{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse13, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse13 = &filterProjectEnvsContentHintProjectsResponse13
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse13
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse15 FilterProjectEnvsContentHintProjectsResponse15 = FilterProjectEnvsContentHintProjectsResponse15{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse15, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse15 = &filterProjectEnvsContentHintProjectsResponse15
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse15
		return nil
	}

	var filterProjectEnvsContentHintProjectsResponse14 FilterProjectEnvsContentHintProjectsResponse14 = FilterProjectEnvsContentHintProjectsResponse14{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjectsResponse14, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjectsResponse14 = &filterProjectEnvsContentHintProjectsResponse14
		u.Type = FilterProjectEnvsResponseBodyProjectsContentHintTypeFilterProjectEnvsContentHintProjectsResponse14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsResponseBodyProjectsContentHint", string(data))
}

func (u FilterProjectEnvsResponseBodyProjectsContentHint) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsContentHintProjectsResponse1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse1, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse2, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse3, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse4, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse5 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse5, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse6 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse6, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse7 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse7, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse8 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse8, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse9 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse9, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse10 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse10, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse11 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse11, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse12 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse12, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse13 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse13, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse14 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse14, "", true)
	}

	if u.FilterProjectEnvsContentHintProjectsResponse15 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjectsResponse15, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsResponseBodyProjectsContentHint: all fields are null")
}

type FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type string

const (
	FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3TypeFlagsSecret FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type = "flags-secret"
)

func (e FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type) ToPointer() *FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type {
	return &e
}
func (e *FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type: %v", v)
	}
}

// FilterProjectEnvsResponseBodyProjectsInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type FilterProjectEnvsResponseBodyProjectsInternalContentHint struct {
	Type FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *FilterProjectEnvsResponseBodyProjectsInternalContentHint) GetType() FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type {
	if o == nil {
		return FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSON3Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsResponseBodyProjectsInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type ResponseBodyEnvs struct {
	Target *FilterProjectEnvsResponseBodyProjectsResponseTarget  `json:"target,omitempty"`
	Type   *FilterProjectEnvsResponseBodyProjectsResponse200Type `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                                           `json:"sunsetSecretId,omitempty"`
	ID                *string                                           `json:"id,omitempty"`
	Key               *string                                           `json:"key,omitempty"`
	Value             *string                                           `json:"value,omitempty"`
	ConfigurationID   *string                                           `json:"configurationId,omitempty"`
	CreatedAt         *float64                                          `json:"createdAt,omitempty"`
	UpdatedAt         *float64                                          `json:"updatedAt,omitempty"`
	CreatedBy         *string                                           `json:"createdBy,omitempty"`
	UpdatedBy         *string                                           `json:"updatedBy,omitempty"`
	GitBranch         *string                                           `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                                           `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                           `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *FilterProjectEnvsResponseBodyProjectsContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *FilterProjectEnvsResponseBodyProjectsInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` and `vsmValue` are decrypted.
	Decrypted            *bool    `json:"decrypted,omitempty"`
	Comment              *string  `json:"comment,omitempty"`
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	VsmValue             *string  `json:"vsmValue,omitempty"`
	System               *bool    `json:"system,omitempty"`
}

func (o *ResponseBodyEnvs) GetTarget() *FilterProjectEnvsResponseBodyProjectsResponseTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *ResponseBodyEnvs) GetType() *FilterProjectEnvsResponseBodyProjectsResponse200Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ResponseBodyEnvs) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *ResponseBodyEnvs) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ResponseBodyEnvs) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *ResponseBodyEnvs) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *ResponseBodyEnvs) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *ResponseBodyEnvs) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ResponseBodyEnvs) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ResponseBodyEnvs) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *ResponseBodyEnvs) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *ResponseBodyEnvs) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *ResponseBodyEnvs) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *ResponseBodyEnvs) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *ResponseBodyEnvs) GetContentHint() *FilterProjectEnvsResponseBodyProjectsContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *ResponseBodyEnvs) GetInternalContentHint() *FilterProjectEnvsResponseBodyProjectsInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *ResponseBodyEnvs) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *ResponseBodyEnvs) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *ResponseBodyEnvs) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *ResponseBodyEnvs) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *ResponseBodyEnvs) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

// FilterProjectEnvsResponseBody3 - The list of environment variables for the given project
type FilterProjectEnvsResponseBody3 struct {
	Envs []ResponseBodyEnvs `json:"envs"`
}

func (o *FilterProjectEnvsResponseBody3) GetEnvs() []ResponseBodyEnvs {
	if o == nil {
		return []ResponseBodyEnvs{}
	}
	return o.Envs
}

type FilterProjectEnvsTargetProjects2 string

const (
	FilterProjectEnvsTargetProjects2Production  FilterProjectEnvsTargetProjects2 = "production"
	FilterProjectEnvsTargetProjects2Preview     FilterProjectEnvsTargetProjects2 = "preview"
	FilterProjectEnvsTargetProjects2Development FilterProjectEnvsTargetProjects2 = "development"
)

func (e FilterProjectEnvsTargetProjects2) ToPointer() *FilterProjectEnvsTargetProjects2 {
	return &e
}
func (e *FilterProjectEnvsTargetProjects2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetProjects2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetProjects2: %v", v)
	}
}

type FilterProjectEnvsTargetProjects1 string

const (
	FilterProjectEnvsTargetProjects1Production  FilterProjectEnvsTargetProjects1 = "production"
	FilterProjectEnvsTargetProjects1Preview     FilterProjectEnvsTargetProjects1 = "preview"
	FilterProjectEnvsTargetProjects1Development FilterProjectEnvsTargetProjects1 = "development"
)

func (e FilterProjectEnvsTargetProjects1) ToPointer() *FilterProjectEnvsTargetProjects1 {
	return &e
}
func (e *FilterProjectEnvsTargetProjects1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetProjects1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetProjects1: %v", v)
	}
}

type FilterProjectEnvsResponseBodyProjectsTargetType string

const (
	FilterProjectEnvsResponseBodyProjectsTargetTypeArrayOfFilterProjectEnvsTargetProjects1 FilterProjectEnvsResponseBodyProjectsTargetType = "arrayOfFilterProjectEnvsTargetProjects1"
	FilterProjectEnvsResponseBodyProjectsTargetTypeFilterProjectEnvsTargetProjects2        FilterProjectEnvsResponseBodyProjectsTargetType = "filterProjectEnvs_target_projects_2"
)

type FilterProjectEnvsResponseBodyProjectsTarget struct {
	ArrayOfFilterProjectEnvsTargetProjects1 []FilterProjectEnvsTargetProjects1
	FilterProjectEnvsTargetProjects2        *FilterProjectEnvsTargetProjects2

	Type FilterProjectEnvsResponseBodyProjectsTargetType
}

func CreateFilterProjectEnvsResponseBodyProjectsTargetArrayOfFilterProjectEnvsTargetProjects1(arrayOfFilterProjectEnvsTargetProjects1 []FilterProjectEnvsTargetProjects1) FilterProjectEnvsResponseBodyProjectsTarget {
	typ := FilterProjectEnvsResponseBodyProjectsTargetTypeArrayOfFilterProjectEnvsTargetProjects1

	return FilterProjectEnvsResponseBodyProjectsTarget{
		ArrayOfFilterProjectEnvsTargetProjects1: arrayOfFilterProjectEnvsTargetProjects1,
		Type:                                    typ,
	}
}

func CreateFilterProjectEnvsResponseBodyProjectsTargetFilterProjectEnvsTargetProjects2(filterProjectEnvsTargetProjects2 FilterProjectEnvsTargetProjects2) FilterProjectEnvsResponseBodyProjectsTarget {
	typ := FilterProjectEnvsResponseBodyProjectsTargetTypeFilterProjectEnvsTargetProjects2

	return FilterProjectEnvsResponseBodyProjectsTarget{
		FilterProjectEnvsTargetProjects2: &filterProjectEnvsTargetProjects2,
		Type:                             typ,
	}
}

func (u *FilterProjectEnvsResponseBodyProjectsTarget) UnmarshalJSON(data []byte) error {

	var arrayOfFilterProjectEnvsTargetProjects1 []FilterProjectEnvsTargetProjects1 = []FilterProjectEnvsTargetProjects1{}
	if err := utils.UnmarshalJSON(data, &arrayOfFilterProjectEnvsTargetProjects1, "", true, true); err == nil {
		u.ArrayOfFilterProjectEnvsTargetProjects1 = arrayOfFilterProjectEnvsTargetProjects1
		u.Type = FilterProjectEnvsResponseBodyProjectsTargetTypeArrayOfFilterProjectEnvsTargetProjects1
		return nil
	}

	var filterProjectEnvsTargetProjects2 FilterProjectEnvsTargetProjects2 = FilterProjectEnvsTargetProjects2("")
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsTargetProjects2, "", true, true); err == nil {
		u.FilterProjectEnvsTargetProjects2 = &filterProjectEnvsTargetProjects2
		u.Type = FilterProjectEnvsResponseBodyProjectsTargetTypeFilterProjectEnvsTargetProjects2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsResponseBodyProjectsTarget", string(data))
}

func (u FilterProjectEnvsResponseBodyProjectsTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfFilterProjectEnvsTargetProjects1 != nil {
		return utils.MarshalJSON(u.ArrayOfFilterProjectEnvsTargetProjects1, "", true)
	}

	if u.FilterProjectEnvsTargetProjects2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsTargetProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsResponseBodyProjectsTarget: all fields are null")
}

type FilterProjectEnvsResponseBodyProjectsResponseType string

const (
	FilterProjectEnvsResponseBodyProjectsResponseTypeSystem    FilterProjectEnvsResponseBodyProjectsResponseType = "system"
	FilterProjectEnvsResponseBodyProjectsResponseTypeEncrypted FilterProjectEnvsResponseBodyProjectsResponseType = "encrypted"
	FilterProjectEnvsResponseBodyProjectsResponseTypePlain     FilterProjectEnvsResponseBodyProjectsResponseType = "plain"
	FilterProjectEnvsResponseBodyProjectsResponseTypeSensitive FilterProjectEnvsResponseBodyProjectsResponseType = "sensitive"
	FilterProjectEnvsResponseBodyProjectsResponseTypeSecret    FilterProjectEnvsResponseBodyProjectsResponseType = "secret"
)

func (e FilterProjectEnvsResponseBodyProjectsResponseType) ToPointer() *FilterProjectEnvsResponseBodyProjectsResponseType {
	return &e
}
func (e *FilterProjectEnvsResponseBodyProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = FilterProjectEnvsResponseBodyProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsResponseBodyProjectsResponseType: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15TypeFlagsConnectionString FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type = "flags-connection-string"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects15 struct {
	Type      FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type `json:"type"`
	ProjectID string                                                                                `json:"projectId"`
}

func (o *FilterProjectEnvsContentHintProjects15) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs15Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects15) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14TypeIntegrationStoreSecret FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type = "integration-store-secret"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects14 struct {
	Type                       FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type `json:"type"`
	StoreID                    string                                                                                `json:"storeId"`
	IntegrationID              string                                                                                `json:"integrationId"`
	IntegrationProductID       string                                                                                `json:"integrationProductId"`
	IntegrationConfigurationID string                                                                                `json:"integrationConfigurationId"`
}

func (o *FilterProjectEnvsContentHintProjects14) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsContentHintProjects14) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *FilterProjectEnvsContentHintProjects14) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *FilterProjectEnvsContentHintProjects14) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13TypePostgresURLNoSsl FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type = "postgres-url-no-ssl"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects13 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects13) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12TypePostgresDatabase FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type = "postgres-database"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects12 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects12) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11TypePostgresPassword FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type = "postgres-password"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects11 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects11) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10TypePostgresHost FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type = "postgres-host"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects10 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type `json:"type"`
	StoreID string                                                                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects10) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9TypePostgresUser FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type = "postgres-user"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects9 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects9) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8TypePostgresPrismaURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type = "postgres-prisma-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects8 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects8) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7TypePostgresURLNonPooling FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type = "postgres-url-non-pooling"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects7 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects7) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6TypePostgresURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type = "postgres-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects6 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects6) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5TypeBlobReadWriteToken FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type = "blob-read-write-token"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects5 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects5) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4TypeRedisRestAPIReadOnlyToken FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects4 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects4) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3TypeRedisRestAPIToken FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type = "redis-rest-api-token"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects3 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type `json:"type"`
	StoreID string                                                                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects3) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsTypeRedisRestAPIURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType = "redis-rest-api-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects2 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType `json:"type"`
	StoreID string                                                                              `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects2) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2TypeRedisURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type = "redis-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type: %v", v)
	}
}

type FilterProjectEnvsContentHintProjects1 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintProjects1) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintProjects1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsResponseBodyContentHintType string

const (
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects1  FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_1"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects2  FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_2"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects3  FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_3"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects4  FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_4"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects5  FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_5"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects6  FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_6"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects7  FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_7"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects8  FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_8"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects9  FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_9"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects10 FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_10"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects11 FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_11"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects12 FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_12"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects13 FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_13"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects14 FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_14"
	FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects15 FilterProjectEnvsResponseBodyContentHintType = "filterProjectEnvs_contentHint_projects_15"
)

type FilterProjectEnvsResponseBodyContentHint struct {
	FilterProjectEnvsContentHintProjects1  *FilterProjectEnvsContentHintProjects1
	FilterProjectEnvsContentHintProjects2  *FilterProjectEnvsContentHintProjects2
	FilterProjectEnvsContentHintProjects3  *FilterProjectEnvsContentHintProjects3
	FilterProjectEnvsContentHintProjects4  *FilterProjectEnvsContentHintProjects4
	FilterProjectEnvsContentHintProjects5  *FilterProjectEnvsContentHintProjects5
	FilterProjectEnvsContentHintProjects6  *FilterProjectEnvsContentHintProjects6
	FilterProjectEnvsContentHintProjects7  *FilterProjectEnvsContentHintProjects7
	FilterProjectEnvsContentHintProjects8  *FilterProjectEnvsContentHintProjects8
	FilterProjectEnvsContentHintProjects9  *FilterProjectEnvsContentHintProjects9
	FilterProjectEnvsContentHintProjects10 *FilterProjectEnvsContentHintProjects10
	FilterProjectEnvsContentHintProjects11 *FilterProjectEnvsContentHintProjects11
	FilterProjectEnvsContentHintProjects12 *FilterProjectEnvsContentHintProjects12
	FilterProjectEnvsContentHintProjects13 *FilterProjectEnvsContentHintProjects13
	FilterProjectEnvsContentHintProjects14 *FilterProjectEnvsContentHintProjects14
	FilterProjectEnvsContentHintProjects15 *FilterProjectEnvsContentHintProjects15

	Type FilterProjectEnvsResponseBodyContentHintType
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects1(filterProjectEnvsContentHintProjects1 FilterProjectEnvsContentHintProjects1) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects1

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects1: &filterProjectEnvsContentHintProjects1,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects2(filterProjectEnvsContentHintProjects2 FilterProjectEnvsContentHintProjects2) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects2

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects2: &filterProjectEnvsContentHintProjects2,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects3(filterProjectEnvsContentHintProjects3 FilterProjectEnvsContentHintProjects3) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects3

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects3: &filterProjectEnvsContentHintProjects3,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects4(filterProjectEnvsContentHintProjects4 FilterProjectEnvsContentHintProjects4) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects4

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects4: &filterProjectEnvsContentHintProjects4,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects5(filterProjectEnvsContentHintProjects5 FilterProjectEnvsContentHintProjects5) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects5

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects5: &filterProjectEnvsContentHintProjects5,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects6(filterProjectEnvsContentHintProjects6 FilterProjectEnvsContentHintProjects6) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects6

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects6: &filterProjectEnvsContentHintProjects6,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects7(filterProjectEnvsContentHintProjects7 FilterProjectEnvsContentHintProjects7) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects7

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects7: &filterProjectEnvsContentHintProjects7,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects8(filterProjectEnvsContentHintProjects8 FilterProjectEnvsContentHintProjects8) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects8

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects8: &filterProjectEnvsContentHintProjects8,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects9(filterProjectEnvsContentHintProjects9 FilterProjectEnvsContentHintProjects9) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects9

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects9: &filterProjectEnvsContentHintProjects9,
		Type:                                  typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects10(filterProjectEnvsContentHintProjects10 FilterProjectEnvsContentHintProjects10) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects10

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects10: &filterProjectEnvsContentHintProjects10,
		Type:                                   typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects11(filterProjectEnvsContentHintProjects11 FilterProjectEnvsContentHintProjects11) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects11

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects11: &filterProjectEnvsContentHintProjects11,
		Type:                                   typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects12(filterProjectEnvsContentHintProjects12 FilterProjectEnvsContentHintProjects12) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects12

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects12: &filterProjectEnvsContentHintProjects12,
		Type:                                   typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects13(filterProjectEnvsContentHintProjects13 FilterProjectEnvsContentHintProjects13) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects13

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects13: &filterProjectEnvsContentHintProjects13,
		Type:                                   typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects14(filterProjectEnvsContentHintProjects14 FilterProjectEnvsContentHintProjects14) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects14

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects14: &filterProjectEnvsContentHintProjects14,
		Type:                                   typ,
	}
}

func CreateFilterProjectEnvsResponseBodyContentHintFilterProjectEnvsContentHintProjects15(filterProjectEnvsContentHintProjects15 FilterProjectEnvsContentHintProjects15) FilterProjectEnvsResponseBodyContentHint {
	typ := FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects15

	return FilterProjectEnvsResponseBodyContentHint{
		FilterProjectEnvsContentHintProjects15: &filterProjectEnvsContentHintProjects15,
		Type:                                   typ,
	}
}

func (u *FilterProjectEnvsResponseBodyContentHint) UnmarshalJSON(data []byte) error {

	var filterProjectEnvsContentHintProjects7 FilterProjectEnvsContentHintProjects7 = FilterProjectEnvsContentHintProjects7{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects7, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects7 = &filterProjectEnvsContentHintProjects7
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects7
		return nil
	}

	var filterProjectEnvsContentHintProjects11 FilterProjectEnvsContentHintProjects11 = FilterProjectEnvsContentHintProjects11{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects11, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects11 = &filterProjectEnvsContentHintProjects11
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects11
		return nil
	}

	var filterProjectEnvsContentHintProjects3 FilterProjectEnvsContentHintProjects3 = FilterProjectEnvsContentHintProjects3{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects3, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects3 = &filterProjectEnvsContentHintProjects3
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects3
		return nil
	}

	var filterProjectEnvsContentHintProjects4 FilterProjectEnvsContentHintProjects4 = FilterProjectEnvsContentHintProjects4{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects4, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects4 = &filterProjectEnvsContentHintProjects4
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects4
		return nil
	}

	var filterProjectEnvsContentHintProjects5 FilterProjectEnvsContentHintProjects5 = FilterProjectEnvsContentHintProjects5{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects5, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects5 = &filterProjectEnvsContentHintProjects5
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects5
		return nil
	}

	var filterProjectEnvsContentHintProjects6 FilterProjectEnvsContentHintProjects6 = FilterProjectEnvsContentHintProjects6{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects6, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects6 = &filterProjectEnvsContentHintProjects6
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects6
		return nil
	}

	var filterProjectEnvsContentHintProjects2 FilterProjectEnvsContentHintProjects2 = FilterProjectEnvsContentHintProjects2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects2 = &filterProjectEnvsContentHintProjects2
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects2
		return nil
	}

	var filterProjectEnvsContentHintProjects9 FilterProjectEnvsContentHintProjects9 = FilterProjectEnvsContentHintProjects9{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects9, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects9 = &filterProjectEnvsContentHintProjects9
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects9
		return nil
	}

	var filterProjectEnvsContentHintProjects1 FilterProjectEnvsContentHintProjects1 = FilterProjectEnvsContentHintProjects1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects1 = &filterProjectEnvsContentHintProjects1
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects1
		return nil
	}

	var filterProjectEnvsContentHintProjects10 FilterProjectEnvsContentHintProjects10 = FilterProjectEnvsContentHintProjects10{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects10, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects10 = &filterProjectEnvsContentHintProjects10
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects10
		return nil
	}

	var filterProjectEnvsContentHintProjects8 FilterProjectEnvsContentHintProjects8 = FilterProjectEnvsContentHintProjects8{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects8, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects8 = &filterProjectEnvsContentHintProjects8
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects8
		return nil
	}

	var filterProjectEnvsContentHintProjects12 FilterProjectEnvsContentHintProjects12 = FilterProjectEnvsContentHintProjects12{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects12, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects12 = &filterProjectEnvsContentHintProjects12
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects12
		return nil
	}

	var filterProjectEnvsContentHintProjects13 FilterProjectEnvsContentHintProjects13 = FilterProjectEnvsContentHintProjects13{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects13, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects13 = &filterProjectEnvsContentHintProjects13
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects13
		return nil
	}

	var filterProjectEnvsContentHintProjects15 FilterProjectEnvsContentHintProjects15 = FilterProjectEnvsContentHintProjects15{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects15, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects15 = &filterProjectEnvsContentHintProjects15
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects15
		return nil
	}

	var filterProjectEnvsContentHintProjects14 FilterProjectEnvsContentHintProjects14 = FilterProjectEnvsContentHintProjects14{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintProjects14, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintProjects14 = &filterProjectEnvsContentHintProjects14
		u.Type = FilterProjectEnvsResponseBodyContentHintTypeFilterProjectEnvsContentHintProjects14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsResponseBodyContentHint", string(data))
}

func (u FilterProjectEnvsResponseBodyContentHint) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsContentHintProjects1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects1, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects2, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects3, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects4, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects5 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects5, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects6 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects6, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects7 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects7, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects8 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects8, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects9 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects9, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects10 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects10, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects11 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects11, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects12 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects12, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects13 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects13, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects14 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects14, "", true)
	}

	if u.FilterProjectEnvsContentHintProjects15 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintProjects15, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsResponseBodyContentHint: all fields are null")
}

type FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType string

const (
	FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONTypeFlagsSecret FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType = "flags-secret"
)

func (e FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType) ToPointer() *FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType: %v", v)
	}
}

// FilterProjectEnvsResponseBodyInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type FilterProjectEnvsResponseBodyInternalContentHint struct {
	Type FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *FilterProjectEnvsResponseBodyInternalContentHint) GetType() FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType {
	if o == nil {
		return FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FilterProjectEnvsResponseBodyInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type Envs struct {
	Target *FilterProjectEnvsResponseBodyProjectsTarget       `json:"target,omitempty"`
	Type   *FilterProjectEnvsResponseBodyProjectsResponseType `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                                   `json:"sunsetSecretId,omitempty"`
	ID                *string                                   `json:"id,omitempty"`
	Key               *string                                   `json:"key,omitempty"`
	Value             *string                                   `json:"value,omitempty"`
	ConfigurationID   *string                                   `json:"configurationId,omitempty"`
	CreatedAt         *float64                                  `json:"createdAt,omitempty"`
	UpdatedAt         *float64                                  `json:"updatedAt,omitempty"`
	CreatedBy         *string                                   `json:"createdBy,omitempty"`
	UpdatedBy         *string                                   `json:"updatedBy,omitempty"`
	GitBranch         *string                                   `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                                   `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                   `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *FilterProjectEnvsResponseBodyContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *FilterProjectEnvsResponseBodyInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` and `vsmValue` are decrypted.
	Decrypted            *bool    `json:"decrypted,omitempty"`
	Comment              *string  `json:"comment,omitempty"`
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	VsmValue             *string  `json:"vsmValue,omitempty"`
	System               *bool    `json:"system,omitempty"`
}

func (o *Envs) GetTarget() *FilterProjectEnvsResponseBodyProjectsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Envs) GetType() *FilterProjectEnvsResponseBodyProjectsResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Envs) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *Envs) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Envs) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Envs) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Envs) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *Envs) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Envs) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Envs) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Envs) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Envs) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Envs) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *Envs) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *Envs) GetContentHint() *FilterProjectEnvsResponseBodyContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *Envs) GetInternalContentHint() *FilterProjectEnvsResponseBodyInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *Envs) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Envs) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Envs) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *Envs) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *Envs) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

type FilterProjectEnvsResponseBody2 struct {
	Envs []Envs `json:"envs"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination components.Pagination `json:"pagination"`
}

func (o *FilterProjectEnvsResponseBody2) GetEnvs() []Envs {
	if o == nil {
		return []Envs{}
	}
	return o.Envs
}

func (o *FilterProjectEnvsResponseBody2) GetPagination() components.Pagination {
	if o == nil {
		return components.Pagination{}
	}
	return o.Pagination
}

type FilterProjectEnvsTarget2 string

const (
	FilterProjectEnvsTarget2Production  FilterProjectEnvsTarget2 = "production"
	FilterProjectEnvsTarget2Preview     FilterProjectEnvsTarget2 = "preview"
	FilterProjectEnvsTarget2Development FilterProjectEnvsTarget2 = "development"
)

func (e FilterProjectEnvsTarget2) ToPointer() *FilterProjectEnvsTarget2 {
	return &e
}
func (e *FilterProjectEnvsTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTarget2: %v", v)
	}
}

type FilterProjectEnvsTarget1 string

const (
	FilterProjectEnvsTarget1Production  FilterProjectEnvsTarget1 = "production"
	FilterProjectEnvsTarget1Preview     FilterProjectEnvsTarget1 = "preview"
	FilterProjectEnvsTarget1Development FilterProjectEnvsTarget1 = "development"
)

func (e FilterProjectEnvsTarget1) ToPointer() *FilterProjectEnvsTarget1 {
	return &e
}
func (e *FilterProjectEnvsTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTarget1: %v", v)
	}
}

type FilterProjectEnvsResponseBodyTargetType string

const (
	FilterProjectEnvsResponseBodyTargetTypeArrayOfFilterProjectEnvsTarget1 FilterProjectEnvsResponseBodyTargetType = "arrayOfFilterProjectEnvsTarget1"
	FilterProjectEnvsResponseBodyTargetTypeFilterProjectEnvsTarget2        FilterProjectEnvsResponseBodyTargetType = "filterProjectEnvs_target_2"
)

type FilterProjectEnvsResponseBodyTarget struct {
	ArrayOfFilterProjectEnvsTarget1 []FilterProjectEnvsTarget1
	FilterProjectEnvsTarget2        *FilterProjectEnvsTarget2

	Type FilterProjectEnvsResponseBodyTargetType
}

func CreateFilterProjectEnvsResponseBodyTargetArrayOfFilterProjectEnvsTarget1(arrayOfFilterProjectEnvsTarget1 []FilterProjectEnvsTarget1) FilterProjectEnvsResponseBodyTarget {
	typ := FilterProjectEnvsResponseBodyTargetTypeArrayOfFilterProjectEnvsTarget1

	return FilterProjectEnvsResponseBodyTarget{
		ArrayOfFilterProjectEnvsTarget1: arrayOfFilterProjectEnvsTarget1,
		Type:                            typ,
	}
}

func CreateFilterProjectEnvsResponseBodyTargetFilterProjectEnvsTarget2(filterProjectEnvsTarget2 FilterProjectEnvsTarget2) FilterProjectEnvsResponseBodyTarget {
	typ := FilterProjectEnvsResponseBodyTargetTypeFilterProjectEnvsTarget2

	return FilterProjectEnvsResponseBodyTarget{
		FilterProjectEnvsTarget2: &filterProjectEnvsTarget2,
		Type:                     typ,
	}
}

func (u *FilterProjectEnvsResponseBodyTarget) UnmarshalJSON(data []byte) error {

	var arrayOfFilterProjectEnvsTarget1 []FilterProjectEnvsTarget1 = []FilterProjectEnvsTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfFilterProjectEnvsTarget1, "", true, true); err == nil {
		u.ArrayOfFilterProjectEnvsTarget1 = arrayOfFilterProjectEnvsTarget1
		u.Type = FilterProjectEnvsResponseBodyTargetTypeArrayOfFilterProjectEnvsTarget1
		return nil
	}

	var filterProjectEnvsTarget2 FilterProjectEnvsTarget2 = FilterProjectEnvsTarget2("")
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsTarget2, "", true, true); err == nil {
		u.FilterProjectEnvsTarget2 = &filterProjectEnvsTarget2
		u.Type = FilterProjectEnvsResponseBodyTargetTypeFilterProjectEnvsTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsResponseBodyTarget", string(data))
}

func (u FilterProjectEnvsResponseBodyTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfFilterProjectEnvsTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfFilterProjectEnvsTarget1, "", true)
	}

	if u.FilterProjectEnvsTarget2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsResponseBodyTarget: all fields are null")
}

type FilterProjectEnvsResponseBodyType string

const (
	FilterProjectEnvsResponseBodyTypeSystem    FilterProjectEnvsResponseBodyType = "system"
	FilterProjectEnvsResponseBodyTypeEncrypted FilterProjectEnvsResponseBodyType = "encrypted"
	FilterProjectEnvsResponseBodyTypePlain     FilterProjectEnvsResponseBodyType = "plain"
	FilterProjectEnvsResponseBodyTypeSensitive FilterProjectEnvsResponseBodyType = "sensitive"
	FilterProjectEnvsResponseBodyTypeSecret    FilterProjectEnvsResponseBodyType = "secret"
)

func (e FilterProjectEnvsResponseBodyType) ToPointer() *FilterProjectEnvsResponseBodyType {
	return &e
}
func (e *FilterProjectEnvsResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = FilterProjectEnvsResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsResponseBodyType: %v", v)
	}
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115TypeFlagsConnectionString FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type = "flags-connection-string"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type: %v", v)
	}
}

type FilterProjectEnvsContentHint15 struct {
	Type      FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type `json:"type"`
	ProjectID string                                                                            `json:"projectId"`
}

func (o *FilterProjectEnvsContentHint15) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody115Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint15) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114TypeIntegrationStoreSecret FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type = "integration-store-secret"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type: %v", v)
	}
}

type FilterProjectEnvsContentHint14 struct {
	Type                       FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type `json:"type"`
	StoreID                    string                                                                            `json:"storeId"`
	IntegrationID              string                                                                            `json:"integrationId"`
	IntegrationProductID       string                                                                            `json:"integrationProductId"`
	IntegrationConfigurationID string                                                                            `json:"integrationConfigurationId"`
}

func (o *FilterProjectEnvsContentHint14) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsContentHint14) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *FilterProjectEnvsContentHint14) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *FilterProjectEnvsContentHint14) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113TypePostgresURLNoSsl FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type = "postgres-url-no-ssl"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type: %v", v)
	}
}

type FilterProjectEnvsContentHint13 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type `json:"type"`
	StoreID string                                                                            `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint13) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112TypePostgresDatabase FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type = "postgres-database"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type: %v", v)
	}
}

type FilterProjectEnvsContentHint12 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type `json:"type"`
	StoreID string                                                                            `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint12) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111TypePostgresPassword FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type = "postgres-password"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type: %v", v)
	}
}

type FilterProjectEnvsContentHint11 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type `json:"type"`
	StoreID string                                                                            `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint11) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110TypePostgresHost FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type = "postgres-host"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type: %v", v)
	}
}

type FilterProjectEnvsContentHint10 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type `json:"type"`
	StoreID string                                                                            `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint10) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19TypePostgresUser FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type = "postgres-user"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type: %v", v)
	}
}

type FilterProjectEnvsContentHint9 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type `json:"type"`
	StoreID string                                                                           `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint9) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18TypePostgresPrismaURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type = "postgres-prisma-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type: %v", v)
	}
}

type FilterProjectEnvsContentHint8 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type `json:"type"`
	StoreID string                                                                           `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint8) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1TypePostgresURLNonPooling FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type = "postgres-url-non-pooling"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type: %v", v)
	}
}

type FilterProjectEnvsContentHint7 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint7) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyTypePostgresURL FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType = "postgres-url"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type FilterProjectEnvsContentHint6 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint6) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType string

const (
	FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONTypeBlobReadWriteToken FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType = "blob-read-write-token"
)

func (e FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type FilterProjectEnvsContentHint5 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType `json:"type"`
	StoreID string                                                             `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint5) GetType() FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponse200Type string

const (
	FilterProjectEnvsContentHintProjectsResponse200TypeRedisRestAPIReadOnlyToken FilterProjectEnvsContentHintProjectsResponse200Type = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvsContentHintProjectsResponse200Type) ToPointer() *FilterProjectEnvsContentHintProjectsResponse200Type {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvsContentHintProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponse200Type: %v", v)
	}
}

type FilterProjectEnvsContentHint4 struct {
	Type    FilterProjectEnvsContentHintProjectsResponse200Type `json:"type"`
	StoreID string                                              `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint4) GetType() FilterProjectEnvsContentHintProjectsResponse200Type {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponse200Type("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsResponseType string

const (
	FilterProjectEnvsContentHintProjectsResponseTypeRedisRestAPIToken FilterProjectEnvsContentHintProjectsResponseType = "redis-rest-api-token"
)

func (e FilterProjectEnvsContentHintProjectsResponseType) ToPointer() *FilterProjectEnvsContentHintProjectsResponseType {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvsContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsResponseType: %v", v)
	}
}

type FilterProjectEnvsContentHint3 struct {
	Type    FilterProjectEnvsContentHintProjectsResponseType `json:"type"`
	StoreID string                                           `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint3) GetType() FilterProjectEnvsContentHintProjectsResponseType {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintProjectsType string

const (
	FilterProjectEnvsContentHintProjectsTypeRedisRestAPIURL FilterProjectEnvsContentHintProjectsType = "redis-rest-api-url"
)

func (e FilterProjectEnvsContentHintProjectsType) ToPointer() *FilterProjectEnvsContentHintProjectsType {
	return &e
}
func (e *FilterProjectEnvsContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvsContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintProjectsType: %v", v)
	}
}

type FilterProjectEnvsContentHint2 struct {
	Type    FilterProjectEnvsContentHintProjectsType `json:"type"`
	StoreID string                                   `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint2) GetType() FilterProjectEnvsContentHintProjectsType {
	if o == nil {
		return FilterProjectEnvsContentHintProjectsType("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintType string

const (
	FilterProjectEnvsContentHintTypeRedisURL FilterProjectEnvsContentHintType = "redis-url"
)

func (e FilterProjectEnvsContentHintType) ToPointer() *FilterProjectEnvsContentHintType {
	return &e
}
func (e *FilterProjectEnvsContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvsContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsContentHintType: %v", v)
	}
}

type FilterProjectEnvsContentHint1 struct {
	Type    FilterProjectEnvsContentHintType `json:"type"`
	StoreID string                           `json:"storeId"`
}

func (o *FilterProjectEnvsContentHint1) GetType() FilterProjectEnvsContentHintType {
	if o == nil {
		return FilterProjectEnvsContentHintType("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type ResponseBodyContentHintType string

const (
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint1  ResponseBodyContentHintType = "filterProjectEnvs_contentHint_1"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint2  ResponseBodyContentHintType = "filterProjectEnvs_contentHint_2"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint3  ResponseBodyContentHintType = "filterProjectEnvs_contentHint_3"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint4  ResponseBodyContentHintType = "filterProjectEnvs_contentHint_4"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint5  ResponseBodyContentHintType = "filterProjectEnvs_contentHint_5"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint6  ResponseBodyContentHintType = "filterProjectEnvs_contentHint_6"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint7  ResponseBodyContentHintType = "filterProjectEnvs_contentHint_7"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint8  ResponseBodyContentHintType = "filterProjectEnvs_contentHint_8"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint9  ResponseBodyContentHintType = "filterProjectEnvs_contentHint_9"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint10 ResponseBodyContentHintType = "filterProjectEnvs_contentHint_10"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint11 ResponseBodyContentHintType = "filterProjectEnvs_contentHint_11"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint12 ResponseBodyContentHintType = "filterProjectEnvs_contentHint_12"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint13 ResponseBodyContentHintType = "filterProjectEnvs_contentHint_13"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint14 ResponseBodyContentHintType = "filterProjectEnvs_contentHint_14"
	ResponseBodyContentHintTypeFilterProjectEnvsContentHint15 ResponseBodyContentHintType = "filterProjectEnvs_contentHint_15"
)

type ResponseBodyContentHint struct {
	FilterProjectEnvsContentHint1  *FilterProjectEnvsContentHint1
	FilterProjectEnvsContentHint2  *FilterProjectEnvsContentHint2
	FilterProjectEnvsContentHint3  *FilterProjectEnvsContentHint3
	FilterProjectEnvsContentHint4  *FilterProjectEnvsContentHint4
	FilterProjectEnvsContentHint5  *FilterProjectEnvsContentHint5
	FilterProjectEnvsContentHint6  *FilterProjectEnvsContentHint6
	FilterProjectEnvsContentHint7  *FilterProjectEnvsContentHint7
	FilterProjectEnvsContentHint8  *FilterProjectEnvsContentHint8
	FilterProjectEnvsContentHint9  *FilterProjectEnvsContentHint9
	FilterProjectEnvsContentHint10 *FilterProjectEnvsContentHint10
	FilterProjectEnvsContentHint11 *FilterProjectEnvsContentHint11
	FilterProjectEnvsContentHint12 *FilterProjectEnvsContentHint12
	FilterProjectEnvsContentHint13 *FilterProjectEnvsContentHint13
	FilterProjectEnvsContentHint14 *FilterProjectEnvsContentHint14
	FilterProjectEnvsContentHint15 *FilterProjectEnvsContentHint15

	Type ResponseBodyContentHintType
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint1(filterProjectEnvsContentHint1 FilterProjectEnvsContentHint1) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint1

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint1: &filterProjectEnvsContentHint1,
		Type:                          typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint2(filterProjectEnvsContentHint2 FilterProjectEnvsContentHint2) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint2

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint2: &filterProjectEnvsContentHint2,
		Type:                          typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint3(filterProjectEnvsContentHint3 FilterProjectEnvsContentHint3) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint3

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint3: &filterProjectEnvsContentHint3,
		Type:                          typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint4(filterProjectEnvsContentHint4 FilterProjectEnvsContentHint4) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint4

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint4: &filterProjectEnvsContentHint4,
		Type:                          typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint5(filterProjectEnvsContentHint5 FilterProjectEnvsContentHint5) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint5

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint5: &filterProjectEnvsContentHint5,
		Type:                          typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint6(filterProjectEnvsContentHint6 FilterProjectEnvsContentHint6) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint6

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint6: &filterProjectEnvsContentHint6,
		Type:                          typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint7(filterProjectEnvsContentHint7 FilterProjectEnvsContentHint7) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint7

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint7: &filterProjectEnvsContentHint7,
		Type:                          typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint8(filterProjectEnvsContentHint8 FilterProjectEnvsContentHint8) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint8

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint8: &filterProjectEnvsContentHint8,
		Type:                          typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint9(filterProjectEnvsContentHint9 FilterProjectEnvsContentHint9) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint9

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint9: &filterProjectEnvsContentHint9,
		Type:                          typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint10(filterProjectEnvsContentHint10 FilterProjectEnvsContentHint10) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint10

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint10: &filterProjectEnvsContentHint10,
		Type:                           typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint11(filterProjectEnvsContentHint11 FilterProjectEnvsContentHint11) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint11

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint11: &filterProjectEnvsContentHint11,
		Type:                           typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint12(filterProjectEnvsContentHint12 FilterProjectEnvsContentHint12) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint12

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint12: &filterProjectEnvsContentHint12,
		Type:                           typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint13(filterProjectEnvsContentHint13 FilterProjectEnvsContentHint13) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint13

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint13: &filterProjectEnvsContentHint13,
		Type:                           typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint14(filterProjectEnvsContentHint14 FilterProjectEnvsContentHint14) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint14

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint14: &filterProjectEnvsContentHint14,
		Type:                           typ,
	}
}

func CreateResponseBodyContentHintFilterProjectEnvsContentHint15(filterProjectEnvsContentHint15 FilterProjectEnvsContentHint15) ResponseBodyContentHint {
	typ := ResponseBodyContentHintTypeFilterProjectEnvsContentHint15

	return ResponseBodyContentHint{
		FilterProjectEnvsContentHint15: &filterProjectEnvsContentHint15,
		Type:                           typ,
	}
}

func (u *ResponseBodyContentHint) UnmarshalJSON(data []byte) error {

	var filterProjectEnvsContentHint7 FilterProjectEnvsContentHint7 = FilterProjectEnvsContentHint7{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint7, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint7 = &filterProjectEnvsContentHint7
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint7
		return nil
	}

	var filterProjectEnvsContentHint11 FilterProjectEnvsContentHint11 = FilterProjectEnvsContentHint11{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint11, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint11 = &filterProjectEnvsContentHint11
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint11
		return nil
	}

	var filterProjectEnvsContentHint3 FilterProjectEnvsContentHint3 = FilterProjectEnvsContentHint3{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint3, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint3 = &filterProjectEnvsContentHint3
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint3
		return nil
	}

	var filterProjectEnvsContentHint4 FilterProjectEnvsContentHint4 = FilterProjectEnvsContentHint4{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint4, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint4 = &filterProjectEnvsContentHint4
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint4
		return nil
	}

	var filterProjectEnvsContentHint5 FilterProjectEnvsContentHint5 = FilterProjectEnvsContentHint5{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint5, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint5 = &filterProjectEnvsContentHint5
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint5
		return nil
	}

	var filterProjectEnvsContentHint6 FilterProjectEnvsContentHint6 = FilterProjectEnvsContentHint6{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint6, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint6 = &filterProjectEnvsContentHint6
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint6
		return nil
	}

	var filterProjectEnvsContentHint2 FilterProjectEnvsContentHint2 = FilterProjectEnvsContentHint2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint2 = &filterProjectEnvsContentHint2
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint2
		return nil
	}

	var filterProjectEnvsContentHint9 FilterProjectEnvsContentHint9 = FilterProjectEnvsContentHint9{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint9, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint9 = &filterProjectEnvsContentHint9
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint9
		return nil
	}

	var filterProjectEnvsContentHint1 FilterProjectEnvsContentHint1 = FilterProjectEnvsContentHint1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint1 = &filterProjectEnvsContentHint1
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint1
		return nil
	}

	var filterProjectEnvsContentHint10 FilterProjectEnvsContentHint10 = FilterProjectEnvsContentHint10{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint10, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint10 = &filterProjectEnvsContentHint10
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint10
		return nil
	}

	var filterProjectEnvsContentHint8 FilterProjectEnvsContentHint8 = FilterProjectEnvsContentHint8{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint8, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint8 = &filterProjectEnvsContentHint8
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint8
		return nil
	}

	var filterProjectEnvsContentHint12 FilterProjectEnvsContentHint12 = FilterProjectEnvsContentHint12{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint12, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint12 = &filterProjectEnvsContentHint12
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint12
		return nil
	}

	var filterProjectEnvsContentHint13 FilterProjectEnvsContentHint13 = FilterProjectEnvsContentHint13{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint13, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint13 = &filterProjectEnvsContentHint13
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint13
		return nil
	}

	var filterProjectEnvsContentHint15 FilterProjectEnvsContentHint15 = FilterProjectEnvsContentHint15{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint15, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint15 = &filterProjectEnvsContentHint15
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint15
		return nil
	}

	var filterProjectEnvsContentHint14 FilterProjectEnvsContentHint14 = FilterProjectEnvsContentHint14{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHint14, "", true, true); err == nil {
		u.FilterProjectEnvsContentHint14 = &filterProjectEnvsContentHint14
		u.Type = ResponseBodyContentHintTypeFilterProjectEnvsContentHint14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBodyContentHint", string(data))
}

func (u ResponseBodyContentHint) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsContentHint1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint1, "", true)
	}

	if u.FilterProjectEnvsContentHint2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint2, "", true)
	}

	if u.FilterProjectEnvsContentHint3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint3, "", true)
	}

	if u.FilterProjectEnvsContentHint4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint4, "", true)
	}

	if u.FilterProjectEnvsContentHint5 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint5, "", true)
	}

	if u.FilterProjectEnvsContentHint6 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint6, "", true)
	}

	if u.FilterProjectEnvsContentHint7 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint7, "", true)
	}

	if u.FilterProjectEnvsContentHint8 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint8, "", true)
	}

	if u.FilterProjectEnvsContentHint9 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint9, "", true)
	}

	if u.FilterProjectEnvsContentHint10 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint10, "", true)
	}

	if u.FilterProjectEnvsContentHint11 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint11, "", true)
	}

	if u.FilterProjectEnvsContentHint12 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint12, "", true)
	}

	if u.FilterProjectEnvsContentHint13 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint13, "", true)
	}

	if u.FilterProjectEnvsContentHint14 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint14, "", true)
	}

	if u.FilterProjectEnvsContentHint15 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHint15, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBodyContentHint: all fields are null")
}

type FilterProjectEnvsResponseBodyProjectsType string

const (
	FilterProjectEnvsResponseBodyProjectsTypeFlagsSecret FilterProjectEnvsResponseBodyProjectsType = "flags-secret"
)

func (e FilterProjectEnvsResponseBodyProjectsType) ToPointer() *FilterProjectEnvsResponseBodyProjectsType {
	return &e
}
func (e *FilterProjectEnvsResponseBodyProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = FilterProjectEnvsResponseBodyProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsResponseBodyProjectsType: %v", v)
	}
}

// ResponseBodyInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type ResponseBodyInternalContentHint struct {
	Type FilterProjectEnvsResponseBodyProjectsType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *ResponseBodyInternalContentHint) GetType() FilterProjectEnvsResponseBodyProjectsType {
	if o == nil {
		return FilterProjectEnvsResponseBodyProjectsType("")
	}
	return o.Type
}

func (o *ResponseBodyInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type FilterProjectEnvsResponseBody1 struct {
	Target *FilterProjectEnvsResponseBodyTarget `json:"target,omitempty"`
	Type   *FilterProjectEnvsResponseBodyType   `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                  `json:"sunsetSecretId,omitempty"`
	ID                *string                  `json:"id,omitempty"`
	Key               *string                  `json:"key,omitempty"`
	Value             *string                  `json:"value,omitempty"`
	ConfigurationID   *string                  `json:"configurationId,omitempty"`
	CreatedAt         *float64                 `json:"createdAt,omitempty"`
	UpdatedAt         *float64                 `json:"updatedAt,omitempty"`
	CreatedBy         *string                  `json:"createdBy,omitempty"`
	UpdatedBy         *string                  `json:"updatedBy,omitempty"`
	GitBranch         *string                  `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                  `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                  `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *ResponseBodyContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *ResponseBodyInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` and `vsmValue` are decrypted.
	Decrypted            *bool    `json:"decrypted,omitempty"`
	Comment              *string  `json:"comment,omitempty"`
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	VsmValue             *string  `json:"vsmValue,omitempty"`
	System               *bool    `json:"system,omitempty"`
}

func (o *FilterProjectEnvsResponseBody1) GetTarget() *FilterProjectEnvsResponseBodyTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *FilterProjectEnvsResponseBody1) GetType() *FilterProjectEnvsResponseBodyType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FilterProjectEnvsResponseBody1) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *FilterProjectEnvsResponseBody1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FilterProjectEnvsResponseBody1) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *FilterProjectEnvsResponseBody1) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FilterProjectEnvsResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *FilterProjectEnvsResponseBody1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FilterProjectEnvsResponseBody1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FilterProjectEnvsResponseBody1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FilterProjectEnvsResponseBody1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *FilterProjectEnvsResponseBody1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvsResponseBody1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *FilterProjectEnvsResponseBody1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *FilterProjectEnvsResponseBody1) GetContentHint() *ResponseBodyContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *FilterProjectEnvsResponseBody1) GetInternalContentHint() *ResponseBodyInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *FilterProjectEnvsResponseBody1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *FilterProjectEnvsResponseBody1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *FilterProjectEnvsResponseBody1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *FilterProjectEnvsResponseBody1) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *FilterProjectEnvsResponseBody1) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

type FilterProjectEnvsResponseBodyUnionType string

const (
	FilterProjectEnvsResponseBodyUnionTypeFilterProjectEnvsResponseBody1 FilterProjectEnvsResponseBodyUnionType = "filterProjectEnvs_responseBody_1"
	FilterProjectEnvsResponseBodyUnionTypeFilterProjectEnvsResponseBody2 FilterProjectEnvsResponseBodyUnionType = "filterProjectEnvs_responseBody_2"
	FilterProjectEnvsResponseBodyUnionTypeFilterProjectEnvsResponseBody3 FilterProjectEnvsResponseBodyUnionType = "filterProjectEnvs_responseBody_3"
)

// FilterProjectEnvsResponseBody - The list of environment variables for the given project
type FilterProjectEnvsResponseBody struct {
	FilterProjectEnvsResponseBody1 *FilterProjectEnvsResponseBody1
	FilterProjectEnvsResponseBody2 *FilterProjectEnvsResponseBody2
	FilterProjectEnvsResponseBody3 *FilterProjectEnvsResponseBody3

	Type FilterProjectEnvsResponseBodyUnionType
}

func CreateFilterProjectEnvsResponseBodyFilterProjectEnvsResponseBody1(filterProjectEnvsResponseBody1 FilterProjectEnvsResponseBody1) FilterProjectEnvsResponseBody {
	typ := FilterProjectEnvsResponseBodyUnionTypeFilterProjectEnvsResponseBody1

	return FilterProjectEnvsResponseBody{
		FilterProjectEnvsResponseBody1: &filterProjectEnvsResponseBody1,
		Type:                           typ,
	}
}

func CreateFilterProjectEnvsResponseBodyFilterProjectEnvsResponseBody2(filterProjectEnvsResponseBody2 FilterProjectEnvsResponseBody2) FilterProjectEnvsResponseBody {
	typ := FilterProjectEnvsResponseBodyUnionTypeFilterProjectEnvsResponseBody2

	return FilterProjectEnvsResponseBody{
		FilterProjectEnvsResponseBody2: &filterProjectEnvsResponseBody2,
		Type:                           typ,
	}
}

func CreateFilterProjectEnvsResponseBodyFilterProjectEnvsResponseBody3(filterProjectEnvsResponseBody3 FilterProjectEnvsResponseBody3) FilterProjectEnvsResponseBody {
	typ := FilterProjectEnvsResponseBodyUnionTypeFilterProjectEnvsResponseBody3

	return FilterProjectEnvsResponseBody{
		FilterProjectEnvsResponseBody3: &filterProjectEnvsResponseBody3,
		Type:                           typ,
	}
}

func (u *FilterProjectEnvsResponseBody) UnmarshalJSON(data []byte) error {

	var filterProjectEnvsResponseBody3 FilterProjectEnvsResponseBody3 = FilterProjectEnvsResponseBody3{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsResponseBody3, "", true, true); err == nil {
		u.FilterProjectEnvsResponseBody3 = &filterProjectEnvsResponseBody3
		u.Type = FilterProjectEnvsResponseBodyUnionTypeFilterProjectEnvsResponseBody3
		return nil
	}

	var filterProjectEnvsResponseBody2 FilterProjectEnvsResponseBody2 = FilterProjectEnvsResponseBody2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsResponseBody2, "", true, true); err == nil {
		u.FilterProjectEnvsResponseBody2 = &filterProjectEnvsResponseBody2
		u.Type = FilterProjectEnvsResponseBodyUnionTypeFilterProjectEnvsResponseBody2
		return nil
	}

	var filterProjectEnvsResponseBody1 FilterProjectEnvsResponseBody1 = FilterProjectEnvsResponseBody1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsResponseBody1, "", true, true); err == nil {
		u.FilterProjectEnvsResponseBody1 = &filterProjectEnvsResponseBody1
		u.Type = FilterProjectEnvsResponseBodyUnionTypeFilterProjectEnvsResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsResponseBody", string(data))
}

func (u FilterProjectEnvsResponseBody) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsResponseBody1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsResponseBody1, "", true)
	}

	if u.FilterProjectEnvsResponseBody2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsResponseBody2, "", true)
	}

	if u.FilterProjectEnvsResponseBody3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsResponseBody3, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsResponseBody: all fields are null")
}

type FilterProjectEnvsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The list of environment variables for the given project
	OneOf *FilterProjectEnvsResponseBody
}

func (o *FilterProjectEnvsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FilterProjectEnvsResponse) GetOneOf() *FilterProjectEnvsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
