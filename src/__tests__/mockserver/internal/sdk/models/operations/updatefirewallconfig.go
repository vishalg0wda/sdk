// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateFirewallConfigRequestBodySecurityRequest12Action string

const (
	UpdateFirewallConfigRequestBodySecurityRequest12ActionLog       UpdateFirewallConfigRequestBodySecurityRequest12Action = "log"
	UpdateFirewallConfigRequestBodySecurityRequest12ActionChallenge UpdateFirewallConfigRequestBodySecurityRequest12Action = "challenge"
	UpdateFirewallConfigRequestBodySecurityRequest12ActionDeny      UpdateFirewallConfigRequestBodySecurityRequest12Action = "deny"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest12Action) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest12Action {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest12Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		*e = UpdateFirewallConfigRequestBodySecurityRequest12Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest12Action: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityRequest12Value struct {
	Active bool                                                    `json:"active"`
	Action *UpdateFirewallConfigRequestBodySecurityRequest12Action `json:"action,omitempty"`
}

func (o *UpdateFirewallConfigRequestBodySecurityRequest12Value) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateFirewallConfigRequestBodySecurityRequest12Value) GetAction() *UpdateFirewallConfigRequestBodySecurityRequest12Action {
	if o == nil {
		return nil
	}
	return o.Action
}

// Twelve - Update a managed rule group
type Twelve struct {
	action string                                                           `const:"managedRuleGroup.update" json:"action"`
	ID     string                                                           `json:"id"`
	Value  map[string]UpdateFirewallConfigRequestBodySecurityRequest12Value `json:"value"`
}

func (t Twelve) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Twelve) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Twelve) GetAction() string {
	return "managedRuleGroup.update"
}

func (o *Twelve) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Twelve) GetValue() map[string]UpdateFirewallConfigRequestBodySecurityRequest12Value {
	if o == nil {
		return map[string]UpdateFirewallConfigRequestBodySecurityRequest12Value{}
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodySecurityRequest11Action string

const (
	UpdateFirewallConfigRequestBodySecurityRequest11ActionManagedRulesUpdate UpdateFirewallConfigRequestBodySecurityRequest11Action = "managedRules.update"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest11Action) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest11Action {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest11Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "managedRules.update":
		*e = UpdateFirewallConfigRequestBodySecurityRequest11Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest11Action: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityRequest11ValueAction string

const (
	UpdateFirewallConfigRequestBodySecurityRequest11ValueActionLog       UpdateFirewallConfigRequestBodySecurityRequest11ValueAction = "log"
	UpdateFirewallConfigRequestBodySecurityRequest11ValueActionChallenge UpdateFirewallConfigRequestBodySecurityRequest11ValueAction = "challenge"
	UpdateFirewallConfigRequestBodySecurityRequest11ValueActionDeny      UpdateFirewallConfigRequestBodySecurityRequest11ValueAction = "deny"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest11ValueAction) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest11ValueAction {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest11ValueAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		*e = UpdateFirewallConfigRequestBodySecurityRequest11ValueAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest11ValueAction: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityRequest11Value struct {
	Action *UpdateFirewallConfigRequestBodySecurityRequest11ValueAction `json:"action,omitempty"`
	Active bool                                                         `json:"active"`
}

func (o *UpdateFirewallConfigRequestBodySecurityRequest11Value) GetAction() *UpdateFirewallConfigRequestBodySecurityRequest11ValueAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *UpdateFirewallConfigRequestBodySecurityRequest11Value) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

// Eleven - Update a managed ruleset
type Eleven struct {
	Action UpdateFirewallConfigRequestBodySecurityRequest11Action `json:"action"`
	ID     string                                                 `json:"id"`
	Value  UpdateFirewallConfigRequestBodySecurityRequest11Value  `json:"value"`
}

func (o *Eleven) GetAction() UpdateFirewallConfigRequestBodySecurityRequest11Action {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest11Action("")
	}
	return o.Action
}

func (o *Eleven) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Eleven) GetValue() UpdateFirewallConfigRequestBodySecurityRequest11Value {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest11Value{}
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodySecurityRequest10Action string

const (
	UpdateFirewallConfigRequestBodySecurityRequest10ActionIPRemove UpdateFirewallConfigRequestBodySecurityRequest10Action = "ip.remove"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest10Action) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest10Action {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest10Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip.remove":
		*e = UpdateFirewallConfigRequestBodySecurityRequest10Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest10Action: %v", v)
	}
}

// RequestBody10 - Remove an IPBlocking rule
type RequestBody10 struct {
	Action UpdateFirewallConfigRequestBodySecurityRequest10Action `json:"action"`
	ID     string                                                 `json:"id"`
	Value  any                                                    `json:"value,omitempty"`
}

func (o *RequestBody10) GetAction() UpdateFirewallConfigRequestBodySecurityRequest10Action {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest10Action("")
	}
	return o.Action
}

func (o *RequestBody10) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RequestBody10) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodySecurityRequest9Action string

const (
	UpdateFirewallConfigRequestBodySecurityRequest9ActionIPUpdate UpdateFirewallConfigRequestBodySecurityRequest9Action = "ip.update"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest9Action) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest9Action {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest9Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip.update":
		*e = UpdateFirewallConfigRequestBodySecurityRequest9Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest9Action: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityRequest9ValueAction string

const (
	UpdateFirewallConfigRequestBodySecurityRequest9ValueActionDeny      UpdateFirewallConfigRequestBodySecurityRequest9ValueAction = "deny"
	UpdateFirewallConfigRequestBodySecurityRequest9ValueActionChallenge UpdateFirewallConfigRequestBodySecurityRequest9ValueAction = "challenge"
	UpdateFirewallConfigRequestBodySecurityRequest9ValueActionLog       UpdateFirewallConfigRequestBodySecurityRequest9ValueAction = "log"
	UpdateFirewallConfigRequestBodySecurityRequest9ValueActionBypass    UpdateFirewallConfigRequestBodySecurityRequest9ValueAction = "bypass"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest9ValueAction) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest9ValueAction {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest9ValueAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		*e = UpdateFirewallConfigRequestBodySecurityRequest9ValueAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest9ValueAction: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityRequestValue struct {
	Hostname string                                                     `json:"hostname"`
	IP       string                                                     `json:"ip"`
	Notes    *string                                                    `json:"notes,omitempty"`
	Action   UpdateFirewallConfigRequestBodySecurityRequest9ValueAction `json:"action"`
}

func (o *UpdateFirewallConfigRequestBodySecurityRequestValue) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *UpdateFirewallConfigRequestBodySecurityRequestValue) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *UpdateFirewallConfigRequestBodySecurityRequestValue) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *UpdateFirewallConfigRequestBodySecurityRequestValue) GetAction() UpdateFirewallConfigRequestBodySecurityRequest9ValueAction {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest9ValueAction("")
	}
	return o.Action
}

// RequestBody9 - Update an IP Blocking rule
type RequestBody9 struct {
	Action UpdateFirewallConfigRequestBodySecurityRequest9Action `json:"action"`
	ID     string                                                `json:"id"`
	Value  UpdateFirewallConfigRequestBodySecurityRequestValue   `json:"value"`
}

func (o *RequestBody9) GetAction() UpdateFirewallConfigRequestBodySecurityRequest9Action {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest9Action("")
	}
	return o.Action
}

func (o *RequestBody9) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RequestBody9) GetValue() UpdateFirewallConfigRequestBodySecurityRequestValue {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequestValue{}
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodySecurityRequest8Action string

const (
	UpdateFirewallConfigRequestBodySecurityRequest8ActionIPInsert UpdateFirewallConfigRequestBodySecurityRequest8Action = "ip.insert"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest8Action) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest8Action {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest8Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip.insert":
		*e = UpdateFirewallConfigRequestBodySecurityRequest8Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest8Action: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityRequest8ValueAction string

const (
	UpdateFirewallConfigRequestBodySecurityRequest8ValueActionDeny      UpdateFirewallConfigRequestBodySecurityRequest8ValueAction = "deny"
	UpdateFirewallConfigRequestBodySecurityRequest8ValueActionChallenge UpdateFirewallConfigRequestBodySecurityRequest8ValueAction = "challenge"
	UpdateFirewallConfigRequestBodySecurityRequest8ValueActionLog       UpdateFirewallConfigRequestBodySecurityRequest8ValueAction = "log"
	UpdateFirewallConfigRequestBodySecurityRequest8ValueActionBypass    UpdateFirewallConfigRequestBodySecurityRequest8ValueAction = "bypass"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest8ValueAction) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest8ValueAction {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest8ValueAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		*e = UpdateFirewallConfigRequestBodySecurityRequest8ValueAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest8ValueAction: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityValue struct {
	Hostname string                                                     `json:"hostname"`
	IP       string                                                     `json:"ip"`
	Notes    *string                                                    `json:"notes,omitempty"`
	Action   UpdateFirewallConfigRequestBodySecurityRequest8ValueAction `json:"action"`
}

func (o *UpdateFirewallConfigRequestBodySecurityValue) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *UpdateFirewallConfigRequestBodySecurityValue) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *UpdateFirewallConfigRequestBodySecurityValue) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *UpdateFirewallConfigRequestBodySecurityValue) GetAction() UpdateFirewallConfigRequestBodySecurityRequest8ValueAction {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest8ValueAction("")
	}
	return o.Action
}

// RequestBody8 - Add an IP Blocking rule
type RequestBody8 struct {
	Action UpdateFirewallConfigRequestBodySecurityRequest8Action `json:"action"`
	ID     any                                                   `json:"id,omitempty"`
	Value  UpdateFirewallConfigRequestBodySecurityValue          `json:"value"`
}

func (o *RequestBody8) GetAction() UpdateFirewallConfigRequestBodySecurityRequest8Action {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest8Action("")
	}
	return o.Action
}

func (o *RequestBody8) GetID() any {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RequestBody8) GetValue() UpdateFirewallConfigRequestBodySecurityValue {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityValue{}
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodySecurityRequest7Action string

const (
	UpdateFirewallConfigRequestBodySecurityRequest7ActionCrsDisable UpdateFirewallConfigRequestBodySecurityRequest7Action = "crs.disable"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest7Action) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest7Action {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest7Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "crs.disable":
		*e = UpdateFirewallConfigRequestBodySecurityRequest7Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest7Action: %v", v)
	}
}

// RequestBody7 - Disable a managed rule
type RequestBody7 struct {
	Action UpdateFirewallConfigRequestBodySecurityRequest7Action `json:"action"`
	ID     any                                                   `json:"id,omitempty"`
	Value  any                                                   `json:"value,omitempty"`
}

func (o *RequestBody7) GetAction() UpdateFirewallConfigRequestBodySecurityRequest7Action {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest7Action("")
	}
	return o.Action
}

func (o *RequestBody7) GetID() any {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RequestBody7) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodySecurityRequest6Action string

const (
	UpdateFirewallConfigRequestBodySecurityRequest6ActionCrsUpdate UpdateFirewallConfigRequestBodySecurityRequest6Action = "crs.update"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest6Action) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest6Action {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest6Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "crs.update":
		*e = UpdateFirewallConfigRequestBodySecurityRequest6Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest6Action: %v", v)
	}
}

type ID string

const (
	IDSd   ID = "sd"
	IDMa   ID = "ma"
	IDLfi  ID = "lfi"
	IDRfi  ID = "rfi"
	IDRce  ID = "rce"
	IDPhp  ID = "php"
	IDGen  ID = "gen"
	IDXSS  ID = "xss"
	IDSqli ID = "sqli"
	IDSf   ID = "sf"
	IDJava ID = "java"
)

func (e ID) ToPointer() *ID {
	return &e
}
func (e *ID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sd":
		fallthrough
	case "ma":
		fallthrough
	case "lfi":
		fallthrough
	case "rfi":
		fallthrough
	case "rce":
		fallthrough
	case "php":
		fallthrough
	case "gen":
		fallthrough
	case "xss":
		fallthrough
	case "sqli":
		fallthrough
	case "sf":
		fallthrough
	case "java":
		*e = ID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ID: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityRequest6ValueAction string

const (
	UpdateFirewallConfigRequestBodySecurityRequest6ValueActionDeny UpdateFirewallConfigRequestBodySecurityRequest6ValueAction = "deny"
	UpdateFirewallConfigRequestBodySecurityRequest6ValueActionLog  UpdateFirewallConfigRequestBodySecurityRequest6ValueAction = "log"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest6ValueAction) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest6ValueAction {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest6ValueAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = UpdateFirewallConfigRequestBodySecurityRequest6ValueAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest6ValueAction: %v", v)
	}
}

type UpdateFirewallConfigRequestBodyValue struct {
	Active bool                                                       `json:"active"`
	Action UpdateFirewallConfigRequestBodySecurityRequest6ValueAction `json:"action"`
}

func (o *UpdateFirewallConfigRequestBodyValue) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateFirewallConfigRequestBodyValue) GetAction() UpdateFirewallConfigRequestBodySecurityRequest6ValueAction {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest6ValueAction("")
	}
	return o.Action
}

// RequestBody6 - Enable a managed rule
type RequestBody6 struct {
	Action UpdateFirewallConfigRequestBodySecurityRequest6Action `json:"action"`
	ID     ID                                                    `json:"id"`
	Value  UpdateFirewallConfigRequestBodyValue                  `json:"value"`
}

func (o *RequestBody6) GetAction() UpdateFirewallConfigRequestBodySecurityRequest6Action {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest6Action("")
	}
	return o.Action
}

func (o *RequestBody6) GetID() ID {
	if o == nil {
		return ID("")
	}
	return o.ID
}

func (o *RequestBody6) GetValue() UpdateFirewallConfigRequestBodyValue {
	if o == nil {
		return UpdateFirewallConfigRequestBodyValue{}
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodySecurityRequest5Action string

const (
	UpdateFirewallConfigRequestBodySecurityRequest5ActionRulesPriority UpdateFirewallConfigRequestBodySecurityRequest5Action = "rules.priority"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest5Action) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest5Action {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest5Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rules.priority":
		*e = UpdateFirewallConfigRequestBodySecurityRequest5Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest5Action: %v", v)
	}
}

// UpdateFirewallConfigRequestBody5 - Reorder a custom rule
type UpdateFirewallConfigRequestBody5 struct {
	Action UpdateFirewallConfigRequestBodySecurityRequest5Action `json:"action"`
	ID     string                                                `json:"id"`
	Value  float64                                               `json:"value"`
}

func (o *UpdateFirewallConfigRequestBody5) GetAction() UpdateFirewallConfigRequestBodySecurityRequest5Action {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest5Action("")
	}
	return o.Action
}

func (o *UpdateFirewallConfigRequestBody5) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateFirewallConfigRequestBody5) GetValue() float64 {
	if o == nil {
		return 0.0
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodySecurityRequestAction string

const (
	UpdateFirewallConfigRequestBodySecurityRequestActionRulesRemove UpdateFirewallConfigRequestBodySecurityRequestAction = "rules.remove"
)

func (e UpdateFirewallConfigRequestBodySecurityRequestAction) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequestAction {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequestAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rules.remove":
		*e = UpdateFirewallConfigRequestBodySecurityRequestAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequestAction: %v", v)
	}
}

// UpdateFirewallConfigRequestBody4 - Remove a custom rule
type UpdateFirewallConfigRequestBody4 struct {
	Action UpdateFirewallConfigRequestBodySecurityRequestAction `json:"action"`
	ID     string                                               `json:"id"`
	Value  any                                                  `json:"value,omitempty"`
}

func (o *UpdateFirewallConfigRequestBody4) GetAction() UpdateFirewallConfigRequestBodySecurityRequestAction {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequestAction("")
	}
	return o.Action
}

func (o *UpdateFirewallConfigRequestBody4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateFirewallConfigRequestBody4) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodySecurityAction string

const (
	UpdateFirewallConfigRequestBodySecurityActionRulesUpdate UpdateFirewallConfigRequestBodySecurityAction = "rules.update"
)

func (e UpdateFirewallConfigRequestBodySecurityAction) ToPointer() *UpdateFirewallConfigRequestBodySecurityAction {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rules.update":
		*e = UpdateFirewallConfigRequestBodySecurityAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityAction: %v", v)
	}
}

// UpdateFirewallConfigRequestBodySecurityType - [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
type UpdateFirewallConfigRequestBodySecurityType string

const (
	UpdateFirewallConfigRequestBodySecurityTypeHost             UpdateFirewallConfigRequestBodySecurityType = "host"
	UpdateFirewallConfigRequestBodySecurityTypePath             UpdateFirewallConfigRequestBodySecurityType = "path"
	UpdateFirewallConfigRequestBodySecurityTypeMethod           UpdateFirewallConfigRequestBodySecurityType = "method"
	UpdateFirewallConfigRequestBodySecurityTypeHeader           UpdateFirewallConfigRequestBodySecurityType = "header"
	UpdateFirewallConfigRequestBodySecurityTypeQuery            UpdateFirewallConfigRequestBodySecurityType = "query"
	UpdateFirewallConfigRequestBodySecurityTypeCookie           UpdateFirewallConfigRequestBodySecurityType = "cookie"
	UpdateFirewallConfigRequestBodySecurityTypeTargetPath       UpdateFirewallConfigRequestBodySecurityType = "target_path"
	UpdateFirewallConfigRequestBodySecurityTypeRawPath          UpdateFirewallConfigRequestBodySecurityType = "raw_path"
	UpdateFirewallConfigRequestBodySecurityTypeIPAddress        UpdateFirewallConfigRequestBodySecurityType = "ip_address"
	UpdateFirewallConfigRequestBodySecurityTypeRegion           UpdateFirewallConfigRequestBodySecurityType = "region"
	UpdateFirewallConfigRequestBodySecurityTypeProtocol         UpdateFirewallConfigRequestBodySecurityType = "protocol"
	UpdateFirewallConfigRequestBodySecurityTypeScheme           UpdateFirewallConfigRequestBodySecurityType = "scheme"
	UpdateFirewallConfigRequestBodySecurityTypeEnvironment      UpdateFirewallConfigRequestBodySecurityType = "environment"
	UpdateFirewallConfigRequestBodySecurityTypeUserAgent        UpdateFirewallConfigRequestBodySecurityType = "user_agent"
	UpdateFirewallConfigRequestBodySecurityTypeGeoContinent     UpdateFirewallConfigRequestBodySecurityType = "geo_continent"
	UpdateFirewallConfigRequestBodySecurityTypeGeoCountry       UpdateFirewallConfigRequestBodySecurityType = "geo_country"
	UpdateFirewallConfigRequestBodySecurityTypeGeoCountryRegion UpdateFirewallConfigRequestBodySecurityType = "geo_country_region"
	UpdateFirewallConfigRequestBodySecurityTypeGeoCity          UpdateFirewallConfigRequestBodySecurityType = "geo_city"
	UpdateFirewallConfigRequestBodySecurityTypeGeoAsNumber      UpdateFirewallConfigRequestBodySecurityType = "geo_as_number"
	UpdateFirewallConfigRequestBodySecurityTypeJa4Digest        UpdateFirewallConfigRequestBodySecurityType = "ja4_digest"
	UpdateFirewallConfigRequestBodySecurityTypeJa3Digest        UpdateFirewallConfigRequestBodySecurityType = "ja3_digest"
	UpdateFirewallConfigRequestBodySecurityTypeRateLimitAPIID   UpdateFirewallConfigRequestBodySecurityType = "rate_limit_api_id"
)

func (e UpdateFirewallConfigRequestBodySecurityType) ToPointer() *UpdateFirewallConfigRequestBodySecurityType {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "region":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		*e = UpdateFirewallConfigRequestBodySecurityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityType: %v", v)
	}
}

// RequestBodyOp - [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value
type RequestBodyOp string

const (
	RequestBodyOpRe   RequestBodyOp = "re"
	RequestBodyOpEq   RequestBodyOp = "eq"
	RequestBodyOpNeq  RequestBodyOp = "neq"
	RequestBodyOpEx   RequestBodyOp = "ex"
	RequestBodyOpNex  RequestBodyOp = "nex"
	RequestBodyOpInc  RequestBodyOp = "inc"
	RequestBodyOpNinc RequestBodyOp = "ninc"
	RequestBodyOpPre  RequestBodyOp = "pre"
	RequestBodyOpSuf  RequestBodyOp = "suf"
	RequestBodyOpSub  RequestBodyOp = "sub"
	RequestBodyOpGt   RequestBodyOp = "gt"
	RequestBodyOpGte  RequestBodyOp = "gte"
	RequestBodyOpLt   RequestBodyOp = "lt"
	RequestBodyOpLte  RequestBodyOp = "lte"
)

func (e RequestBodyOp) ToPointer() *RequestBodyOp {
	return &e
}
func (e *RequestBodyOp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "neq":
		fallthrough
	case "ex":
		fallthrough
	case "nex":
		fallthrough
	case "inc":
		fallthrough
	case "ninc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		*e = RequestBodyOp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestBodyOp: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityRequest3ValueType string

const (
	UpdateFirewallConfigRequestBodySecurityRequest3ValueTypeStr        UpdateFirewallConfigRequestBodySecurityRequest3ValueType = "str"
	UpdateFirewallConfigRequestBodySecurityRequest3ValueTypeArrayOfStr UpdateFirewallConfigRequestBodySecurityRequest3ValueType = "arrayOfStr"
	UpdateFirewallConfigRequestBodySecurityRequest3ValueTypeNumber     UpdateFirewallConfigRequestBodySecurityRequest3ValueType = "number"
)

type UpdateFirewallConfigRequestBodySecurityRequest3Value struct {
	Str        *string
	ArrayOfStr []string
	Number     *float64

	Type UpdateFirewallConfigRequestBodySecurityRequest3ValueType
}

func CreateUpdateFirewallConfigRequestBodySecurityRequest3ValueStr(str string) UpdateFirewallConfigRequestBodySecurityRequest3Value {
	typ := UpdateFirewallConfigRequestBodySecurityRequest3ValueTypeStr

	return UpdateFirewallConfigRequestBodySecurityRequest3Value{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateFirewallConfigRequestBodySecurityRequest3ValueArrayOfStr(arrayOfStr []string) UpdateFirewallConfigRequestBodySecurityRequest3Value {
	typ := UpdateFirewallConfigRequestBodySecurityRequest3ValueTypeArrayOfStr

	return UpdateFirewallConfigRequestBodySecurityRequest3Value{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateUpdateFirewallConfigRequestBodySecurityRequest3ValueNumber(number float64) UpdateFirewallConfigRequestBodySecurityRequest3Value {
	typ := UpdateFirewallConfigRequestBodySecurityRequest3ValueTypeNumber

	return UpdateFirewallConfigRequestBodySecurityRequest3Value{
		Number: &number,
		Type:   typ,
	}
}

func (u *UpdateFirewallConfigRequestBodySecurityRequest3Value) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateFirewallConfigRequestBodySecurityRequest3ValueTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateFirewallConfigRequestBodySecurityRequest3ValueTypeArrayOfStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateFirewallConfigRequestBodySecurityRequest3ValueTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigRequestBodySecurityRequest3Value", string(data))
}

func (u UpdateFirewallConfigRequestBodySecurityRequest3Value) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigRequestBodySecurityRequest3Value: all fields are null")
}

type RequestBodyConditions struct {
	// [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
	Type UpdateFirewallConfigRequestBodySecurityType `json:"type"`
	// [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value
	Op    RequestBodyOp                                         `json:"op"`
	Neg   *bool                                                 `json:"neg,omitempty"`
	Key   *string                                               `json:"key,omitempty"`
	Value *UpdateFirewallConfigRequestBodySecurityRequest3Value `json:"value,omitempty"`
}

func (o *RequestBodyConditions) GetType() UpdateFirewallConfigRequestBodySecurityType {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityType("")
	}
	return o.Type
}

func (o *RequestBodyConditions) GetOp() RequestBodyOp {
	if o == nil {
		return RequestBodyOp("")
	}
	return o.Op
}

func (o *RequestBodyConditions) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *RequestBodyConditions) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *RequestBodyConditions) GetValue() *UpdateFirewallConfigRequestBodySecurityRequest3Value {
	if o == nil {
		return nil
	}
	return o.Value
}

type RequestBodyConditionGroup struct {
	Conditions []RequestBodyConditions `json:"conditions"`
}

func (o *RequestBodyConditionGroup) GetConditions() []RequestBodyConditions {
	if o == nil {
		return []RequestBodyConditions{}
	}
	return o.Conditions
}

type UpdateFirewallConfigRequestBodySecurityRequest3ValueAction string

const (
	UpdateFirewallConfigRequestBodySecurityRequest3ValueActionLog       UpdateFirewallConfigRequestBodySecurityRequest3ValueAction = "log"
	UpdateFirewallConfigRequestBodySecurityRequest3ValueActionChallenge UpdateFirewallConfigRequestBodySecurityRequest3ValueAction = "challenge"
	UpdateFirewallConfigRequestBodySecurityRequest3ValueActionDeny      UpdateFirewallConfigRequestBodySecurityRequest3ValueAction = "deny"
	UpdateFirewallConfigRequestBodySecurityRequest3ValueActionBypass    UpdateFirewallConfigRequestBodySecurityRequest3ValueAction = "bypass"
	UpdateFirewallConfigRequestBodySecurityRequest3ValueActionRateLimit UpdateFirewallConfigRequestBodySecurityRequest3ValueAction = "rate_limit"
	UpdateFirewallConfigRequestBodySecurityRequest3ValueActionRedirect  UpdateFirewallConfigRequestBodySecurityRequest3ValueAction = "redirect"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest3ValueAction) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest3ValueAction {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest3ValueAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = UpdateFirewallConfigRequestBodySecurityRequest3ValueAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest3ValueAction: %v", v)
	}
}

type UpdateFirewallConfigRateLimitAlgo string

const (
	UpdateFirewallConfigRateLimitAlgoFixedWindow UpdateFirewallConfigRateLimitAlgo = "fixed_window"
	UpdateFirewallConfigRateLimitAlgoTokenBucket UpdateFirewallConfigRateLimitAlgo = "token_bucket"
)

func (e UpdateFirewallConfigRateLimitAlgo) ToPointer() *UpdateFirewallConfigRateLimitAlgo {
	return &e
}
func (e *UpdateFirewallConfigRateLimitAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = UpdateFirewallConfigRateLimitAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRateLimitAlgo: %v", v)
	}
}

type UpdateFirewallConfigAction1 string

const (
	UpdateFirewallConfigAction1Log       UpdateFirewallConfigAction1 = "log"
	UpdateFirewallConfigAction1Challenge UpdateFirewallConfigAction1 = "challenge"
	UpdateFirewallConfigAction1Deny      UpdateFirewallConfigAction1 = "deny"
	UpdateFirewallConfigAction1RateLimit UpdateFirewallConfigAction1 = "rate_limit"
)

func (e UpdateFirewallConfigAction1) ToPointer() *UpdateFirewallConfigAction1 {
	return &e
}
func (e *UpdateFirewallConfigAction1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "rate_limit":
		*e = UpdateFirewallConfigAction1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigAction1: %v", v)
	}
}

type UpdateFirewallConfigRateLimitActionType string

const (
	UpdateFirewallConfigRateLimitActionTypeUpdateFirewallConfigAction1 UpdateFirewallConfigRateLimitActionType = "updateFirewallConfig_action_1"
	UpdateFirewallConfigRateLimitActionTypeAny                         UpdateFirewallConfigRateLimitActionType = "any"
)

type UpdateFirewallConfigRateLimitAction struct {
	UpdateFirewallConfigAction1 *UpdateFirewallConfigAction1
	Any                         any

	Type UpdateFirewallConfigRateLimitActionType
}

func CreateUpdateFirewallConfigRateLimitActionUpdateFirewallConfigAction1(updateFirewallConfigAction1 UpdateFirewallConfigAction1) UpdateFirewallConfigRateLimitAction {
	typ := UpdateFirewallConfigRateLimitActionTypeUpdateFirewallConfigAction1

	return UpdateFirewallConfigRateLimitAction{
		UpdateFirewallConfigAction1: &updateFirewallConfigAction1,
		Type:                        typ,
	}
}

func CreateUpdateFirewallConfigRateLimitActionAny(any any) UpdateFirewallConfigRateLimitAction {
	typ := UpdateFirewallConfigRateLimitActionTypeAny

	return UpdateFirewallConfigRateLimitAction{
		Any:  any,
		Type: typ,
	}
}

func (u *UpdateFirewallConfigRateLimitAction) UnmarshalJSON(data []byte) error {

	var updateFirewallConfigAction1 UpdateFirewallConfigAction1 = UpdateFirewallConfigAction1("")
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigAction1, "", true, true); err == nil {
		u.UpdateFirewallConfigAction1 = &updateFirewallConfigAction1
		u.Type = UpdateFirewallConfigRateLimitActionTypeUpdateFirewallConfigAction1
		return nil
	}

	var any any = nil
	if err := utils.UnmarshalJSON(data, &any, "", true, true); err == nil {
		u.Any = any
		u.Type = UpdateFirewallConfigRateLimitActionTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigRateLimitAction", string(data))
}

func (u UpdateFirewallConfigRateLimitAction) MarshalJSON() ([]byte, error) {
	if u.UpdateFirewallConfigAction1 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigAction1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigRateLimitAction: all fields are null")
}

type UpdateFirewallConfigRateLimit1 struct {
	Algo   UpdateFirewallConfigRateLimitAlgo    `json:"algo"`
	Window float64                              `json:"window"`
	Limit  float64                              `json:"limit"`
	Keys   []string                             `json:"keys"`
	Action *UpdateFirewallConfigRateLimitAction `json:"action,omitempty"`
}

func (o *UpdateFirewallConfigRateLimit1) GetAlgo() UpdateFirewallConfigRateLimitAlgo {
	if o == nil {
		return UpdateFirewallConfigRateLimitAlgo("")
	}
	return o.Algo
}

func (o *UpdateFirewallConfigRateLimit1) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *UpdateFirewallConfigRateLimit1) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *UpdateFirewallConfigRateLimit1) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *UpdateFirewallConfigRateLimit1) GetAction() *UpdateFirewallConfigRateLimitAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type RequestBodyRateLimitType string

const (
	RequestBodyRateLimitTypeUpdateFirewallConfigRateLimit1 RequestBodyRateLimitType = "updateFirewallConfig_rateLimit_1"
	RequestBodyRateLimitTypeAny                            RequestBodyRateLimitType = "any"
)

type RequestBodyRateLimit struct {
	UpdateFirewallConfigRateLimit1 *UpdateFirewallConfigRateLimit1
	Any                            any

	Type RequestBodyRateLimitType
}

func CreateRequestBodyRateLimitUpdateFirewallConfigRateLimit1(updateFirewallConfigRateLimit1 UpdateFirewallConfigRateLimit1) RequestBodyRateLimit {
	typ := RequestBodyRateLimitTypeUpdateFirewallConfigRateLimit1

	return RequestBodyRateLimit{
		UpdateFirewallConfigRateLimit1: &updateFirewallConfigRateLimit1,
		Type:                           typ,
	}
}

func CreateRequestBodyRateLimitAny(any any) RequestBodyRateLimit {
	typ := RequestBodyRateLimitTypeAny

	return RequestBodyRateLimit{
		Any:  any,
		Type: typ,
	}
}

func (u *RequestBodyRateLimit) UnmarshalJSON(data []byte) error {

	var updateFirewallConfigRateLimit1 UpdateFirewallConfigRateLimit1 = UpdateFirewallConfigRateLimit1{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRateLimit1, "", true, true); err == nil {
		u.UpdateFirewallConfigRateLimit1 = &updateFirewallConfigRateLimit1
		u.Type = RequestBodyRateLimitTypeUpdateFirewallConfigRateLimit1
		return nil
	}

	var any any = nil
	if err := utils.UnmarshalJSON(data, &any, "", true, true); err == nil {
		u.Any = any
		u.Type = RequestBodyRateLimitTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RequestBodyRateLimit", string(data))
}

func (u RequestBodyRateLimit) MarshalJSON() ([]byte, error) {
	if u.UpdateFirewallConfigRateLimit1 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRateLimit1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type RequestBodyRateLimit: all fields are null")
}

type UpdateFirewallConfigRedirect1 struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (o *UpdateFirewallConfigRedirect1) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *UpdateFirewallConfigRedirect1) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type RequestBodyRedirectType string

const (
	RequestBodyRedirectTypeUpdateFirewallConfigRedirect1 RequestBodyRedirectType = "updateFirewallConfig_redirect_1"
	RequestBodyRedirectTypeAny                           RequestBodyRedirectType = "any"
)

type RequestBodyRedirect struct {
	UpdateFirewallConfigRedirect1 *UpdateFirewallConfigRedirect1
	Any                           any

	Type RequestBodyRedirectType
}

func CreateRequestBodyRedirectUpdateFirewallConfigRedirect1(updateFirewallConfigRedirect1 UpdateFirewallConfigRedirect1) RequestBodyRedirect {
	typ := RequestBodyRedirectTypeUpdateFirewallConfigRedirect1

	return RequestBodyRedirect{
		UpdateFirewallConfigRedirect1: &updateFirewallConfigRedirect1,
		Type:                          typ,
	}
}

func CreateRequestBodyRedirectAny(any any) RequestBodyRedirect {
	typ := RequestBodyRedirectTypeAny

	return RequestBodyRedirect{
		Any:  any,
		Type: typ,
	}
}

func (u *RequestBodyRedirect) UnmarshalJSON(data []byte) error {

	var updateFirewallConfigRedirect1 UpdateFirewallConfigRedirect1 = UpdateFirewallConfigRedirect1{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRedirect1, "", true, true); err == nil {
		u.UpdateFirewallConfigRedirect1 = &updateFirewallConfigRedirect1
		u.Type = RequestBodyRedirectTypeUpdateFirewallConfigRedirect1
		return nil
	}

	var any any = nil
	if err := utils.UnmarshalJSON(data, &any, "", true, true); err == nil {
		u.Any = any
		u.Type = RequestBodyRedirectTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RequestBodyRedirect", string(data))
}

func (u RequestBodyRedirect) MarshalJSON() ([]byte, error) {
	if u.UpdateFirewallConfigRedirect1 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRedirect1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type RequestBodyRedirect: all fields are null")
}

type RequestBodyMitigate struct {
	Action         UpdateFirewallConfigRequestBodySecurityRequest3ValueAction `json:"action"`
	RateLimit      *RequestBodyRateLimit                                      `json:"rateLimit,omitempty"`
	Redirect       *RequestBodyRedirect                                       `json:"redirect,omitempty"`
	ActionDuration *string                                                    `json:"actionDuration,omitempty"`
	BypassSystem   *bool                                                      `json:"bypassSystem,omitempty"`
}

func (o *RequestBodyMitigate) GetAction() UpdateFirewallConfigRequestBodySecurityRequest3ValueAction {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest3ValueAction("")
	}
	return o.Action
}

func (o *RequestBodyMitigate) GetRateLimit() *RequestBodyRateLimit {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *RequestBodyMitigate) GetRedirect() *RequestBodyRedirect {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *RequestBodyMitigate) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

func (o *RequestBodyMitigate) GetBypassSystem() *bool {
	if o == nil {
		return nil
	}
	return o.BypassSystem
}

type UpdateFirewallConfigRequestBodySecurityRequest3Action struct {
	Mitigate *RequestBodyMitigate `json:"mitigate,omitempty"`
}

func (o *UpdateFirewallConfigRequestBodySecurityRequest3Action) GetMitigate() *RequestBodyMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type RequestBodyValue struct {
	Name           string                                                `json:"name"`
	Description    *string                                               `json:"description,omitempty"`
	Active         bool                                                  `json:"active"`
	ConditionGroup []RequestBodyConditionGroup                           `json:"conditionGroup"`
	Action         UpdateFirewallConfigRequestBodySecurityRequest3Action `json:"action"`
}

func (o *RequestBodyValue) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RequestBodyValue) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *RequestBodyValue) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *RequestBodyValue) GetConditionGroup() []RequestBodyConditionGroup {
	if o == nil {
		return []RequestBodyConditionGroup{}
	}
	return o.ConditionGroup
}

func (o *RequestBodyValue) GetAction() UpdateFirewallConfigRequestBodySecurityRequest3Action {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest3Action{}
	}
	return o.Action
}

// UpdateFirewallConfigRequestBody3 - Update a custom rule
type UpdateFirewallConfigRequestBody3 struct {
	Action UpdateFirewallConfigRequestBodySecurityAction `json:"action"`
	ID     string                                        `json:"id"`
	Value  RequestBodyValue                              `json:"value"`
}

func (o *UpdateFirewallConfigRequestBody3) GetAction() UpdateFirewallConfigRequestBodySecurityAction {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityAction("")
	}
	return o.Action
}

func (o *UpdateFirewallConfigRequestBody3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateFirewallConfigRequestBody3) GetValue() RequestBodyValue {
	if o == nil {
		return RequestBodyValue{}
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodyAction string

const (
	UpdateFirewallConfigRequestBodyActionRulesInsert UpdateFirewallConfigRequestBodyAction = "rules.insert"
)

func (e UpdateFirewallConfigRequestBodyAction) ToPointer() *UpdateFirewallConfigRequestBodyAction {
	return &e
}
func (e *UpdateFirewallConfigRequestBodyAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rules.insert":
		*e = UpdateFirewallConfigRequestBodyAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodyAction: %v", v)
	}
}

// UpdateFirewallConfigRequestBodyType - [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
type UpdateFirewallConfigRequestBodyType string

const (
	UpdateFirewallConfigRequestBodyTypeHost             UpdateFirewallConfigRequestBodyType = "host"
	UpdateFirewallConfigRequestBodyTypePath             UpdateFirewallConfigRequestBodyType = "path"
	UpdateFirewallConfigRequestBodyTypeMethod           UpdateFirewallConfigRequestBodyType = "method"
	UpdateFirewallConfigRequestBodyTypeHeader           UpdateFirewallConfigRequestBodyType = "header"
	UpdateFirewallConfigRequestBodyTypeQuery            UpdateFirewallConfigRequestBodyType = "query"
	UpdateFirewallConfigRequestBodyTypeCookie           UpdateFirewallConfigRequestBodyType = "cookie"
	UpdateFirewallConfigRequestBodyTypeTargetPath       UpdateFirewallConfigRequestBodyType = "target_path"
	UpdateFirewallConfigRequestBodyTypeRawPath          UpdateFirewallConfigRequestBodyType = "raw_path"
	UpdateFirewallConfigRequestBodyTypeIPAddress        UpdateFirewallConfigRequestBodyType = "ip_address"
	UpdateFirewallConfigRequestBodyTypeRegion           UpdateFirewallConfigRequestBodyType = "region"
	UpdateFirewallConfigRequestBodyTypeProtocol         UpdateFirewallConfigRequestBodyType = "protocol"
	UpdateFirewallConfigRequestBodyTypeScheme           UpdateFirewallConfigRequestBodyType = "scheme"
	UpdateFirewallConfigRequestBodyTypeEnvironment      UpdateFirewallConfigRequestBodyType = "environment"
	UpdateFirewallConfigRequestBodyTypeUserAgent        UpdateFirewallConfigRequestBodyType = "user_agent"
	UpdateFirewallConfigRequestBodyTypeGeoContinent     UpdateFirewallConfigRequestBodyType = "geo_continent"
	UpdateFirewallConfigRequestBodyTypeGeoCountry       UpdateFirewallConfigRequestBodyType = "geo_country"
	UpdateFirewallConfigRequestBodyTypeGeoCountryRegion UpdateFirewallConfigRequestBodyType = "geo_country_region"
	UpdateFirewallConfigRequestBodyTypeGeoCity          UpdateFirewallConfigRequestBodyType = "geo_city"
	UpdateFirewallConfigRequestBodyTypeGeoAsNumber      UpdateFirewallConfigRequestBodyType = "geo_as_number"
	UpdateFirewallConfigRequestBodyTypeJa4Digest        UpdateFirewallConfigRequestBodyType = "ja4_digest"
	UpdateFirewallConfigRequestBodyTypeJa3Digest        UpdateFirewallConfigRequestBodyType = "ja3_digest"
	UpdateFirewallConfigRequestBodyTypeRateLimitAPIID   UpdateFirewallConfigRequestBodyType = "rate_limit_api_id"
)

func (e UpdateFirewallConfigRequestBodyType) ToPointer() *UpdateFirewallConfigRequestBodyType {
	return &e
}
func (e *UpdateFirewallConfigRequestBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "region":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		*e = UpdateFirewallConfigRequestBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodyType: %v", v)
	}
}

// Op - [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value.
type Op string

const (
	OpRe   Op = "re"
	OpEq   Op = "eq"
	OpNeq  Op = "neq"
	OpEx   Op = "ex"
	OpNex  Op = "nex"
	OpInc  Op = "inc"
	OpNinc Op = "ninc"
	OpPre  Op = "pre"
	OpSuf  Op = "suf"
	OpSub  Op = "sub"
	OpGt   Op = "gt"
	OpGte  Op = "gte"
	OpLt   Op = "lt"
	OpLte  Op = "lte"
)

func (e Op) ToPointer() *Op {
	return &e
}
func (e *Op) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "neq":
		fallthrough
	case "ex":
		fallthrough
	case "nex":
		fallthrough
	case "inc":
		fallthrough
	case "ninc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		*e = Op(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Op: %v", v)
	}
}

type UpdateFirewallConfigRequestBodySecurityRequest2ValueType string

const (
	UpdateFirewallConfigRequestBodySecurityRequest2ValueTypeStr        UpdateFirewallConfigRequestBodySecurityRequest2ValueType = "str"
	UpdateFirewallConfigRequestBodySecurityRequest2ValueTypeArrayOfStr UpdateFirewallConfigRequestBodySecurityRequest2ValueType = "arrayOfStr"
	UpdateFirewallConfigRequestBodySecurityRequest2ValueTypeNumber     UpdateFirewallConfigRequestBodySecurityRequest2ValueType = "number"
)

type UpdateFirewallConfigRequestBodySecurityRequest2Value struct {
	Str        *string
	ArrayOfStr []string
	Number     *float64

	Type UpdateFirewallConfigRequestBodySecurityRequest2ValueType
}

func CreateUpdateFirewallConfigRequestBodySecurityRequest2ValueStr(str string) UpdateFirewallConfigRequestBodySecurityRequest2Value {
	typ := UpdateFirewallConfigRequestBodySecurityRequest2ValueTypeStr

	return UpdateFirewallConfigRequestBodySecurityRequest2Value{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateFirewallConfigRequestBodySecurityRequest2ValueArrayOfStr(arrayOfStr []string) UpdateFirewallConfigRequestBodySecurityRequest2Value {
	typ := UpdateFirewallConfigRequestBodySecurityRequest2ValueTypeArrayOfStr

	return UpdateFirewallConfigRequestBodySecurityRequest2Value{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateUpdateFirewallConfigRequestBodySecurityRequest2ValueNumber(number float64) UpdateFirewallConfigRequestBodySecurityRequest2Value {
	typ := UpdateFirewallConfigRequestBodySecurityRequest2ValueTypeNumber

	return UpdateFirewallConfigRequestBodySecurityRequest2Value{
		Number: &number,
		Type:   typ,
	}
}

func (u *UpdateFirewallConfigRequestBodySecurityRequest2Value) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateFirewallConfigRequestBodySecurityRequest2ValueTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateFirewallConfigRequestBodySecurityRequest2ValueTypeArrayOfStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateFirewallConfigRequestBodySecurityRequest2ValueTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigRequestBodySecurityRequest2Value", string(data))
}

func (u UpdateFirewallConfigRequestBodySecurityRequest2Value) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigRequestBodySecurityRequest2Value: all fields are null")
}

type Conditions struct {
	// [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
	Type UpdateFirewallConfigRequestBodyType `json:"type"`
	// [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value.
	Op    Op                                                    `json:"op"`
	Neg   *bool                                                 `json:"neg,omitempty"`
	Key   *string                                               `json:"key,omitempty"`
	Value *UpdateFirewallConfigRequestBodySecurityRequest2Value `json:"value,omitempty"`
}

func (o *Conditions) GetType() UpdateFirewallConfigRequestBodyType {
	if o == nil {
		return UpdateFirewallConfigRequestBodyType("")
	}
	return o.Type
}

func (o *Conditions) GetOp() Op {
	if o == nil {
		return Op("")
	}
	return o.Op
}

func (o *Conditions) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *Conditions) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Conditions) GetValue() *UpdateFirewallConfigRequestBodySecurityRequest2Value {
	if o == nil {
		return nil
	}
	return o.Value
}

type ConditionGroup struct {
	Conditions []Conditions `json:"conditions"`
}

func (o *ConditionGroup) GetConditions() []Conditions {
	if o == nil {
		return []Conditions{}
	}
	return o.Conditions
}

type UpdateFirewallConfigRequestBodySecurityRequest2ValueAction string

const (
	UpdateFirewallConfigRequestBodySecurityRequest2ValueActionLog       UpdateFirewallConfigRequestBodySecurityRequest2ValueAction = "log"
	UpdateFirewallConfigRequestBodySecurityRequest2ValueActionChallenge UpdateFirewallConfigRequestBodySecurityRequest2ValueAction = "challenge"
	UpdateFirewallConfigRequestBodySecurityRequest2ValueActionDeny      UpdateFirewallConfigRequestBodySecurityRequest2ValueAction = "deny"
	UpdateFirewallConfigRequestBodySecurityRequest2ValueActionBypass    UpdateFirewallConfigRequestBodySecurityRequest2ValueAction = "bypass"
	UpdateFirewallConfigRequestBodySecurityRequest2ValueActionRateLimit UpdateFirewallConfigRequestBodySecurityRequest2ValueAction = "rate_limit"
	UpdateFirewallConfigRequestBodySecurityRequest2ValueActionRedirect  UpdateFirewallConfigRequestBodySecurityRequest2ValueAction = "redirect"
)

func (e UpdateFirewallConfigRequestBodySecurityRequest2ValueAction) ToPointer() *UpdateFirewallConfigRequestBodySecurityRequest2ValueAction {
	return &e
}
func (e *UpdateFirewallConfigRequestBodySecurityRequest2ValueAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = UpdateFirewallConfigRequestBodySecurityRequest2ValueAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigRequestBodySecurityRequest2ValueAction: %v", v)
	}
}

type RateLimitAlgo string

const (
	RateLimitAlgoFixedWindow RateLimitAlgo = "fixed_window"
	RateLimitAlgoTokenBucket RateLimitAlgo = "token_bucket"
)

func (e RateLimitAlgo) ToPointer() *RateLimitAlgo {
	return &e
}
func (e *RateLimitAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = RateLimitAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitAlgo: %v", v)
	}
}

type Action1 string

const (
	Action1Log       Action1 = "log"
	Action1Challenge Action1 = "challenge"
	Action1Deny      Action1 = "deny"
	Action1RateLimit Action1 = "rate_limit"
)

func (e Action1) ToPointer() *Action1 {
	return &e
}
func (e *Action1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "rate_limit":
		*e = Action1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action1: %v", v)
	}
}

type RateLimitActionType string

const (
	RateLimitActionTypeAction1 RateLimitActionType = "action_1"
	RateLimitActionTypeAny     RateLimitActionType = "any"
)

type RateLimitAction struct {
	Action1 *Action1
	Any     any

	Type RateLimitActionType
}

func CreateRateLimitActionAction1(action1 Action1) RateLimitAction {
	typ := RateLimitActionTypeAction1

	return RateLimitAction{
		Action1: &action1,
		Type:    typ,
	}
}

func CreateRateLimitActionAny(any any) RateLimitAction {
	typ := RateLimitActionTypeAny

	return RateLimitAction{
		Any:  any,
		Type: typ,
	}
}

func (u *RateLimitAction) UnmarshalJSON(data []byte) error {

	var action1 Action1 = Action1("")
	if err := utils.UnmarshalJSON(data, &action1, "", true, true); err == nil {
		u.Action1 = &action1
		u.Type = RateLimitActionTypeAction1
		return nil
	}

	var any any = nil
	if err := utils.UnmarshalJSON(data, &any, "", true, true); err == nil {
		u.Any = any
		u.Type = RateLimitActionTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RateLimitAction", string(data))
}

func (u RateLimitAction) MarshalJSON() ([]byte, error) {
	if u.Action1 != nil {
		return utils.MarshalJSON(u.Action1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type RateLimitAction: all fields are null")
}

type RateLimit1 struct {
	Algo   RateLimitAlgo    `json:"algo"`
	Window float64          `json:"window"`
	Limit  float64          `json:"limit"`
	Keys   []string         `json:"keys"`
	Action *RateLimitAction `json:"action,omitempty"`
}

func (o *RateLimit1) GetAlgo() RateLimitAlgo {
	if o == nil {
		return RateLimitAlgo("")
	}
	return o.Algo
}

func (o *RateLimit1) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *RateLimit1) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *RateLimit1) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *RateLimit1) GetAction() *RateLimitAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type RateLimitType string

const (
	RateLimitTypeRateLimit1 RateLimitType = "rateLimit_1"
	RateLimitTypeAny        RateLimitType = "any"
)

type RateLimit struct {
	RateLimit1 *RateLimit1
	Any        any

	Type RateLimitType
}

func CreateRateLimitRateLimit1(rateLimit1 RateLimit1) RateLimit {
	typ := RateLimitTypeRateLimit1

	return RateLimit{
		RateLimit1: &rateLimit1,
		Type:       typ,
	}
}

func CreateRateLimitAny(any any) RateLimit {
	typ := RateLimitTypeAny

	return RateLimit{
		Any:  any,
		Type: typ,
	}
}

func (u *RateLimit) UnmarshalJSON(data []byte) error {

	var rateLimit1 RateLimit1 = RateLimit1{}
	if err := utils.UnmarshalJSON(data, &rateLimit1, "", true, true); err == nil {
		u.RateLimit1 = &rateLimit1
		u.Type = RateLimitTypeRateLimit1
		return nil
	}

	var any any = nil
	if err := utils.UnmarshalJSON(data, &any, "", true, true); err == nil {
		u.Any = any
		u.Type = RateLimitTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RateLimit", string(data))
}

func (u RateLimit) MarshalJSON() ([]byte, error) {
	if u.RateLimit1 != nil {
		return utils.MarshalJSON(u.RateLimit1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type RateLimit: all fields are null")
}

type Redirect1 struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (o *Redirect1) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *Redirect1) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type RedirectType string

const (
	RedirectTypeRedirect1 RedirectType = "redirect_1"
	RedirectTypeAny       RedirectType = "any"
)

type Redirect struct {
	Redirect1 *Redirect1
	Any       any

	Type RedirectType
}

func CreateRedirectRedirect1(redirect1 Redirect1) Redirect {
	typ := RedirectTypeRedirect1

	return Redirect{
		Redirect1: &redirect1,
		Type:      typ,
	}
}

func CreateRedirectAny(any any) Redirect {
	typ := RedirectTypeAny

	return Redirect{
		Any:  any,
		Type: typ,
	}
}

func (u *Redirect) UnmarshalJSON(data []byte) error {

	var redirect1 Redirect1 = Redirect1{}
	if err := utils.UnmarshalJSON(data, &redirect1, "", true, true); err == nil {
		u.Redirect1 = &redirect1
		u.Type = RedirectTypeRedirect1
		return nil
	}

	var any any = nil
	if err := utils.UnmarshalJSON(data, &any, "", true, true); err == nil {
		u.Any = any
		u.Type = RedirectTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Redirect", string(data))
}

func (u Redirect) MarshalJSON() ([]byte, error) {
	if u.Redirect1 != nil {
		return utils.MarshalJSON(u.Redirect1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type Redirect: all fields are null")
}

type Mitigate struct {
	Action         UpdateFirewallConfigRequestBodySecurityRequest2ValueAction `json:"action"`
	RateLimit      *RateLimit                                                 `json:"rateLimit,omitempty"`
	Redirect       *Redirect                                                  `json:"redirect,omitempty"`
	ActionDuration *string                                                    `json:"actionDuration,omitempty"`
	BypassSystem   *bool                                                      `json:"bypassSystem,omitempty"`
}

func (o *Mitigate) GetAction() UpdateFirewallConfigRequestBodySecurityRequest2ValueAction {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest2ValueAction("")
	}
	return o.Action
}

func (o *Mitigate) GetRateLimit() *RateLimit {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *Mitigate) GetRedirect() *Redirect {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *Mitigate) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

func (o *Mitigate) GetBypassSystem() *bool {
	if o == nil {
		return nil
	}
	return o.BypassSystem
}

type UpdateFirewallConfigRequestBodySecurityRequest2Action struct {
	Mitigate *Mitigate `json:"mitigate,omitempty"`
}

func (o *UpdateFirewallConfigRequestBodySecurityRequest2Action) GetMitigate() *Mitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type Value struct {
	Name           string                                                `json:"name"`
	Description    *string                                               `json:"description,omitempty"`
	Active         bool                                                  `json:"active"`
	ConditionGroup []ConditionGroup                                      `json:"conditionGroup"`
	Action         UpdateFirewallConfigRequestBodySecurityRequest2Action `json:"action"`
}

func (o *Value) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Value) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Value) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Value) GetConditionGroup() []ConditionGroup {
	if o == nil {
		return []ConditionGroup{}
	}
	return o.ConditionGroup
}

func (o *Value) GetAction() UpdateFirewallConfigRequestBodySecurityRequest2Action {
	if o == nil {
		return UpdateFirewallConfigRequestBodySecurityRequest2Action{}
	}
	return o.Action
}

// UpdateFirewallConfigRequestBody2 - Add a custom rule
type UpdateFirewallConfigRequestBody2 struct {
	Action UpdateFirewallConfigRequestBodyAction `json:"action"`
	ID     any                                   `json:"id,omitempty"`
	Value  Value                                 `json:"value"`
}

func (o *UpdateFirewallConfigRequestBody2) GetAction() UpdateFirewallConfigRequestBodyAction {
	if o == nil {
		return UpdateFirewallConfigRequestBodyAction("")
	}
	return o.Action
}

func (o *UpdateFirewallConfigRequestBody2) GetID() any {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateFirewallConfigRequestBody2) GetValue() Value {
	if o == nil {
		return Value{}
	}
	return o.Value
}

type RequestBodyAction string

const (
	RequestBodyActionFirewallEnabled RequestBodyAction = "firewallEnabled"
)

func (e RequestBodyAction) ToPointer() *RequestBodyAction {
	return &e
}
func (e *RequestBodyAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "firewallEnabled":
		*e = RequestBodyAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestBodyAction: %v", v)
	}
}

// UpdateFirewallConfigRequestBody1 - Enable Firewall
type UpdateFirewallConfigRequestBody1 struct {
	Action RequestBodyAction `json:"action"`
	ID     any               `json:"id,omitempty"`
	Value  bool              `json:"value"`
}

func (o *UpdateFirewallConfigRequestBody1) GetAction() RequestBodyAction {
	if o == nil {
		return RequestBodyAction("")
	}
	return o.Action
}

func (o *UpdateFirewallConfigRequestBody1) GetID() any {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateFirewallConfigRequestBody1) GetValue() bool {
	if o == nil {
		return false
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodyUnionType string

const (
	UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody1 UpdateFirewallConfigRequestBodyUnionType = "updateFirewallConfig_requestBody_1"
	UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody2 UpdateFirewallConfigRequestBodyUnionType = "updateFirewallConfig_requestBody_2"
	UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody3 UpdateFirewallConfigRequestBodyUnionType = "updateFirewallConfig_requestBody_3"
	UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody4 UpdateFirewallConfigRequestBodyUnionType = "updateFirewallConfig_requestBody_4"
	UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody5 UpdateFirewallConfigRequestBodyUnionType = "updateFirewallConfig_requestBody_5"
	UpdateFirewallConfigRequestBodyUnionTypeRequestBody6                     UpdateFirewallConfigRequestBodyUnionType = "requestBody_6"
	UpdateFirewallConfigRequestBodyUnionTypeRequestBody7                     UpdateFirewallConfigRequestBodyUnionType = "requestBody_7"
	UpdateFirewallConfigRequestBodyUnionTypeRequestBody8                     UpdateFirewallConfigRequestBodyUnionType = "requestBody_8"
	UpdateFirewallConfigRequestBodyUnionTypeRequestBody9                     UpdateFirewallConfigRequestBodyUnionType = "requestBody_9"
	UpdateFirewallConfigRequestBodyUnionTypeRequestBody10                    UpdateFirewallConfigRequestBodyUnionType = "requestBody_10"
	UpdateFirewallConfigRequestBodyUnionTypeEleven                           UpdateFirewallConfigRequestBodyUnionType = "11"
	UpdateFirewallConfigRequestBodyUnionTypeTwelve                           UpdateFirewallConfigRequestBodyUnionType = "12"
)

type UpdateFirewallConfigRequestBody struct {
	UpdateFirewallConfigRequestBody1 *UpdateFirewallConfigRequestBody1
	UpdateFirewallConfigRequestBody2 *UpdateFirewallConfigRequestBody2
	UpdateFirewallConfigRequestBody3 *UpdateFirewallConfigRequestBody3
	UpdateFirewallConfigRequestBody4 *UpdateFirewallConfigRequestBody4
	UpdateFirewallConfigRequestBody5 *UpdateFirewallConfigRequestBody5
	RequestBody6                     *RequestBody6
	RequestBody7                     *RequestBody7
	RequestBody8                     *RequestBody8
	RequestBody9                     *RequestBody9
	RequestBody10                    *RequestBody10
	Eleven                           *Eleven
	Twelve                           *Twelve

	Type UpdateFirewallConfigRequestBodyUnionType
}

func CreateUpdateFirewallConfigRequestBodyUpdateFirewallConfigRequestBody1(updateFirewallConfigRequestBody1 UpdateFirewallConfigRequestBody1) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody1

	return UpdateFirewallConfigRequestBody{
		UpdateFirewallConfigRequestBody1: &updateFirewallConfigRequestBody1,
		Type:                             typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUpdateFirewallConfigRequestBody2(updateFirewallConfigRequestBody2 UpdateFirewallConfigRequestBody2) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody2

	return UpdateFirewallConfigRequestBody{
		UpdateFirewallConfigRequestBody2: &updateFirewallConfigRequestBody2,
		Type:                             typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUpdateFirewallConfigRequestBody3(updateFirewallConfigRequestBody3 UpdateFirewallConfigRequestBody3) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody3

	return UpdateFirewallConfigRequestBody{
		UpdateFirewallConfigRequestBody3: &updateFirewallConfigRequestBody3,
		Type:                             typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUpdateFirewallConfigRequestBody4(updateFirewallConfigRequestBody4 UpdateFirewallConfigRequestBody4) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody4

	return UpdateFirewallConfigRequestBody{
		UpdateFirewallConfigRequestBody4: &updateFirewallConfigRequestBody4,
		Type:                             typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUpdateFirewallConfigRequestBody5(updateFirewallConfigRequestBody5 UpdateFirewallConfigRequestBody5) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody5

	return UpdateFirewallConfigRequestBody{
		UpdateFirewallConfigRequestBody5: &updateFirewallConfigRequestBody5,
		Type:                             typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyRequestBody6(requestBody6 RequestBody6) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeRequestBody6

	return UpdateFirewallConfigRequestBody{
		RequestBody6: &requestBody6,
		Type:         typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyRequestBody7(requestBody7 RequestBody7) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeRequestBody7

	return UpdateFirewallConfigRequestBody{
		RequestBody7: &requestBody7,
		Type:         typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyRequestBody8(requestBody8 RequestBody8) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeRequestBody8

	return UpdateFirewallConfigRequestBody{
		RequestBody8: &requestBody8,
		Type:         typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyRequestBody9(requestBody9 RequestBody9) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeRequestBody9

	return UpdateFirewallConfigRequestBody{
		RequestBody9: &requestBody9,
		Type:         typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyRequestBody10(requestBody10 RequestBody10) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeRequestBody10

	return UpdateFirewallConfigRequestBody{
		RequestBody10: &requestBody10,
		Type:          typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyEleven(eleven Eleven) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeEleven

	return UpdateFirewallConfigRequestBody{
		Eleven: &eleven,
		Type:   typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyTwelve(twelve Twelve) UpdateFirewallConfigRequestBody {
	typ := UpdateFirewallConfigRequestBodyUnionTypeTwelve

	return UpdateFirewallConfigRequestBody{
		Twelve: &twelve,
		Type:   typ,
	}
}

func (u *UpdateFirewallConfigRequestBody) UnmarshalJSON(data []byte) error {

	var updateFirewallConfigRequestBody1 UpdateFirewallConfigRequestBody1 = UpdateFirewallConfigRequestBody1{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRequestBody1, "", true, true); err == nil {
		u.UpdateFirewallConfigRequestBody1 = &updateFirewallConfigRequestBody1
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody1
		return nil
	}

	var updateFirewallConfigRequestBody2 UpdateFirewallConfigRequestBody2 = UpdateFirewallConfigRequestBody2{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRequestBody2, "", true, true); err == nil {
		u.UpdateFirewallConfigRequestBody2 = &updateFirewallConfigRequestBody2
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody2
		return nil
	}

	var updateFirewallConfigRequestBody3 UpdateFirewallConfigRequestBody3 = UpdateFirewallConfigRequestBody3{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRequestBody3, "", true, true); err == nil {
		u.UpdateFirewallConfigRequestBody3 = &updateFirewallConfigRequestBody3
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody3
		return nil
	}

	var updateFirewallConfigRequestBody4 UpdateFirewallConfigRequestBody4 = UpdateFirewallConfigRequestBody4{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRequestBody4, "", true, true); err == nil {
		u.UpdateFirewallConfigRequestBody4 = &updateFirewallConfigRequestBody4
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody4
		return nil
	}

	var updateFirewallConfigRequestBody5 UpdateFirewallConfigRequestBody5 = UpdateFirewallConfigRequestBody5{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRequestBody5, "", true, true); err == nil {
		u.UpdateFirewallConfigRequestBody5 = &updateFirewallConfigRequestBody5
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody5
		return nil
	}

	var requestBody6 RequestBody6 = RequestBody6{}
	if err := utils.UnmarshalJSON(data, &requestBody6, "", true, true); err == nil {
		u.RequestBody6 = &requestBody6
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeRequestBody6
		return nil
	}

	var requestBody7 RequestBody7 = RequestBody7{}
	if err := utils.UnmarshalJSON(data, &requestBody7, "", true, true); err == nil {
		u.RequestBody7 = &requestBody7
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeRequestBody7
		return nil
	}

	var requestBody8 RequestBody8 = RequestBody8{}
	if err := utils.UnmarshalJSON(data, &requestBody8, "", true, true); err == nil {
		u.RequestBody8 = &requestBody8
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeRequestBody8
		return nil
	}

	var requestBody9 RequestBody9 = RequestBody9{}
	if err := utils.UnmarshalJSON(data, &requestBody9, "", true, true); err == nil {
		u.RequestBody9 = &requestBody9
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeRequestBody9
		return nil
	}

	var requestBody10 RequestBody10 = RequestBody10{}
	if err := utils.UnmarshalJSON(data, &requestBody10, "", true, true); err == nil {
		u.RequestBody10 = &requestBody10
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeRequestBody10
		return nil
	}

	var eleven Eleven = Eleven{}
	if err := utils.UnmarshalJSON(data, &eleven, "", true, true); err == nil {
		u.Eleven = &eleven
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeEleven
		return nil
	}

	var twelve Twelve = Twelve{}
	if err := utils.UnmarshalJSON(data, &twelve, "", true, true); err == nil {
		u.Twelve = &twelve
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeTwelve
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigRequestBody", string(data))
}

func (u UpdateFirewallConfigRequestBody) MarshalJSON() ([]byte, error) {
	if u.UpdateFirewallConfigRequestBody1 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRequestBody1, "", true)
	}

	if u.UpdateFirewallConfigRequestBody2 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRequestBody2, "", true)
	}

	if u.UpdateFirewallConfigRequestBody3 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRequestBody3, "", true)
	}

	if u.UpdateFirewallConfigRequestBody4 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRequestBody4, "", true)
	}

	if u.UpdateFirewallConfigRequestBody5 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRequestBody5, "", true)
	}

	if u.RequestBody6 != nil {
		return utils.MarshalJSON(u.RequestBody6, "", true)
	}

	if u.RequestBody7 != nil {
		return utils.MarshalJSON(u.RequestBody7, "", true)
	}

	if u.RequestBody8 != nil {
		return utils.MarshalJSON(u.RequestBody8, "", true)
	}

	if u.RequestBody9 != nil {
		return utils.MarshalJSON(u.RequestBody9, "", true)
	}

	if u.RequestBody10 != nil {
		return utils.MarshalJSON(u.RequestBody10, "", true)
	}

	if u.Eleven != nil {
		return utils.MarshalJSON(u.Eleven, "", true)
	}

	if u.Twelve != nil {
		return utils.MarshalJSON(u.Twelve, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigRequestBody: all fields are null")
}

type UpdateFirewallConfigRequest struct {
	ProjectID string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                         `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateFirewallConfigRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateFirewallConfigRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateFirewallConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateFirewallConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateFirewallConfigRequest) GetRequestBody() UpdateFirewallConfigRequestBody {
	if o == nil {
		return UpdateFirewallConfigRequestBody{}
	}
	return o.RequestBody
}

type UpdateFirewallConfigResponseBody struct {
}

type UpdateFirewallConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateFirewallConfigResponseBody
}

func (o *UpdateFirewallConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateFirewallConfigResponse) GetObject() *UpdateFirewallConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
