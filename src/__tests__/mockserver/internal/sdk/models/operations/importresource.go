// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ImportResourceStatus string

const (
	ImportResourceStatusReady       ImportResourceStatus = "ready"
	ImportResourceStatusPending     ImportResourceStatus = "pending"
	ImportResourceStatusSuspended   ImportResourceStatus = "suspended"
	ImportResourceStatusResumed     ImportResourceStatus = "resumed"
	ImportResourceStatusUninstalled ImportResourceStatus = "uninstalled"
	ImportResourceStatusError       ImportResourceStatus = "error"
)

func (e ImportResourceStatus) ToPointer() *ImportResourceStatus {
	return &e
}
func (e *ImportResourceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ready":
		fallthrough
	case "pending":
		fallthrough
	case "suspended":
		fallthrough
	case "resumed":
		fallthrough
	case "uninstalled":
		fallthrough
	case "error":
		*e = ImportResourceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportResourceStatus: %v", v)
	}
}

type ImportResourceType string

const (
	ImportResourceTypePrepayment   ImportResourceType = "prepayment"
	ImportResourceTypeSubscription ImportResourceType = "subscription"
)

func (e ImportResourceType) ToPointer() *ImportResourceType {
	return &e
}
func (e *ImportResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prepayment":
		fallthrough
	case "subscription":
		*e = ImportResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportResourceType: %v", v)
	}
}

type BillingPlan struct {
	ID                    string             `json:"id"`
	Type                  ImportResourceType `json:"type"`
	Name                  string             `json:"name"`
	PaymentMethodRequired *bool              `json:"paymentMethodRequired,omitempty"`
	AdditionalProperties  map[string]any     `additionalProperties:"true" json:"-"`
}

func (b BillingPlan) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BillingPlan) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BillingPlan) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *BillingPlan) GetType() ImportResourceType {
	if o == nil {
		return ImportResourceType("")
	}
	return o.Type
}

func (o *BillingPlan) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *BillingPlan) GetPaymentMethodRequired() *bool {
	if o == nil {
		return nil
	}
	return o.PaymentMethodRequired
}

func (o *BillingPlan) GetAdditionalProperties() map[string]any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type Level string

const (
	LevelInfo  Level = "info"
	LevelWarn  Level = "warn"
	LevelError Level = "error"
)

func (e Level) ToPointer() *Level {
	return &e
}
func (e *Level) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		*e = Level(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Level: %v", v)
	}
}

type Notification struct {
	Level   Level   `json:"level"`
	Title   string  `json:"title"`
	Message *string `json:"message,omitempty"`
	Href    *string `json:"href,omitempty"`
}

func (o *Notification) GetLevel() Level {
	if o == nil {
		return Level("")
	}
	return o.Level
}

func (o *Notification) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *Notification) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *Notification) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

type ImportResourceSecrets struct {
	Name   string  `json:"name"`
	Value  string  `json:"value"`
	Prefix *string `json:"prefix,omitempty"`
}

func (o *ImportResourceSecrets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ImportResourceSecrets) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *ImportResourceSecrets) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

type ImportResourceRequestBody struct {
	ProductID    string                  `json:"productId"`
	Name         string                  `json:"name"`
	Status       ImportResourceStatus    `json:"status"`
	Metadata     map[string]any          `json:"metadata,omitempty"`
	BillingPlan  *BillingPlan            `json:"billingPlan,omitempty"`
	Notification *Notification           `json:"notification,omitempty"`
	Secrets      []ImportResourceSecrets `json:"secrets,omitempty"`
}

func (o *ImportResourceRequestBody) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *ImportResourceRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ImportResourceRequestBody) GetStatus() ImportResourceStatus {
	if o == nil {
		return ImportResourceStatus("")
	}
	return o.Status
}

func (o *ImportResourceRequestBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ImportResourceRequestBody) GetBillingPlan() *BillingPlan {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *ImportResourceRequestBody) GetNotification() *Notification {
	if o == nil {
		return nil
	}
	return o.Notification
}

func (o *ImportResourceRequestBody) GetSecrets() []ImportResourceSecrets {
	if o == nil {
		return nil
	}
	return o.Secrets
}

type ImportResourceRequest struct {
	IntegrationConfigurationID string                     `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	ResourceID                 string                     `pathParam:"style=simple,explode=false,name=resourceId"`
	RequestBody                *ImportResourceRequestBody `request:"mediaType=application/json"`
}

func (o *ImportResourceRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *ImportResourceRequest) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

func (o *ImportResourceRequest) GetRequestBody() *ImportResourceRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type ImportResourceResponseBody struct {
	Name string `json:"name"`
}

func (o *ImportResourceResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ImportResourceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *ImportResourceResponseBody
}

func (o *ImportResourceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ImportResourceResponse) GetObject() *ImportResourceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
