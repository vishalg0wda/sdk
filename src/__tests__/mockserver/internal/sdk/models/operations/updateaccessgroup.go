// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// Role - The project role that will be added to this Access Group. \"null\" will remove this project level role.
type Role string

const (
	RoleAdmin            Role = "ADMIN"
	RoleProjectViewer    Role = "PROJECT_VIEWER"
	RoleProjectDeveloper Role = "PROJECT_DEVELOPER"
)

func (e Role) ToPointer() *Role {
	return &e
}
func (e *Role) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_VIEWER":
		fallthrough
	case "PROJECT_DEVELOPER":
		*e = Role(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Role: %v", v)
	}
}

type Projects struct {
	// The ID of the project.
	ProjectID string `json:"projectId"`
	// The project role that will be added to this Access Group. \"null\" will remove this project level role.
	Role *Role `json:"role"`
}

func (o *Projects) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Projects) GetRole() *Role {
	if o == nil {
		return nil
	}
	return o.Role
}

type UpdateAccessGroupRequestBody struct {
	// The name of the access group
	Name     *string    `json:"name,omitempty"`
	Projects []Projects `json:"projects,omitempty"`
	// List of members to add to the access group.
	MembersToAdd []string `json:"membersToAdd,omitempty"`
	// List of members to remove from the access group.
	MembersToRemove []string `json:"membersToRemove,omitempty"`
}

func (o *UpdateAccessGroupRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateAccessGroupRequestBody) GetProjects() []Projects {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *UpdateAccessGroupRequestBody) GetMembersToAdd() []string {
	if o == nil {
		return nil
	}
	return o.MembersToAdd
}

func (o *UpdateAccessGroupRequestBody) GetMembersToRemove() []string {
	if o == nil {
		return nil
	}
	return o.MembersToRemove
}

type UpdateAccessGroupRequest struct {
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                      `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateAccessGroupRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateAccessGroupRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateAccessGroupRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateAccessGroupRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateAccessGroupRequest) GetRequestBody() UpdateAccessGroupRequestBody {
	if o == nil {
		return UpdateAccessGroupRequestBody{}
	}
	return o.RequestBody
}

type UpdateAccessGroupEntitlements string

const (
	UpdateAccessGroupEntitlementsV0 UpdateAccessGroupEntitlements = "v0"
)

func (e UpdateAccessGroupEntitlements) ToPointer() *UpdateAccessGroupEntitlements {
	return &e
}
func (e *UpdateAccessGroupEntitlements) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v0":
		*e = UpdateAccessGroupEntitlements(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAccessGroupEntitlements: %v", v)
	}
}

type UpdateAccessGroupResponseBody struct {
	Entitlements []UpdateAccessGroupEntitlements `json:"entitlements,omitempty"`
	// The name of this access group.
	Name string `json:"name"`
	// Timestamp in milliseconds when the access group was created.
	CreatedAt string `json:"createdAt"`
	// ID of the team that this access group belongs to.
	TeamID string `json:"teamId"`
	// Timestamp in milliseconds when the access group was last updated.
	UpdatedAt string `json:"updatedAt"`
	// ID of the access group.
	AccessGroupID string `json:"accessGroupId"`
	// Number of members in the access group.
	MembersCount float64 `json:"membersCount"`
	// Number of projects in the access group.
	ProjectsCount float64 `json:"projectsCount"`
	// Roles that the team has in the access group.
	TeamRoles []string `json:"teamRoles,omitempty"`
	// Permissions that the team has in the access group.
	TeamPermissions []string `json:"teamPermissions,omitempty"`
}

func (o *UpdateAccessGroupResponseBody) GetEntitlements() []UpdateAccessGroupEntitlements {
	if o == nil {
		return nil
	}
	return o.Entitlements
}

func (o *UpdateAccessGroupResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateAccessGroupResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdateAccessGroupResponseBody) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *UpdateAccessGroupResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *UpdateAccessGroupResponseBody) GetAccessGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccessGroupID
}

func (o *UpdateAccessGroupResponseBody) GetMembersCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.MembersCount
}

func (o *UpdateAccessGroupResponseBody) GetProjectsCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectsCount
}

func (o *UpdateAccessGroupResponseBody) GetTeamRoles() []string {
	if o == nil {
		return nil
	}
	return o.TeamRoles
}

func (o *UpdateAccessGroupResponseBody) GetTeamPermissions() []string {
	if o == nil {
		return nil
	}
	return o.TeamPermissions
}

type UpdateAccessGroupResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateAccessGroupResponseBody
}

func (o *UpdateAccessGroupResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateAccessGroupResponse) GetObject() *UpdateAccessGroupResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
