// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type ReadAccessGroupRequest struct {
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *ReadAccessGroupRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *ReadAccessGroupRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ReadAccessGroupRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type Entitlements string

const (
	EntitlementsV0 Entitlements = "v0"
)

func (e Entitlements) ToPointer() *Entitlements {
	return &e
}
func (e *Entitlements) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v0":
		*e = Entitlements(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Entitlements: %v", v)
	}
}

type ReadAccessGroupResponseBody struct {
	Entitlements   []Entitlements `json:"entitlements,omitempty"`
	IsDsyncManaged bool           `json:"isDsyncManaged"`
	// The name of this access group.
	Name string `json:"name"`
	// Timestamp in milliseconds when the access group was created.
	CreatedAt string `json:"createdAt"`
	// ID of the team that this access group belongs to.
	TeamID string `json:"teamId"`
	// Timestamp in milliseconds when the access group was last updated.
	UpdatedAt string `json:"updatedAt"`
	// ID of the access group.
	AccessGroupID string `json:"accessGroupId"`
	// Number of members in the access group.
	MembersCount float64 `json:"membersCount"`
	// Number of projects in the access group.
	ProjectsCount float64 `json:"projectsCount"`
	// Roles that the team has in the access group.
	TeamRoles []string `json:"teamRoles,omitempty"`
	// Permissions that the team has in the access group.
	TeamPermissions []string `json:"teamPermissions,omitempty"`
}

func (o *ReadAccessGroupResponseBody) GetEntitlements() []Entitlements {
	if o == nil {
		return nil
	}
	return o.Entitlements
}

func (o *ReadAccessGroupResponseBody) GetIsDsyncManaged() bool {
	if o == nil {
		return false
	}
	return o.IsDsyncManaged
}

func (o *ReadAccessGroupResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ReadAccessGroupResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ReadAccessGroupResponseBody) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *ReadAccessGroupResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *ReadAccessGroupResponseBody) GetAccessGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccessGroupID
}

func (o *ReadAccessGroupResponseBody) GetMembersCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.MembersCount
}

func (o *ReadAccessGroupResponseBody) GetProjectsCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectsCount
}

func (o *ReadAccessGroupResponseBody) GetTeamRoles() []string {
	if o == nil {
		return nil
	}
	return o.TeamRoles
}

func (o *ReadAccessGroupResponseBody) GetTeamPermissions() []string {
	if o == nil {
		return nil
	}
	return o.TeamPermissions
}

type ReadAccessGroupResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *ReadAccessGroupResponseBody
}

func (o *ReadAccessGroupResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ReadAccessGroupResponse) GetObject() *ReadAccessGroupResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
