// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ArtifactQueryRequestBody struct {
	// artifact hashes
	Hashes []string `json:"hashes"`
}

func (o *ArtifactQueryRequestBody) GetHashes() []string {
	if o == nil {
		return []string{}
	}
	return o.Hashes
}

type ArtifactQueryRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                  `queryParam:"style=form,explode=true,name=slug"`
	RequestBody ArtifactQueryRequestBody `request:"mediaType=application/json"`
}

func (o *ArtifactQueryRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ArtifactQueryRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *ArtifactQueryRequest) GetRequestBody() ArtifactQueryRequestBody {
	if o == nil {
		return ArtifactQueryRequestBody{}
	}
	return o.RequestBody
}

type Error struct {
	Message string `json:"message"`
}

func (o *Error) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type ResponseBody2 struct {
	Error Error `json:"error"`
}

func (o *ResponseBody2) GetError() Error {
	if o == nil {
		return Error{}
	}
	return o.Error
}

type ResponseBody1 struct {
	Size           float64 `json:"size"`
	TaskDurationMs float64 `json:"taskDurationMs"`
	Tag            *string `json:"tag,omitempty"`
}

func (o *ResponseBody1) GetSize() float64 {
	if o == nil {
		return 0.0
	}
	return o.Size
}

func (o *ResponseBody1) GetTaskDurationMs() float64 {
	if o == nil {
		return 0.0
	}
	return o.TaskDurationMs
}

func (o *ResponseBody1) GetTag() *string {
	if o == nil {
		return nil
	}
	return o.Tag
}

type ResponseBodyUnionType string

const (
	ResponseBodyUnionTypeResponseBody1 ResponseBodyUnionType = "responseBody_1"
	ResponseBodyUnionTypeResponseBody2 ResponseBodyUnionType = "responseBody_2"
)

type ResponseBody struct {
	ResponseBody1 *ResponseBody1
	ResponseBody2 *ResponseBody2

	Type ResponseBodyUnionType
}

func CreateResponseBodyResponseBody1(responseBody1 ResponseBody1) ResponseBody {
	typ := ResponseBodyUnionTypeResponseBody1

	return ResponseBody{
		ResponseBody1: &responseBody1,
		Type:          typ,
	}
}

func CreateResponseBodyResponseBody2(responseBody2 ResponseBody2) ResponseBody {
	typ := ResponseBodyUnionTypeResponseBody2

	return ResponseBody{
		ResponseBody2: &responseBody2,
		Type:          typ,
	}
}

func (u *ResponseBody) UnmarshalJSON(data []byte) error {

	var responseBody2 ResponseBody2 = ResponseBody2{}
	if err := utils.UnmarshalJSON(data, &responseBody2, "", true, true); err == nil {
		u.ResponseBody2 = &responseBody2
		u.Type = ResponseBodyUnionTypeResponseBody2
		return nil
	}

	var responseBody1 ResponseBody1 = ResponseBody1{}
	if err := utils.UnmarshalJSON(data, &responseBody1, "", true, true); err == nil {
		u.ResponseBody1 = &responseBody1
		u.Type = ResponseBodyUnionTypeResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseBody", string(data))
}

func (u ResponseBody) MarshalJSON() ([]byte, error) {
	if u.ResponseBody1 != nil {
		return utils.MarshalJSON(u.ResponseBody1, "", true)
	}

	if u.ResponseBody2 != nil {
		return utils.MarshalJSON(u.ResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseBody: all fields are null")
}

type ArtifactQueryResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   map[string]*ResponseBody
}

func (o *ArtifactQueryResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ArtifactQueryResponse) GetObject() map[string]*ResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
