// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetEdgeConfigRequest struct {
	EdgeConfigID string `pathParam:"style=simple,explode=false,name=edgeConfigId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetEdgeConfigRequest) GetEdgeConfigID() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigID
}

func (o *GetEdgeConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetEdgeConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetEdgeConfigTransfer - Keeps track of the current state of the Edge Config while it gets transferred.
type GetEdgeConfigTransfer struct {
	FromAccountID string   `json:"fromAccountId"`
	StartedAt     float64  `json:"startedAt"`
	DoneAt        *float64 `json:"doneAt"`
}

func (o *GetEdgeConfigTransfer) GetFromAccountID() string {
	if o == nil {
		return ""
	}
	return o.FromAccountID
}

func (o *GetEdgeConfigTransfer) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *GetEdgeConfigTransfer) GetDoneAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DoneAt
}

type GetEdgeConfigSchema struct {
}

type GetEdgeConfigPurposeEdgeConfigType string

const (
	GetEdgeConfigPurposeEdgeConfigTypeExperimentation GetEdgeConfigPurposeEdgeConfigType = "experimentation"
)

func (e GetEdgeConfigPurposeEdgeConfigType) ToPointer() *GetEdgeConfigPurposeEdgeConfigType {
	return &e
}
func (e *GetEdgeConfigPurposeEdgeConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "experimentation":
		*e = GetEdgeConfigPurposeEdgeConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEdgeConfigPurposeEdgeConfigType: %v", v)
	}
}

type GetEdgeConfigPurpose2 struct {
	Type       GetEdgeConfigPurposeEdgeConfigType `json:"type"`
	ResourceID string                             `json:"resourceId"`
}

func (o *GetEdgeConfigPurpose2) GetType() GetEdgeConfigPurposeEdgeConfigType {
	if o == nil {
		return GetEdgeConfigPurposeEdgeConfigType("")
	}
	return o.Type
}

func (o *GetEdgeConfigPurpose2) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

type GetEdgeConfigPurposeType string

const (
	GetEdgeConfigPurposeTypeFlags GetEdgeConfigPurposeType = "flags"
)

func (e GetEdgeConfigPurposeType) ToPointer() *GetEdgeConfigPurposeType {
	return &e
}
func (e *GetEdgeConfigPurposeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags":
		*e = GetEdgeConfigPurposeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEdgeConfigPurposeType: %v", v)
	}
}

type GetEdgeConfigPurpose1 struct {
	Type      GetEdgeConfigPurposeType `json:"type"`
	ProjectID string                   `json:"projectId"`
}

func (o *GetEdgeConfigPurpose1) GetType() GetEdgeConfigPurposeType {
	if o == nil {
		return GetEdgeConfigPurposeType("")
	}
	return o.Type
}

func (o *GetEdgeConfigPurpose1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type GetEdgeConfigPurposeUnionType string

const (
	GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurpose1 GetEdgeConfigPurposeUnionType = "getEdgeConfig_purpose_1"
	GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurpose2 GetEdgeConfigPurposeUnionType = "getEdgeConfig_purpose_2"
)

type GetEdgeConfigPurpose struct {
	GetEdgeConfigPurpose1 *GetEdgeConfigPurpose1
	GetEdgeConfigPurpose2 *GetEdgeConfigPurpose2

	Type GetEdgeConfigPurposeUnionType
}

func CreateGetEdgeConfigPurposeGetEdgeConfigPurpose1(getEdgeConfigPurpose1 GetEdgeConfigPurpose1) GetEdgeConfigPurpose {
	typ := GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurpose1

	return GetEdgeConfigPurpose{
		GetEdgeConfigPurpose1: &getEdgeConfigPurpose1,
		Type:                  typ,
	}
}

func CreateGetEdgeConfigPurposeGetEdgeConfigPurpose2(getEdgeConfigPurpose2 GetEdgeConfigPurpose2) GetEdgeConfigPurpose {
	typ := GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurpose2

	return GetEdgeConfigPurpose{
		GetEdgeConfigPurpose2: &getEdgeConfigPurpose2,
		Type:                  typ,
	}
}

func (u *GetEdgeConfigPurpose) UnmarshalJSON(data []byte) error {

	var getEdgeConfigPurpose1 GetEdgeConfigPurpose1 = GetEdgeConfigPurpose1{}
	if err := utils.UnmarshalJSON(data, &getEdgeConfigPurpose1, "", true, true); err == nil {
		u.GetEdgeConfigPurpose1 = &getEdgeConfigPurpose1
		u.Type = GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurpose1
		return nil
	}

	var getEdgeConfigPurpose2 GetEdgeConfigPurpose2 = GetEdgeConfigPurpose2{}
	if err := utils.UnmarshalJSON(data, &getEdgeConfigPurpose2, "", true, true); err == nil {
		u.GetEdgeConfigPurpose2 = &getEdgeConfigPurpose2
		u.Type = GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurpose2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetEdgeConfigPurpose", string(data))
}

func (u GetEdgeConfigPurpose) MarshalJSON() ([]byte, error) {
	if u.GetEdgeConfigPurpose1 != nil {
		return utils.MarshalJSON(u.GetEdgeConfigPurpose1, "", true)
	}

	if u.GetEdgeConfigPurpose2 != nil {
		return utils.MarshalJSON(u.GetEdgeConfigPurpose2, "", true)
	}

	return nil, errors.New("could not marshal union type GetEdgeConfigPurpose: all fields are null")
}

// GetEdgeConfigResponseBody - The EdgeConfig.
type GetEdgeConfigResponseBody struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	ID        *string  `json:"id,omitempty"`
	// Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
	Slug    *string `json:"slug,omitempty"`
	OwnerID *string `json:"ownerId,omitempty"`
	Digest  *string `json:"digest,omitempty"`
	// Keeps track of the current state of the Edge Config while it gets transferred.
	Transfer    *GetEdgeConfigTransfer `json:"transfer,omitempty"`
	Schema      *GetEdgeConfigSchema   `json:"schema,omitempty"`
	Purpose     *GetEdgeConfigPurpose  `json:"purpose,omitempty"`
	SizeInBytes float64                `json:"sizeInBytes"`
	ItemCount   float64                `json:"itemCount"`
}

func (o *GetEdgeConfigResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetEdgeConfigResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetEdgeConfigResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetEdgeConfigResponseBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetEdgeConfigResponseBody) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *GetEdgeConfigResponseBody) GetDigest() *string {
	if o == nil {
		return nil
	}
	return o.Digest
}

func (o *GetEdgeConfigResponseBody) GetTransfer() *GetEdgeConfigTransfer {
	if o == nil {
		return nil
	}
	return o.Transfer
}

func (o *GetEdgeConfigResponseBody) GetSchema() *GetEdgeConfigSchema {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *GetEdgeConfigResponseBody) GetPurpose() *GetEdgeConfigPurpose {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *GetEdgeConfigResponseBody) GetSizeInBytes() float64 {
	if o == nil {
		return 0.0
	}
	return o.SizeInBytes
}

func (o *GetEdgeConfigResponseBody) GetItemCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ItemCount
}

type GetEdgeConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The EdgeConfig.
	Object *GetEdgeConfigResponseBody
}

func (o *GetEdgeConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetEdgeConfigResponse) GetObject() *GetEdgeConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
