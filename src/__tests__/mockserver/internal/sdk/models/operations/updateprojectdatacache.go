// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateProjectDataCacheRequestBody struct {
	// Enable or disable data cache for the project - default: false
	Disabled *bool `json:"disabled,omitempty"`
}

func (o *UpdateProjectDataCacheRequestBody) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

type UpdateProjectDataCacheRequest struct {
	// The unique project identifier
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                           `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateProjectDataCacheRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateProjectDataCacheRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCacheRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectDataCacheRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectDataCacheRequest) GetRequestBody() UpdateProjectDataCacheRequestBody {
	if o == nil {
		return UpdateProjectDataCacheRequestBody{}
	}
	return o.RequestBody
}

type Analytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *Analytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Analytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *Analytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *Analytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *Analytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *Analytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *Analytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type SpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *SpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *SpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *SpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *SpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *SpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type Definitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *Definitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *Definitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *Definitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type Crons struct {
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	UpdatedAt  float64  `json:"updatedAt"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string       `json:"deploymentId"`
	Definitions  []Definitions `json:"definitions"`
}

func (o *Crons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *Crons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *Crons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *Crons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *Crons) GetDefinitions() []Definitions {
	if o == nil {
		return []Definitions{}
	}
	return o.Definitions
}

type DataCache struct {
	UserDisabled     bool     `json:"userDisabled"`
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
}

func (o *DataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

func (o *DataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *DataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

type DeploymentExpiration struct {
	ExpirationDays           *float64 `json:"expirationDays,omitempty"`
	ExpirationDaysProduction *float64 `json:"expirationDaysProduction,omitempty"`
	ExpirationDaysCanceled   *float64 `json:"expirationDaysCanceled,omitempty"`
	ExpirationDaysErrored    *float64 `json:"expirationDaysErrored,omitempty"`
	DeploymentsToKeep        *float64 `json:"deploymentsToKeep,omitempty"`
}

func (o *DeploymentExpiration) GetExpirationDays() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDays
}

func (o *DeploymentExpiration) GetExpirationDaysProduction() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysProduction
}

func (o *DeploymentExpiration) GetExpirationDaysCanceled() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysCanceled
}

func (o *DeploymentExpiration) GetExpirationDaysErrored() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysErrored
}

func (o *DeploymentExpiration) GetDeploymentsToKeep() *float64 {
	if o == nil {
		return nil
	}
	return o.DeploymentsToKeep
}

type UpdateProjectDataCacheTarget2 string

const (
	UpdateProjectDataCacheTarget2Production  UpdateProjectDataCacheTarget2 = "production"
	UpdateProjectDataCacheTarget2Preview     UpdateProjectDataCacheTarget2 = "preview"
	UpdateProjectDataCacheTarget2Development UpdateProjectDataCacheTarget2 = "development"
)

func (e UpdateProjectDataCacheTarget2) ToPointer() *UpdateProjectDataCacheTarget2 {
	return &e
}
func (e *UpdateProjectDataCacheTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCacheTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTarget2: %v", v)
	}
}

type UpdateProjectDataCacheTarget1 string

const (
	UpdateProjectDataCacheTarget1Production  UpdateProjectDataCacheTarget1 = "production"
	UpdateProjectDataCacheTarget1Preview     UpdateProjectDataCacheTarget1 = "preview"
	UpdateProjectDataCacheTarget1Development UpdateProjectDataCacheTarget1 = "development"
)

func (e UpdateProjectDataCacheTarget1) ToPointer() *UpdateProjectDataCacheTarget1 {
	return &e
}
func (e *UpdateProjectDataCacheTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCacheTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTarget1: %v", v)
	}
}

type UpdateProjectDataCacheTargetType string

const (
	UpdateProjectDataCacheTargetTypeArrayOfUpdateProjectDataCacheTarget1 UpdateProjectDataCacheTargetType = "arrayOfUpdateProjectDataCacheTarget1"
	UpdateProjectDataCacheTargetTypeUpdateProjectDataCacheTarget2        UpdateProjectDataCacheTargetType = "updateProjectDataCache_target_2"
)

type UpdateProjectDataCacheTarget struct {
	ArrayOfUpdateProjectDataCacheTarget1 []UpdateProjectDataCacheTarget1
	UpdateProjectDataCacheTarget2        *UpdateProjectDataCacheTarget2

	Type UpdateProjectDataCacheTargetType
}

func CreateUpdateProjectDataCacheTargetArrayOfUpdateProjectDataCacheTarget1(arrayOfUpdateProjectDataCacheTarget1 []UpdateProjectDataCacheTarget1) UpdateProjectDataCacheTarget {
	typ := UpdateProjectDataCacheTargetTypeArrayOfUpdateProjectDataCacheTarget1

	return UpdateProjectDataCacheTarget{
		ArrayOfUpdateProjectDataCacheTarget1: arrayOfUpdateProjectDataCacheTarget1,
		Type:                                 typ,
	}
}

func CreateUpdateProjectDataCacheTargetUpdateProjectDataCacheTarget2(updateProjectDataCacheTarget2 UpdateProjectDataCacheTarget2) UpdateProjectDataCacheTarget {
	typ := UpdateProjectDataCacheTargetTypeUpdateProjectDataCacheTarget2

	return UpdateProjectDataCacheTarget{
		UpdateProjectDataCacheTarget2: &updateProjectDataCacheTarget2,
		Type:                          typ,
	}
}

func (u *UpdateProjectDataCacheTarget) UnmarshalJSON(data []byte) error {

	var arrayOfUpdateProjectDataCacheTarget1 []UpdateProjectDataCacheTarget1 = []UpdateProjectDataCacheTarget1{}
	if err := utils.UnmarshalJSON(data, &arrayOfUpdateProjectDataCacheTarget1, "", true, true); err == nil {
		u.ArrayOfUpdateProjectDataCacheTarget1 = arrayOfUpdateProjectDataCacheTarget1
		u.Type = UpdateProjectDataCacheTargetTypeArrayOfUpdateProjectDataCacheTarget1
		return nil
	}

	var updateProjectDataCacheTarget2 UpdateProjectDataCacheTarget2 = UpdateProjectDataCacheTarget2("")
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheTarget2, "", true, true); err == nil {
		u.UpdateProjectDataCacheTarget2 = &updateProjectDataCacheTarget2
		u.Type = UpdateProjectDataCacheTargetTypeUpdateProjectDataCacheTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheTarget", string(data))
}

func (u UpdateProjectDataCacheTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfUpdateProjectDataCacheTarget1 != nil {
		return utils.MarshalJSON(u.ArrayOfUpdateProjectDataCacheTarget1, "", true)
	}

	if u.UpdateProjectDataCacheTarget2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheTarget: all fields are null")
}

type UpdateProjectDataCacheProjectsResponse200Type string

const (
	UpdateProjectDataCacheProjectsResponse200TypeSecret    UpdateProjectDataCacheProjectsResponse200Type = "secret"
	UpdateProjectDataCacheProjectsResponse200TypeSystem    UpdateProjectDataCacheProjectsResponse200Type = "system"
	UpdateProjectDataCacheProjectsResponse200TypeEncrypted UpdateProjectDataCacheProjectsResponse200Type = "encrypted"
	UpdateProjectDataCacheProjectsResponse200TypePlain     UpdateProjectDataCacheProjectsResponse200Type = "plain"
	UpdateProjectDataCacheProjectsResponse200TypeSensitive UpdateProjectDataCacheProjectsResponse200Type = "sensitive"
)

func (e UpdateProjectDataCacheProjectsResponse200Type) ToPointer() *UpdateProjectDataCacheProjectsResponse200Type {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = UpdateProjectDataCacheProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200Type: %v", v)
	}
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15TypeFlagsConnectionString UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type = "flags-connection-string"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type: %v", v)
	}
}

type Fifteen struct {
	Type      UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type `json:"type"`
	ProjectID string                                                                                   `json:"projectId"`
}

func (o *Fifteen) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type("")
	}
	return o.Type
}

func (o *Fifteen) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14TypeIntegrationStoreSecret UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = "integration-store-secret"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type: %v", v)
	}
}

type Fourteen struct {
	Type                       UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type `json:"type"`
	StoreID                    string                                                                                   `json:"storeId"`
	IntegrationID              string                                                                                   `json:"integrationId"`
	IntegrationProductID       string                                                                                   `json:"integrationProductId"`
	IntegrationConfigurationID string                                                                                   `json:"integrationConfigurationId"`
}

func (o *Fourteen) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type("")
	}
	return o.Type
}

func (o *Fourteen) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *Fourteen) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *Fourteen) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *Fourteen) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13TypePostgresURLNoSsl UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = "postgres-url-no-ssl"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type: %v", v)
	}
}

type Thirteen struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type `json:"type"`
	StoreID string                                                                                   `json:"storeId"`
}

func (o *Thirteen) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type("")
	}
	return o.Type
}

func (o *Thirteen) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12TypePostgresDatabase UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = "postgres-database"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type: %v", v)
	}
}

type UpdateProjectDataCacheContentHint12 struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type `json:"type"`
	StoreID string                                                                                   `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHint12) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11TypePostgresPassword UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = "postgres-password"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type: %v", v)
	}
}

type UpdateProjectDataCacheContentHint11 struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type `json:"type"`
	StoreID string                                                                                   `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHint11) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10TypePostgresHost UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = "postgres-host"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type: %v", v)
	}
}

type ContentHint10 struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type `json:"type"`
	StoreID string                                                                                   `json:"storeId"`
}

func (o *ContentHint10) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type("")
	}
	return o.Type
}

func (o *ContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9TypePostgresUser UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = "postgres-user"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type: %v", v)
	}
}

type ContentHint9 struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type `json:"type"`
	StoreID string                                                                                  `json:"storeId"`
}

func (o *ContentHint9) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type("")
	}
	return o.Type
}

func (o *ContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvTypePostgresPrismaURL UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = "postgres-prisma-url"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

type ContentHint8 struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
	StoreID string                                                                                 `json:"storeId"`
}

func (o *ContentHint8) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

func (o *ContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyTypePostgresURLNonPooling UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType = "postgres-url-non-pooling"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type ContentHint7 struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                              `json:"storeId"`
}

func (o *ContentHint7) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *ContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONTypePostgresURL UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType = "postgres-url"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type ContentHint6 struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType `json:"type"`
	StoreID string                                                                  `json:"storeId"`
}

func (o *ContentHint6) GetType() UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *ContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsResponse200Type string

const (
	UpdateProjectDataCacheContentHintProjectsResponse200TypeBlobReadWriteToken UpdateProjectDataCacheContentHintProjectsResponse200Type = "blob-read-write-token"
)

func (e UpdateProjectDataCacheContentHintProjectsResponse200Type) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponse200Type {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = UpdateProjectDataCacheContentHintProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponse200Type: %v", v)
	}
}

type ContentHint5 struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponse200Type `json:"type"`
	StoreID string                                                   `json:"storeId"`
}

func (o *ContentHint5) GetType() UpdateProjectDataCacheContentHintProjectsResponse200Type {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponse200Type("")
	}
	return o.Type
}

func (o *ContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsResponseType string

const (
	UpdateProjectDataCacheContentHintProjectsResponseTypeRedisRestAPIReadOnlyToken UpdateProjectDataCacheContentHintProjectsResponseType = "redis-rest-api-read-only-token"
)

func (e UpdateProjectDataCacheContentHintProjectsResponseType) ToPointer() *UpdateProjectDataCacheContentHintProjectsResponseType {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = UpdateProjectDataCacheContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsResponseType: %v", v)
	}
}

type ContentHint4 struct {
	Type    UpdateProjectDataCacheContentHintProjectsResponseType `json:"type"`
	StoreID string                                                `json:"storeId"`
}

func (o *ContentHint4) GetType() UpdateProjectDataCacheContentHintProjectsResponseType {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *ContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintProjectsType string

const (
	UpdateProjectDataCacheContentHintProjectsTypeRedisRestAPIToken UpdateProjectDataCacheContentHintProjectsType = "redis-rest-api-token"
)

func (e UpdateProjectDataCacheContentHintProjectsType) ToPointer() *UpdateProjectDataCacheContentHintProjectsType {
	return &e
}
func (e *UpdateProjectDataCacheContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = UpdateProjectDataCacheContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintProjectsType: %v", v)
	}
}

type ContentHint3 struct {
	Type    UpdateProjectDataCacheContentHintProjectsType `json:"type"`
	StoreID string                                        `json:"storeId"`
}

func (o *ContentHint3) GetType() UpdateProjectDataCacheContentHintProjectsType {
	if o == nil {
		return UpdateProjectDataCacheContentHintProjectsType("")
	}
	return o.Type
}

func (o *ContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintType string

const (
	UpdateProjectDataCacheContentHintTypeRedisRestAPIURL UpdateProjectDataCacheContentHintType = "redis-rest-api-url"
)

func (e UpdateProjectDataCacheContentHintType) ToPointer() *UpdateProjectDataCacheContentHintType {
	return &e
}
func (e *UpdateProjectDataCacheContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = UpdateProjectDataCacheContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheContentHintType: %v", v)
	}
}

type ContentHint2 struct {
	Type    UpdateProjectDataCacheContentHintType `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *ContentHint2) GetType() UpdateProjectDataCacheContentHintType {
	if o == nil {
		return UpdateProjectDataCacheContentHintType("")
	}
	return o.Type
}

func (o *ContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type ContentHintType string

const (
	ContentHintTypeRedisURL ContentHintType = "redis-url"
)

func (e ContentHintType) ToPointer() *ContentHintType {
	return &e
}
func (e *ContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = ContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContentHintType: %v", v)
	}
}

type ContentHint1 struct {
	Type    ContentHintType `json:"type"`
	StoreID string          `json:"storeId"`
}

func (o *ContentHint1) GetType() ContentHintType {
	if o == nil {
		return ContentHintType("")
	}
	return o.Type
}

func (o *ContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type ContentHintUnionType string

const (
	ContentHintUnionTypeContentHint1                        ContentHintUnionType = "contentHint_1"
	ContentHintUnionTypeContentHint2                        ContentHintUnionType = "contentHint_2"
	ContentHintUnionTypeContentHint3                        ContentHintUnionType = "contentHint_3"
	ContentHintUnionTypeContentHint4                        ContentHintUnionType = "contentHint_4"
	ContentHintUnionTypeContentHint5                        ContentHintUnionType = "contentHint_5"
	ContentHintUnionTypeContentHint6                        ContentHintUnionType = "contentHint_6"
	ContentHintUnionTypeContentHint7                        ContentHintUnionType = "contentHint_7"
	ContentHintUnionTypeContentHint8                        ContentHintUnionType = "contentHint_8"
	ContentHintUnionTypeContentHint9                        ContentHintUnionType = "contentHint_9"
	ContentHintUnionTypeContentHint10                       ContentHintUnionType = "contentHint_10"
	ContentHintUnionTypeUpdateProjectDataCacheContentHint11 ContentHintUnionType = "updateProjectDataCache_contentHint_11"
	ContentHintUnionTypeUpdateProjectDataCacheContentHint12 ContentHintUnionType = "updateProjectDataCache_contentHint_12"
	ContentHintUnionTypeThirteen                            ContentHintUnionType = "13"
	ContentHintUnionTypeFourteen                            ContentHintUnionType = "14"
	ContentHintUnionTypeFifteen                             ContentHintUnionType = "15"
)

type ContentHint struct {
	ContentHint1                        *ContentHint1
	ContentHint2                        *ContentHint2
	ContentHint3                        *ContentHint3
	ContentHint4                        *ContentHint4
	ContentHint5                        *ContentHint5
	ContentHint6                        *ContentHint6
	ContentHint7                        *ContentHint7
	ContentHint8                        *ContentHint8
	ContentHint9                        *ContentHint9
	ContentHint10                       *ContentHint10
	UpdateProjectDataCacheContentHint11 *UpdateProjectDataCacheContentHint11
	UpdateProjectDataCacheContentHint12 *UpdateProjectDataCacheContentHint12
	Thirteen                            *Thirteen
	Fourteen                            *Fourteen
	Fifteen                             *Fifteen

	Type ContentHintUnionType
}

func CreateContentHintContentHint1(contentHint1 ContentHint1) ContentHint {
	typ := ContentHintUnionTypeContentHint1

	return ContentHint{
		ContentHint1: &contentHint1,
		Type:         typ,
	}
}

func CreateContentHintContentHint2(contentHint2 ContentHint2) ContentHint {
	typ := ContentHintUnionTypeContentHint2

	return ContentHint{
		ContentHint2: &contentHint2,
		Type:         typ,
	}
}

func CreateContentHintContentHint3(contentHint3 ContentHint3) ContentHint {
	typ := ContentHintUnionTypeContentHint3

	return ContentHint{
		ContentHint3: &contentHint3,
		Type:         typ,
	}
}

func CreateContentHintContentHint4(contentHint4 ContentHint4) ContentHint {
	typ := ContentHintUnionTypeContentHint4

	return ContentHint{
		ContentHint4: &contentHint4,
		Type:         typ,
	}
}

func CreateContentHintContentHint5(contentHint5 ContentHint5) ContentHint {
	typ := ContentHintUnionTypeContentHint5

	return ContentHint{
		ContentHint5: &contentHint5,
		Type:         typ,
	}
}

func CreateContentHintContentHint6(contentHint6 ContentHint6) ContentHint {
	typ := ContentHintUnionTypeContentHint6

	return ContentHint{
		ContentHint6: &contentHint6,
		Type:         typ,
	}
}

func CreateContentHintContentHint7(contentHint7 ContentHint7) ContentHint {
	typ := ContentHintUnionTypeContentHint7

	return ContentHint{
		ContentHint7: &contentHint7,
		Type:         typ,
	}
}

func CreateContentHintContentHint8(contentHint8 ContentHint8) ContentHint {
	typ := ContentHintUnionTypeContentHint8

	return ContentHint{
		ContentHint8: &contentHint8,
		Type:         typ,
	}
}

func CreateContentHintContentHint9(contentHint9 ContentHint9) ContentHint {
	typ := ContentHintUnionTypeContentHint9

	return ContentHint{
		ContentHint9: &contentHint9,
		Type:         typ,
	}
}

func CreateContentHintContentHint10(contentHint10 ContentHint10) ContentHint {
	typ := ContentHintUnionTypeContentHint10

	return ContentHint{
		ContentHint10: &contentHint10,
		Type:          typ,
	}
}

func CreateContentHintUpdateProjectDataCacheContentHint11(updateProjectDataCacheContentHint11 UpdateProjectDataCacheContentHint11) ContentHint {
	typ := ContentHintUnionTypeUpdateProjectDataCacheContentHint11

	return ContentHint{
		UpdateProjectDataCacheContentHint11: &updateProjectDataCacheContentHint11,
		Type:                                typ,
	}
}

func CreateContentHintUpdateProjectDataCacheContentHint12(updateProjectDataCacheContentHint12 UpdateProjectDataCacheContentHint12) ContentHint {
	typ := ContentHintUnionTypeUpdateProjectDataCacheContentHint12

	return ContentHint{
		UpdateProjectDataCacheContentHint12: &updateProjectDataCacheContentHint12,
		Type:                                typ,
	}
}

func CreateContentHintThirteen(thirteen Thirteen) ContentHint {
	typ := ContentHintUnionTypeThirteen

	return ContentHint{
		Thirteen: &thirteen,
		Type:     typ,
	}
}

func CreateContentHintFourteen(fourteen Fourteen) ContentHint {
	typ := ContentHintUnionTypeFourteen

	return ContentHint{
		Fourteen: &fourteen,
		Type:     typ,
	}
}

func CreateContentHintFifteen(fifteen Fifteen) ContentHint {
	typ := ContentHintUnionTypeFifteen

	return ContentHint{
		Fifteen: &fifteen,
		Type:    typ,
	}
}

func (u *ContentHint) UnmarshalJSON(data []byte) error {

	var contentHint7 ContentHint7 = ContentHint7{}
	if err := utils.UnmarshalJSON(data, &contentHint7, "", true, true); err == nil {
		u.ContentHint7 = &contentHint7
		u.Type = ContentHintUnionTypeContentHint7
		return nil
	}

	var updateProjectDataCacheContentHint11 UpdateProjectDataCacheContentHint11 = UpdateProjectDataCacheContentHint11{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHint11, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHint11 = &updateProjectDataCacheContentHint11
		u.Type = ContentHintUnionTypeUpdateProjectDataCacheContentHint11
		return nil
	}

	var contentHint3 ContentHint3 = ContentHint3{}
	if err := utils.UnmarshalJSON(data, &contentHint3, "", true, true); err == nil {
		u.ContentHint3 = &contentHint3
		u.Type = ContentHintUnionTypeContentHint3
		return nil
	}

	var contentHint4 ContentHint4 = ContentHint4{}
	if err := utils.UnmarshalJSON(data, &contentHint4, "", true, true); err == nil {
		u.ContentHint4 = &contentHint4
		u.Type = ContentHintUnionTypeContentHint4
		return nil
	}

	var contentHint5 ContentHint5 = ContentHint5{}
	if err := utils.UnmarshalJSON(data, &contentHint5, "", true, true); err == nil {
		u.ContentHint5 = &contentHint5
		u.Type = ContentHintUnionTypeContentHint5
		return nil
	}

	var contentHint6 ContentHint6 = ContentHint6{}
	if err := utils.UnmarshalJSON(data, &contentHint6, "", true, true); err == nil {
		u.ContentHint6 = &contentHint6
		u.Type = ContentHintUnionTypeContentHint6
		return nil
	}

	var contentHint2 ContentHint2 = ContentHint2{}
	if err := utils.UnmarshalJSON(data, &contentHint2, "", true, true); err == nil {
		u.ContentHint2 = &contentHint2
		u.Type = ContentHintUnionTypeContentHint2
		return nil
	}

	var contentHint9 ContentHint9 = ContentHint9{}
	if err := utils.UnmarshalJSON(data, &contentHint9, "", true, true); err == nil {
		u.ContentHint9 = &contentHint9
		u.Type = ContentHintUnionTypeContentHint9
		return nil
	}

	var contentHint1 ContentHint1 = ContentHint1{}
	if err := utils.UnmarshalJSON(data, &contentHint1, "", true, true); err == nil {
		u.ContentHint1 = &contentHint1
		u.Type = ContentHintUnionTypeContentHint1
		return nil
	}

	var contentHint10 ContentHint10 = ContentHint10{}
	if err := utils.UnmarshalJSON(data, &contentHint10, "", true, true); err == nil {
		u.ContentHint10 = &contentHint10
		u.Type = ContentHintUnionTypeContentHint10
		return nil
	}

	var contentHint8 ContentHint8 = ContentHint8{}
	if err := utils.UnmarshalJSON(data, &contentHint8, "", true, true); err == nil {
		u.ContentHint8 = &contentHint8
		u.Type = ContentHintUnionTypeContentHint8
		return nil
	}

	var updateProjectDataCacheContentHint12 UpdateProjectDataCacheContentHint12 = UpdateProjectDataCacheContentHint12{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHint12, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHint12 = &updateProjectDataCacheContentHint12
		u.Type = ContentHintUnionTypeUpdateProjectDataCacheContentHint12
		return nil
	}

	var thirteen Thirteen = Thirteen{}
	if err := utils.UnmarshalJSON(data, &thirteen, "", true, true); err == nil {
		u.Thirteen = &thirteen
		u.Type = ContentHintUnionTypeThirteen
		return nil
	}

	var fifteen Fifteen = Fifteen{}
	if err := utils.UnmarshalJSON(data, &fifteen, "", true, true); err == nil {
		u.Fifteen = &fifteen
		u.Type = ContentHintUnionTypeFifteen
		return nil
	}

	var fourteen Fourteen = Fourteen{}
	if err := utils.UnmarshalJSON(data, &fourteen, "", true, true); err == nil {
		u.Fourteen = &fourteen
		u.Type = ContentHintUnionTypeFourteen
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ContentHint", string(data))
}

func (u ContentHint) MarshalJSON() ([]byte, error) {
	if u.ContentHint1 != nil {
		return utils.MarshalJSON(u.ContentHint1, "", true)
	}

	if u.ContentHint2 != nil {
		return utils.MarshalJSON(u.ContentHint2, "", true)
	}

	if u.ContentHint3 != nil {
		return utils.MarshalJSON(u.ContentHint3, "", true)
	}

	if u.ContentHint4 != nil {
		return utils.MarshalJSON(u.ContentHint4, "", true)
	}

	if u.ContentHint5 != nil {
		return utils.MarshalJSON(u.ContentHint5, "", true)
	}

	if u.ContentHint6 != nil {
		return utils.MarshalJSON(u.ContentHint6, "", true)
	}

	if u.ContentHint7 != nil {
		return utils.MarshalJSON(u.ContentHint7, "", true)
	}

	if u.ContentHint8 != nil {
		return utils.MarshalJSON(u.ContentHint8, "", true)
	}

	if u.ContentHint9 != nil {
		return utils.MarshalJSON(u.ContentHint9, "", true)
	}

	if u.ContentHint10 != nil {
		return utils.MarshalJSON(u.ContentHint10, "", true)
	}

	if u.UpdateProjectDataCacheContentHint11 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHint11, "", true)
	}

	if u.UpdateProjectDataCacheContentHint12 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHint12, "", true)
	}

	if u.Thirteen != nil {
		return utils.MarshalJSON(u.Thirteen, "", true)
	}

	if u.Fourteen != nil {
		return utils.MarshalJSON(u.Fourteen, "", true)
	}

	if u.Fifteen != nil {
		return utils.MarshalJSON(u.Fifteen, "", true)
	}

	return nil, errors.New("could not marshal union type ContentHint: all fields are null")
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTypeFlagsSecret UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType = "flags-secret"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

// InternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type InternalContentHint struct {
	Type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *InternalContentHint) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *InternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type Env struct {
	Target *UpdateProjectDataCacheTarget                 `json:"target,omitempty"`
	Type   UpdateProjectDataCacheProjectsResponse200Type `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string      `json:"sunsetSecretId,omitempty"`
	ID                *string      `json:"id,omitempty"`
	Key               string       `json:"key"`
	Value             string       `json:"value"`
	ConfigurationID   *string      `json:"configurationId,omitempty"`
	CreatedAt         *float64     `json:"createdAt,omitempty"`
	UpdatedAt         *float64     `json:"updatedAt,omitempty"`
	CreatedBy         *string      `json:"createdBy,omitempty"`
	UpdatedBy         *string      `json:"updatedBy,omitempty"`
	GitBranch         *string      `json:"gitBranch,omitempty"`
	EdgeConfigID      *string      `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string      `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *ContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *InternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` and `vsmValue` are decrypted.
	Decrypted            *bool    `json:"decrypted,omitempty"`
	Comment              *string  `json:"comment,omitempty"`
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	VsmValue             *string  `json:"vsmValue,omitempty"`
}

func (o *Env) GetTarget() *UpdateProjectDataCacheTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Env) GetType() UpdateProjectDataCacheProjectsResponse200Type {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200Type("")
	}
	return o.Type
}

func (o *Env) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *Env) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Env) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Env) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Env) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *Env) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Env) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Env) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Env) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Env) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Env) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *Env) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *Env) GetContentHint() *ContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *Env) GetInternalContentHint() *InternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *Env) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Env) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Env) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *Env) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

type CustomEnvironments struct {
}

type UpdateProjectDataCacheFramework string

const (
	UpdateProjectDataCacheFrameworkBlitzjs        UpdateProjectDataCacheFramework = "blitzjs"
	UpdateProjectDataCacheFrameworkNextjs         UpdateProjectDataCacheFramework = "nextjs"
	UpdateProjectDataCacheFrameworkGatsby         UpdateProjectDataCacheFramework = "gatsby"
	UpdateProjectDataCacheFrameworkRemix          UpdateProjectDataCacheFramework = "remix"
	UpdateProjectDataCacheFrameworkReactRouter    UpdateProjectDataCacheFramework = "react-router"
	UpdateProjectDataCacheFrameworkAstro          UpdateProjectDataCacheFramework = "astro"
	UpdateProjectDataCacheFrameworkHexo           UpdateProjectDataCacheFramework = "hexo"
	UpdateProjectDataCacheFrameworkEleventy       UpdateProjectDataCacheFramework = "eleventy"
	UpdateProjectDataCacheFrameworkDocusaurus2    UpdateProjectDataCacheFramework = "docusaurus-2"
	UpdateProjectDataCacheFrameworkDocusaurus     UpdateProjectDataCacheFramework = "docusaurus"
	UpdateProjectDataCacheFrameworkPreact         UpdateProjectDataCacheFramework = "preact"
	UpdateProjectDataCacheFrameworkSolidstart1    UpdateProjectDataCacheFramework = "solidstart-1"
	UpdateProjectDataCacheFrameworkSolidstart     UpdateProjectDataCacheFramework = "solidstart"
	UpdateProjectDataCacheFrameworkDojo           UpdateProjectDataCacheFramework = "dojo"
	UpdateProjectDataCacheFrameworkEmber          UpdateProjectDataCacheFramework = "ember"
	UpdateProjectDataCacheFrameworkVue            UpdateProjectDataCacheFramework = "vue"
	UpdateProjectDataCacheFrameworkScully         UpdateProjectDataCacheFramework = "scully"
	UpdateProjectDataCacheFrameworkIonicAngular   UpdateProjectDataCacheFramework = "ionic-angular"
	UpdateProjectDataCacheFrameworkAngular        UpdateProjectDataCacheFramework = "angular"
	UpdateProjectDataCacheFrameworkPolymer        UpdateProjectDataCacheFramework = "polymer"
	UpdateProjectDataCacheFrameworkSvelte         UpdateProjectDataCacheFramework = "svelte"
	UpdateProjectDataCacheFrameworkSveltekit      UpdateProjectDataCacheFramework = "sveltekit"
	UpdateProjectDataCacheFrameworkSveltekit1     UpdateProjectDataCacheFramework = "sveltekit-1"
	UpdateProjectDataCacheFrameworkIonicReact     UpdateProjectDataCacheFramework = "ionic-react"
	UpdateProjectDataCacheFrameworkCreateReactApp UpdateProjectDataCacheFramework = "create-react-app"
	UpdateProjectDataCacheFrameworkGridsome       UpdateProjectDataCacheFramework = "gridsome"
	UpdateProjectDataCacheFrameworkUmijs          UpdateProjectDataCacheFramework = "umijs"
	UpdateProjectDataCacheFrameworkSapper         UpdateProjectDataCacheFramework = "sapper"
	UpdateProjectDataCacheFrameworkSaber          UpdateProjectDataCacheFramework = "saber"
	UpdateProjectDataCacheFrameworkStencil        UpdateProjectDataCacheFramework = "stencil"
	UpdateProjectDataCacheFrameworkNuxtjs         UpdateProjectDataCacheFramework = "nuxtjs"
	UpdateProjectDataCacheFrameworkRedwoodjs      UpdateProjectDataCacheFramework = "redwoodjs"
	UpdateProjectDataCacheFrameworkHugo           UpdateProjectDataCacheFramework = "hugo"
	UpdateProjectDataCacheFrameworkJekyll         UpdateProjectDataCacheFramework = "jekyll"
	UpdateProjectDataCacheFrameworkBrunch         UpdateProjectDataCacheFramework = "brunch"
	UpdateProjectDataCacheFrameworkMiddleman      UpdateProjectDataCacheFramework = "middleman"
	UpdateProjectDataCacheFrameworkZola           UpdateProjectDataCacheFramework = "zola"
	UpdateProjectDataCacheFrameworkHydrogen       UpdateProjectDataCacheFramework = "hydrogen"
	UpdateProjectDataCacheFrameworkVite           UpdateProjectDataCacheFramework = "vite"
	UpdateProjectDataCacheFrameworkVitepress      UpdateProjectDataCacheFramework = "vitepress"
	UpdateProjectDataCacheFrameworkVuepress       UpdateProjectDataCacheFramework = "vuepress"
	UpdateProjectDataCacheFrameworkParcel         UpdateProjectDataCacheFramework = "parcel"
	UpdateProjectDataCacheFrameworkFasthtml       UpdateProjectDataCacheFramework = "fasthtml"
	UpdateProjectDataCacheFrameworkSanityV3       UpdateProjectDataCacheFramework = "sanity-v3"
	UpdateProjectDataCacheFrameworkSanity         UpdateProjectDataCacheFramework = "sanity"
	UpdateProjectDataCacheFrameworkStorybook      UpdateProjectDataCacheFramework = "storybook"
)

func (e UpdateProjectDataCacheFramework) ToPointer() *UpdateProjectDataCacheFramework {
	return &e
}
func (e *UpdateProjectDataCacheFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectDataCacheFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheFramework: %v", v)
	}
}

type IPBuckets struct {
	Bucket       string   `json:"bucket"`
	SupportUntil *float64 `json:"supportUntil,omitempty"`
}

func (o *IPBuckets) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *IPBuckets) GetSupportUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.SupportUntil
}

type AliasAssignedType string

const (
	AliasAssignedTypeNumber  AliasAssignedType = "number"
	AliasAssignedTypeBoolean AliasAssignedType = "boolean"
)

type AliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type AliasAssignedType
}

func CreateAliasAssignedNumber(number float64) AliasAssigned {
	typ := AliasAssignedTypeNumber

	return AliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateAliasAssignedBoolean(boolean bool) AliasAssigned {
	typ := AliasAssignedTypeBoolean

	return AliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *AliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = AliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = AliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AliasAssigned", string(data))
}

func (u AliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type AliasAssigned: all fields are null")
}

type UpdateProjectDataCacheProjectsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectDataCacheProjectsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectDataCacheProjectsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONTypeEndsWith   UpdateProjectDataCacheProjectsResponse200ApplicationJSONType = "endsWith"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONTypeStartsWith UpdateProjectDataCacheProjectsResponse200ApplicationJSONType = "startsWith"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONTypeEquals     UpdateProjectDataCacheProjectsResponse200ApplicationJSONType = "equals"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type UpdateProjectDataCacheProjectsBranchMatcher struct {
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONType `json:"type"`
	Pattern string                                                       `json:"pattern"`
}

func (o *UpdateProjectDataCacheProjectsBranchMatcher) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheProjectsBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type UpdateProjectDataCacheProjectsBuilds struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *UpdateProjectDataCacheProjectsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *UpdateProjectDataCacheProjectsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectDataCacheProjectsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type UpdateProjectDataCacheProjectsChecksConclusion string

const (
	UpdateProjectDataCacheProjectsChecksConclusionSucceeded UpdateProjectDataCacheProjectsChecksConclusion = "succeeded"
	UpdateProjectDataCacheProjectsChecksConclusionFailed    UpdateProjectDataCacheProjectsChecksConclusion = "failed"
	UpdateProjectDataCacheProjectsChecksConclusionSkipped   UpdateProjectDataCacheProjectsChecksConclusion = "skipped"
	UpdateProjectDataCacheProjectsChecksConclusionCanceled  UpdateProjectDataCacheProjectsChecksConclusion = "canceled"
)

func (e UpdateProjectDataCacheProjectsChecksConclusion) ToPointer() *UpdateProjectDataCacheProjectsChecksConclusion {
	return &e
}
func (e *UpdateProjectDataCacheProjectsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectDataCacheProjectsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsChecksConclusion: %v", v)
	}
}

type UpdateProjectDataCacheProjectsChecksState string

const (
	UpdateProjectDataCacheProjectsChecksStateRegistered UpdateProjectDataCacheProjectsChecksState = "registered"
	UpdateProjectDataCacheProjectsChecksStateRunning    UpdateProjectDataCacheProjectsChecksState = "running"
	UpdateProjectDataCacheProjectsChecksStateCompleted  UpdateProjectDataCacheProjectsChecksState = "completed"
)

func (e UpdateProjectDataCacheProjectsChecksState) ToPointer() *UpdateProjectDataCacheProjectsChecksState {
	return &e
}
func (e *UpdateProjectDataCacheProjectsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectDataCacheProjectsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsChecksState: %v", v)
	}
}

type UpdateProjectDataCacheProjectsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectDataCacheProjectsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectDataCacheProjectsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectDataCacheProjectsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectDataCacheProjectsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectDataCacheProjectsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectDataCacheProjectsOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *UpdateProjectDataCacheProjectsOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *UpdateProjectDataCacheProjectsOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *UpdateProjectDataCacheProjectsOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *UpdateProjectDataCacheProjectsOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *UpdateProjectDataCacheProjectsOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *UpdateProjectDataCacheProjectsOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *UpdateProjectDataCacheProjectsOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *UpdateProjectDataCacheProjectsOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCacheProjectsOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type UpdateProjectDataCacheProjectsPlan string

const (
	UpdateProjectDataCacheProjectsPlanPro        UpdateProjectDataCacheProjectsPlan = "pro"
	UpdateProjectDataCacheProjectsPlanEnterprise UpdateProjectDataCacheProjectsPlan = "enterprise"
	UpdateProjectDataCacheProjectsPlanHobby      UpdateProjectDataCacheProjectsPlan = "hobby"
)

func (e UpdateProjectDataCacheProjectsPlan) ToPointer() *UpdateProjectDataCacheProjectsPlan {
	return &e
}
func (e *UpdateProjectDataCacheProjectsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = UpdateProjectDataCacheProjectsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsPlan: %v", v)
	}
}

type UpdateProjectDataCacheProjectsReadyState string

const (
	UpdateProjectDataCacheProjectsReadyStateBuilding     UpdateProjectDataCacheProjectsReadyState = "BUILDING"
	UpdateProjectDataCacheProjectsReadyStateError        UpdateProjectDataCacheProjectsReadyState = "ERROR"
	UpdateProjectDataCacheProjectsReadyStateInitializing UpdateProjectDataCacheProjectsReadyState = "INITIALIZING"
	UpdateProjectDataCacheProjectsReadyStateQueued       UpdateProjectDataCacheProjectsReadyState = "QUEUED"
	UpdateProjectDataCacheProjectsReadyStateReady        UpdateProjectDataCacheProjectsReadyState = "READY"
	UpdateProjectDataCacheProjectsReadyStateCanceled     UpdateProjectDataCacheProjectsReadyState = "CANCELED"
)

func (e UpdateProjectDataCacheProjectsReadyState) ToPointer() *UpdateProjectDataCacheProjectsReadyState {
	return &e
}
func (e *UpdateProjectDataCacheProjectsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectDataCacheProjectsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsReadyState: %v", v)
	}
}

type UpdateProjectDataCacheProjectsReadySubstate string

const (
	UpdateProjectDataCacheProjectsReadySubstateStaged   UpdateProjectDataCacheProjectsReadySubstate = "STAGED"
	UpdateProjectDataCacheProjectsReadySubstatePromoted UpdateProjectDataCacheProjectsReadySubstate = "PROMOTED"
)

func (e UpdateProjectDataCacheProjectsReadySubstate) ToPointer() *UpdateProjectDataCacheProjectsReadySubstate {
	return &e
}
func (e *UpdateProjectDataCacheProjectsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectDataCacheProjectsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsReadySubstate: %v", v)
	}
}

type UpdateProjectDataCacheType string

const (
	UpdateProjectDataCacheTypeLambdas UpdateProjectDataCacheType = "LAMBDAS"
)

func (e UpdateProjectDataCacheType) ToPointer() *UpdateProjectDataCacheType {
	return &e
}
func (e *UpdateProjectDataCacheType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectDataCacheType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheType: %v", v)
	}
}

type LatestDeployments struct {
	ID                     string                                          `json:"id"`
	Alias                  []string                                        `json:"alias,omitempty"`
	AliasAssigned          *AliasAssigned                                  `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectDataCacheProjectsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                         `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                        `json:"automaticAliases,omitempty"`
	BranchMatcher          *UpdateProjectDataCacheProjectsBranchMatcher    `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                                        `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectDataCacheProjectsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectDataCacheProjectsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectDataCacheProjectsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                           `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                         `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                                         `json:"createdAt"`
	CreatedIn              string                                          `json:"createdIn"`
	Creator                *UpdateProjectDataCacheProjectsCreator          `json:"creator"`
	DeletedAt              *float64                                        `json:"deletedAt,omitempty"`
	DeploymentHostname     string                                          `json:"deploymentHostname"`
	Forced                 *bool                                           `json:"forced,omitempty"`
	Name                   string                                          `json:"name"`
	Meta                   map[string]string                               `json:"meta,omitempty"`
	MonorepoManager        *string                                         `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *UpdateProjectDataCacheProjectsOidcTokenClaims  `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectDataCacheProjectsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                        `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                         `json:"private"`
	ReadyAt                *float64                                     `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectDataCacheProjectsReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectDataCacheProjectsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                                     `json:"requestedAt,omitempty"`
	Target                 *string                                      `json:"target,omitempty"`
	TeamID                 *string                                      `json:"teamId,omitempty"`
	Type                   UpdateProjectDataCacheType                   `json:"type"`
	URL                    string                                       `json:"url"`
	UserID                 string                                       `json:"userId"`
	WithCache              *bool                                        `json:"withCache,omitempty"`
}

func (o *LatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *LatestDeployments) GetAliasAssigned() *AliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *LatestDeployments) GetAliasError() *UpdateProjectDataCacheProjectsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *LatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *LatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *LatestDeployments) GetBranchMatcher() *UpdateProjectDataCacheProjectsBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *LatestDeployments) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *LatestDeployments) GetBuilds() []UpdateProjectDataCacheProjectsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *LatestDeployments) GetChecksConclusion() *UpdateProjectDataCacheProjectsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *LatestDeployments) GetChecksState() *UpdateProjectDataCacheProjectsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *LatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *LatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *LatestDeployments) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *LatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *LatestDeployments) GetCreator() *UpdateProjectDataCacheProjectsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *LatestDeployments) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *LatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *LatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *LatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *LatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *LatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *LatestDeployments) GetOidcTokenClaims() *UpdateProjectDataCacheProjectsOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *LatestDeployments) GetPlan() UpdateProjectDataCacheProjectsPlan {
	if o == nil {
		return UpdateProjectDataCacheProjectsPlan("")
	}
	return o.Plan
}

func (o *LatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *LatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *LatestDeployments) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *LatestDeployments) GetReadyState() UpdateProjectDataCacheProjectsReadyState {
	if o == nil {
		return UpdateProjectDataCacheProjectsReadyState("")
	}
	return o.ReadyState
}

func (o *LatestDeployments) GetReadySubstate() *UpdateProjectDataCacheProjectsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *LatestDeployments) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *LatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *LatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *LatestDeployments) GetType() UpdateProjectDataCacheType {
	if o == nil {
		return UpdateProjectDataCacheType("")
	}
	return o.Type
}

func (o *LatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *LatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *LatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectDataCacheLinkProjectsType string

const (
	UpdateProjectDataCacheLinkProjectsTypeBitbucket UpdateProjectDataCacheLinkProjectsType = "bitbucket"
)

func (e UpdateProjectDataCacheLinkProjectsType) ToPointer() *UpdateProjectDataCacheLinkProjectsType {
	return &e
}
func (e *UpdateProjectDataCacheLinkProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = UpdateProjectDataCacheLinkProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheLinkProjectsType: %v", v)
	}
}

type UpdateProjectDataCacheLinkDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDataCacheLinkDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheLinkDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheLinkDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheLinkDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCacheLinkDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type Link3 struct {
	Name             *string                                 `json:"name,omitempty"`
	Slug             *string                                 `json:"slug,omitempty"`
	Owner            *string                                 `json:"owner,omitempty"`
	Type             *UpdateProjectDataCacheLinkProjectsType `json:"type,omitempty"`
	UUID             *string                                 `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                 `json:"workspaceUuid,omitempty"`
	CreatedAt        *float64                                `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCacheLinkDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                 `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                                `json:"updatedAt,omitempty"`
	Sourceless       *bool                                   `json:"sourceless,omitempty"`
	ProductionBranch *string                                 `json:"productionBranch,omitempty"`
}

func (o *Link3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Link3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *Link3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *Link3) GetType() *UpdateProjectDataCacheLinkProjectsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Link3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *Link3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *Link3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Link3) GetDeployHooks() []UpdateProjectDataCacheLinkDeployHooks {
	if o == nil {
		return []UpdateProjectDataCacheLinkDeployHooks{}
	}
	return o.DeployHooks
}

func (o *Link3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *Link3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Link3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *Link3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectDataCacheLinkType string

const (
	UpdateProjectDataCacheLinkTypeGitlab UpdateProjectDataCacheLinkType = "gitlab"
)

func (e UpdateProjectDataCacheLinkType) ToPointer() *UpdateProjectDataCacheLinkType {
	return &e
}
func (e *UpdateProjectDataCacheLinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = UpdateProjectDataCacheLinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheLinkType: %v", v)
	}
}

type LinkDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *LinkDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *LinkDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *LinkDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *LinkDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *LinkDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type Link2 struct {
	ProjectID                *string `json:"projectId,omitempty"`
	ProjectName              *string `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string `json:"projectNamespace,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
	ProjectOwnerID   *float64                        `json:"projectOwnerId,omitempty"`
	ProjectURL       *string                         `json:"projectUrl,omitempty"`
	Type             *UpdateProjectDataCacheLinkType `json:"type,omitempty"`
	CreatedAt        *float64                        `json:"createdAt,omitempty"`
	DeployHooks      []LinkDeployHooks               `json:"deployHooks"`
	GitCredentialID  *string                         `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                        `json:"updatedAt,omitempty"`
	Sourceless       *bool                           `json:"sourceless,omitempty"`
	ProductionBranch *string                         `json:"productionBranch,omitempty"`
}

func (o *Link2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Link2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *Link2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *Link2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *Link2) GetProjectOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.ProjectOwnerID
}

func (o *Link2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *Link2) GetType() *UpdateProjectDataCacheLinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Link2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Link2) GetDeployHooks() []LinkDeployHooks {
	if o == nil {
		return []LinkDeployHooks{}
	}
	return o.DeployHooks
}

func (o *Link2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *Link2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Link2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *Link2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type LinkType string

const (
	LinkTypeGithub LinkType = "github"
)

func (e LinkType) ToPointer() *LinkType {
	return &e
}
func (e *LinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = LinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LinkType: %v", v)
	}
}

type DeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *DeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *DeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *DeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type Link1 struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64      `json:"repoOwnerId,omitempty"`
	Repo             *string       `json:"repo,omitempty"`
	RepoID           *float64      `json:"repoId,omitempty"`
	Type             *LinkType     `json:"type,omitempty"`
	CreatedAt        *float64      `json:"createdAt,omitempty"`
	DeployHooks      []DeployHooks `json:"deployHooks"`
	GitCredentialID  *string       `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64      `json:"updatedAt,omitempty"`
	Sourceless       *bool         `json:"sourceless,omitempty"`
	ProductionBranch *string       `json:"productionBranch,omitempty"`
}

func (o *Link1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *Link1) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *Link1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *Link1) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *Link1) GetType() *LinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Link1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Link1) GetDeployHooks() []DeployHooks {
	if o == nil {
		return []DeployHooks{}
	}
	return o.DeployHooks
}

func (o *Link1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *Link1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Link1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *Link1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type LinkUnionType string

const (
	LinkUnionTypeLink1 LinkUnionType = "link_1"
	LinkUnionTypeLink2 LinkUnionType = "link_2"
	LinkUnionTypeLink3 LinkUnionType = "link_3"
)

type Link struct {
	Link1 *Link1
	Link2 *Link2
	Link3 *Link3

	Type LinkUnionType
}

func CreateLinkLink1(link1 Link1) Link {
	typ := LinkUnionTypeLink1

	return Link{
		Link1: &link1,
		Type:  typ,
	}
}

func CreateLinkLink2(link2 Link2) Link {
	typ := LinkUnionTypeLink2

	return Link{
		Link2: &link2,
		Type:  typ,
	}
}

func CreateLinkLink3(link3 Link3) Link {
	typ := LinkUnionTypeLink3

	return Link{
		Link3: &link3,
		Type:  typ,
	}
}

func (u *Link) UnmarshalJSON(data []byte) error {

	var link1 Link1 = Link1{}
	if err := utils.UnmarshalJSON(data, &link1, "", true, true); err == nil {
		u.Link1 = &link1
		u.Type = LinkUnionTypeLink1
		return nil
	}

	var link3 Link3 = Link3{}
	if err := utils.UnmarshalJSON(data, &link3, "", true, true); err == nil {
		u.Link3 = &link3
		u.Type = LinkUnionTypeLink3
		return nil
	}

	var link2 Link2 = Link2{}
	if err := utils.UnmarshalJSON(data, &link2, "", true, true); err == nil {
		u.Link2 = &link2
		u.Type = LinkUnionTypeLink2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Link", string(data))
}

func (u Link) MarshalJSON() ([]byte, error) {
	if u.Link1 != nil {
		return utils.MarshalJSON(u.Link1, "", true)
	}

	if u.Link2 != nil {
		return utils.MarshalJSON(u.Link2, "", true)
	}

	if u.Link3 != nil {
		return utils.MarshalJSON(u.Link3, "", true)
	}

	return nil, errors.New("could not marshal union type Link: all fields are null")
}

type Microfrontends2 struct {
	UpdatedAt float64 `json:"updatedAt"`
	GroupIds  []any   `json:"groupIds"`
	Enabled   bool    `json:"enabled"`
}

func (o *Microfrontends2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *Microfrontends2) GetGroupIds() []any {
	if o == nil {
		return []any{}
	}
	return o.GroupIds
}

func (o *Microfrontends2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type Microfrontends1 struct {
	// Timestamp when the microfrontends settings were last updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether microfrontends are enabled for this project.
	Enabled bool `json:"enabled"`
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// Whether observability data should be routed to this microfrontend project or a root project.
	RouteObservabilityToThisProject *bool `json:"routeObservabilityToThisProject,omitempty"`
}

func (o *Microfrontends1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *Microfrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *Microfrontends1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Microfrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *Microfrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *Microfrontends1) GetRouteObservabilityToThisProject() *bool {
	if o == nil {
		return nil
	}
	return o.RouteObservabilityToThisProject
}

type MicrofrontendsType string

const (
	MicrofrontendsTypeMicrofrontends1 MicrofrontendsType = "microfrontends_1"
	MicrofrontendsTypeMicrofrontends2 MicrofrontendsType = "microfrontends_2"
)

type Microfrontends struct {
	Microfrontends1 *Microfrontends1
	Microfrontends2 *Microfrontends2

	Type MicrofrontendsType
}

func CreateMicrofrontendsMicrofrontends1(microfrontends1 Microfrontends1) Microfrontends {
	typ := MicrofrontendsTypeMicrofrontends1

	return Microfrontends{
		Microfrontends1: &microfrontends1,
		Type:            typ,
	}
}

func CreateMicrofrontendsMicrofrontends2(microfrontends2 Microfrontends2) Microfrontends {
	typ := MicrofrontendsTypeMicrofrontends2

	return Microfrontends{
		Microfrontends2: &microfrontends2,
		Type:            typ,
	}
}

func (u *Microfrontends) UnmarshalJSON(data []byte) error {

	var microfrontends2 Microfrontends2 = Microfrontends2{}
	if err := utils.UnmarshalJSON(data, &microfrontends2, "", true, true); err == nil {
		u.Microfrontends2 = &microfrontends2
		u.Type = MicrofrontendsTypeMicrofrontends2
		return nil
	}

	var microfrontends1 Microfrontends1 = Microfrontends1{}
	if err := utils.UnmarshalJSON(data, &microfrontends1, "", true, true); err == nil {
		u.Microfrontends1 = &microfrontends1
		u.Type = MicrofrontendsTypeMicrofrontends1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Microfrontends", string(data))
}

func (u Microfrontends) MarshalJSON() ([]byte, error) {
	if u.Microfrontends1 != nil {
		return utils.MarshalJSON(u.Microfrontends1, "", true)
	}

	if u.Microfrontends2 != nil {
		return utils.MarshalJSON(u.Microfrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type Microfrontends: all fields are null")
}

type UpdateProjectDataCacheNodeVersion string

const (
	UpdateProjectDataCacheNodeVersionTwentyTwoX UpdateProjectDataCacheNodeVersion = "22.x"
	UpdateProjectDataCacheNodeVersionTwentyX    UpdateProjectDataCacheNodeVersion = "20.x"
	UpdateProjectDataCacheNodeVersionEighteenX  UpdateProjectDataCacheNodeVersion = "18.x"
	UpdateProjectDataCacheNodeVersionSixteenX   UpdateProjectDataCacheNodeVersion = "16.x"
	UpdateProjectDataCacheNodeVersionFourteenX  UpdateProjectDataCacheNodeVersion = "14.x"
	UpdateProjectDataCacheNodeVersionTwelveX    UpdateProjectDataCacheNodeVersion = "12.x"
	UpdateProjectDataCacheNodeVersionTenX       UpdateProjectDataCacheNodeVersion = "10.x"
	UpdateProjectDataCacheNodeVersionEight10X   UpdateProjectDataCacheNodeVersion = "8.10.x"
)

func (e UpdateProjectDataCacheNodeVersion) ToPointer() *UpdateProjectDataCacheNodeVersion {
	return &e
}
func (e *UpdateProjectDataCacheNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = UpdateProjectDataCacheNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheNodeVersion: %v", v)
	}
}

type UpdateProjectDataCachePaths struct {
	Value string `json:"value"`
}

func (o *UpdateProjectDataCachePaths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectDataCacheOptionsAllowlist struct {
	Paths []UpdateProjectDataCachePaths `json:"paths"`
}

func (o *UpdateProjectDataCacheOptionsAllowlist) GetPaths() []UpdateProjectDataCachePaths {
	if o == nil {
		return []UpdateProjectDataCachePaths{}
	}
	return o.Paths
}

type UpdateProjectDataCachePasswordProtection struct {
}

type FunctionDefaultMemoryType string

const (
	FunctionDefaultMemoryTypeStandardLegacy FunctionDefaultMemoryType = "standard_legacy"
	FunctionDefaultMemoryTypeStandard       FunctionDefaultMemoryType = "standard"
	FunctionDefaultMemoryTypePerformance    FunctionDefaultMemoryType = "performance"
)

func (e FunctionDefaultMemoryType) ToPointer() *FunctionDefaultMemoryType {
	return &e
}
func (e *FunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = FunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FunctionDefaultMemoryType: %v", v)
	}
}

type ResourceConfig struct {
	Fluid                      *bool                      `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                   `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                   `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *FunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                      `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                      `json:"elasticConcurrencyEnabled,omitempty"`
}

func (o *ResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *ResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *ResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *ResourceConfig) GetFunctionDefaultMemoryType() *FunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *ResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *ResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

// Stages - An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
type Stages struct {
	// The percentage of traffic to serve to the new deployment
	TargetPercentage float64 `json:"targetPercentage"`
}

func (o *Stages) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

type RollingRelease struct {
	// The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
	Target string `json:"target"`
	// minutesToRelease is the total time to gradually shift percentages. This value overrides stages and instead creates a single smooth 0-100 stage. So once we have fetched the document with the start time, subtract from the current time, and divide by total minutesToRelease, to determine what percentage of traffic the new deployment should be serving. There is no approval required, and for the case of Vercel, it would just slowly shift traffic 0 to 100%.
	MinutesToRelease *float64 `json:"minutesToRelease,omitempty"`
	// An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
	Stages []Stages `json:"stages,omitempty"`
}

func (o *RollingRelease) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *RollingRelease) GetMinutesToRelease() *float64 {
	if o == nil {
		return nil
	}
	return o.MinutesToRelease
}

func (o *RollingRelease) GetStages() []Stages {
	if o == nil {
		return nil
	}
	return o.Stages
}

type UpdateProjectDataCacheFunctionDefaultMemoryType string

const (
	UpdateProjectDataCacheFunctionDefaultMemoryTypeStandardLegacy UpdateProjectDataCacheFunctionDefaultMemoryType = "standard_legacy"
	UpdateProjectDataCacheFunctionDefaultMemoryTypeStandard       UpdateProjectDataCacheFunctionDefaultMemoryType = "standard"
	UpdateProjectDataCacheFunctionDefaultMemoryTypePerformance    UpdateProjectDataCacheFunctionDefaultMemoryType = "performance"
)

func (e UpdateProjectDataCacheFunctionDefaultMemoryType) ToPointer() *UpdateProjectDataCacheFunctionDefaultMemoryType {
	return &e
}
func (e *UpdateProjectDataCacheFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = UpdateProjectDataCacheFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheFunctionDefaultMemoryType: %v", v)
	}
}

type DefaultResourceConfig struct {
	Fluid                      *bool                                            `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                         `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                         `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *UpdateProjectDataCacheFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                            `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                            `json:"elasticConcurrencyEnabled,omitempty"`
}

func (o *DefaultResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *DefaultResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *DefaultResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *DefaultResourceConfig) GetFunctionDefaultMemoryType() *UpdateProjectDataCacheFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *DefaultResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *DefaultResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

type UpdateProjectDataCacheDeploymentType string

const (
	UpdateProjectDataCacheDeploymentTypePreview                          UpdateProjectDataCacheDeploymentType = "preview"
	UpdateProjectDataCacheDeploymentTypeAll                              UpdateProjectDataCacheDeploymentType = "all"
	UpdateProjectDataCacheDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectDataCacheDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectDataCacheDeploymentType) ToPointer() *UpdateProjectDataCacheDeploymentType {
	return &e
}
func (e *UpdateProjectDataCacheDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectDataCacheDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheDeploymentType: %v", v)
	}
}

type UpdateProjectDataCacheSsoProtection struct {
	DeploymentType UpdateProjectDataCacheDeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectDataCacheSsoProtection) GetDeploymentType() UpdateProjectDataCacheDeploymentType {
	if o == nil {
		return UpdateProjectDataCacheDeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectDataCacheAliasAssignedType string

const (
	UpdateProjectDataCacheAliasAssignedTypeNumber  UpdateProjectDataCacheAliasAssignedType = "number"
	UpdateProjectDataCacheAliasAssignedTypeBoolean UpdateProjectDataCacheAliasAssignedType = "boolean"
)

type UpdateProjectDataCacheAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type UpdateProjectDataCacheAliasAssignedType
}

func CreateUpdateProjectDataCacheAliasAssignedNumber(number float64) UpdateProjectDataCacheAliasAssigned {
	typ := UpdateProjectDataCacheAliasAssignedTypeNumber

	return UpdateProjectDataCacheAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateUpdateProjectDataCacheAliasAssignedBoolean(boolean bool) UpdateProjectDataCacheAliasAssigned {
	typ := UpdateProjectDataCacheAliasAssignedTypeBoolean

	return UpdateProjectDataCacheAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectDataCacheAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateProjectDataCacheAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UpdateProjectDataCacheAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheAliasAssigned", string(data))
}

func (u UpdateProjectDataCacheAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheAliasAssigned: all fields are null")
}

type UpdateProjectDataCacheAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectDataCacheAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectDataCacheAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsTypeEndsWith   UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType = "endsWith"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsTypeStartsWith UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType = "startsWith"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsTypeEquals     UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType = "equals"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType: %v", v)
	}
}

type UpdateProjectDataCacheBranchMatcher struct {
	Type    UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType `json:"type"`
	Pattern string                                                                          `json:"pattern"`
}

func (o *UpdateProjectDataCacheBranchMatcher) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyTargetsType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type UpdateProjectDataCacheBuilds struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *UpdateProjectDataCacheBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *UpdateProjectDataCacheBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectDataCacheBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type UpdateProjectDataCacheChecksConclusion string

const (
	UpdateProjectDataCacheChecksConclusionSucceeded UpdateProjectDataCacheChecksConclusion = "succeeded"
	UpdateProjectDataCacheChecksConclusionFailed    UpdateProjectDataCacheChecksConclusion = "failed"
	UpdateProjectDataCacheChecksConclusionSkipped   UpdateProjectDataCacheChecksConclusion = "skipped"
	UpdateProjectDataCacheChecksConclusionCanceled  UpdateProjectDataCacheChecksConclusion = "canceled"
)

func (e UpdateProjectDataCacheChecksConclusion) ToPointer() *UpdateProjectDataCacheChecksConclusion {
	return &e
}
func (e *UpdateProjectDataCacheChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectDataCacheChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheChecksConclusion: %v", v)
	}
}

type UpdateProjectDataCacheChecksState string

const (
	UpdateProjectDataCacheChecksStateRegistered UpdateProjectDataCacheChecksState = "registered"
	UpdateProjectDataCacheChecksStateRunning    UpdateProjectDataCacheChecksState = "running"
	UpdateProjectDataCacheChecksStateCompleted  UpdateProjectDataCacheChecksState = "completed"
)

func (e UpdateProjectDataCacheChecksState) ToPointer() *UpdateProjectDataCacheChecksState {
	return &e
}
func (e *UpdateProjectDataCacheChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectDataCacheChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheChecksState: %v", v)
	}
}

type UpdateProjectDataCacheCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectDataCacheCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectDataCacheCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectDataCacheCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectDataCacheCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectDataCacheCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectDataCacheOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type UpdateProjectDataCachePlan string

const (
	UpdateProjectDataCachePlanPro        UpdateProjectDataCachePlan = "pro"
	UpdateProjectDataCachePlanEnterprise UpdateProjectDataCachePlan = "enterprise"
	UpdateProjectDataCachePlanHobby      UpdateProjectDataCachePlan = "hobby"
)

func (e UpdateProjectDataCachePlan) ToPointer() *UpdateProjectDataCachePlan {
	return &e
}
func (e *UpdateProjectDataCachePlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = UpdateProjectDataCachePlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCachePlan: %v", v)
	}
}

type UpdateProjectDataCacheReadyState string

const (
	UpdateProjectDataCacheReadyStateBuilding     UpdateProjectDataCacheReadyState = "BUILDING"
	UpdateProjectDataCacheReadyStateError        UpdateProjectDataCacheReadyState = "ERROR"
	UpdateProjectDataCacheReadyStateInitializing UpdateProjectDataCacheReadyState = "INITIALIZING"
	UpdateProjectDataCacheReadyStateQueued       UpdateProjectDataCacheReadyState = "QUEUED"
	UpdateProjectDataCacheReadyStateReady        UpdateProjectDataCacheReadyState = "READY"
	UpdateProjectDataCacheReadyStateCanceled     UpdateProjectDataCacheReadyState = "CANCELED"
)

func (e UpdateProjectDataCacheReadyState) ToPointer() *UpdateProjectDataCacheReadyState {
	return &e
}
func (e *UpdateProjectDataCacheReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectDataCacheReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheReadyState: %v", v)
	}
}

type UpdateProjectDataCacheReadySubstate string

const (
	UpdateProjectDataCacheReadySubstateStaged   UpdateProjectDataCacheReadySubstate = "STAGED"
	UpdateProjectDataCacheReadySubstatePromoted UpdateProjectDataCacheReadySubstate = "PROMOTED"
)

func (e UpdateProjectDataCacheReadySubstate) ToPointer() *UpdateProjectDataCacheReadySubstate {
	return &e
}
func (e *UpdateProjectDataCacheReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectDataCacheReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheReadySubstate: %v", v)
	}
}

type UpdateProjectDataCacheProjectsType string

const (
	UpdateProjectDataCacheProjectsTypeLambdas UpdateProjectDataCacheProjectsType = "LAMBDAS"
)

func (e UpdateProjectDataCacheProjectsType) ToPointer() *UpdateProjectDataCacheProjectsType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectDataCacheProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsType: %v", v)
	}
}

type Targets struct {
	ID                     string                                  `json:"id"`
	Alias                  []string                                `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectDataCacheAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectDataCacheAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                 `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                `json:"automaticAliases,omitempty"`
	BranchMatcher          *UpdateProjectDataCacheBranchMatcher    `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                                `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectDataCacheBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectDataCacheChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectDataCacheChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                   `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                 `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                                 `json:"createdAt"`
	CreatedIn              string                                  `json:"createdIn"`
	Creator                *UpdateProjectDataCacheCreator          `json:"creator"`
	DeletedAt              *float64                                `json:"deletedAt,omitempty"`
	DeploymentHostname     string                                  `json:"deploymentHostname"`
	Forced                 *bool                                   `json:"forced,omitempty"`
	Name                   string                                  `json:"name"`
	Meta                   map[string]string                       `json:"meta,omitempty"`
	MonorepoManager        *string                                 `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *UpdateProjectDataCacheOidcTokenClaims  `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectDataCachePlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                 `json:"private"`
	ReadyAt                *float64                             `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectDataCacheReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectDataCacheReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                             `json:"requestedAt,omitempty"`
	Target                 *string                              `json:"target,omitempty"`
	TeamID                 *string                              `json:"teamId,omitempty"`
	Type                   UpdateProjectDataCacheProjectsType   `json:"type"`
	URL                    string                               `json:"url"`
	UserID                 string                               `json:"userId"`
	WithCache              *bool                                `json:"withCache,omitempty"`
}

func (o *Targets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Targets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Targets) GetAliasAssigned() *UpdateProjectDataCacheAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *Targets) GetAliasError() *UpdateProjectDataCacheAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *Targets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *Targets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *Targets) GetBranchMatcher() *UpdateProjectDataCacheBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *Targets) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *Targets) GetBuilds() []UpdateProjectDataCacheBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *Targets) GetChecksConclusion() *UpdateProjectDataCacheChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *Targets) GetChecksState() *UpdateProjectDataCacheChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *Targets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *Targets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *Targets) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *Targets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *Targets) GetCreator() *UpdateProjectDataCacheCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *Targets) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Targets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *Targets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *Targets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Targets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *Targets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *Targets) GetOidcTokenClaims() *UpdateProjectDataCacheOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *Targets) GetPlan() UpdateProjectDataCachePlan {
	if o == nil {
		return UpdateProjectDataCachePlan("")
	}
	return o.Plan
}

func (o *Targets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *Targets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *Targets) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *Targets) GetReadyState() UpdateProjectDataCacheReadyState {
	if o == nil {
		return UpdateProjectDataCacheReadyState("")
	}
	return o.ReadyState
}

func (o *Targets) GetReadySubstate() *UpdateProjectDataCacheReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *Targets) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *Targets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Targets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *Targets) GetType() UpdateProjectDataCacheProjectsType {
	if o == nil {
		return UpdateProjectDataCacheProjectsType("")
	}
	return o.Type
}

func (o *Targets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Targets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *Targets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type Permissions struct {
	User                                     []components.ACLAction `json:"user,omitempty"`
	UserConnection                           []components.ACLAction `json:"userConnection,omitempty"`
	UserSudo                                 []components.ACLAction `json:"userSudo,omitempty"`
	WebAuthn                                 []components.ACLAction `json:"webAuthn,omitempty"`
	Oauth2Connection                         []components.ACLAction `json:"oauth2Connection,omitempty"`
	AccessGroup                              []components.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []components.ACLAction `json:"aliasGlobal,omitempty"`
	AnalyticsSampling                        []components.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []components.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []components.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []components.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []components.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []components.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []components.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []components.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []components.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []components.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []components.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []components.ACLAction `json:"blob,omitempty"`
	Budget                                   []components.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []components.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []components.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []components.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []components.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []components.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []components.ACLAction `json:"connectConfiguration,omitempty"`
	Domain                                   []components.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []components.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []components.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []components.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []components.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []components.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []components.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []components.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []components.ACLAction `json:"domainTransferIn,omitempty"`
	Event                                    []components.ACLAction `json:"event,omitempty"`
	OwnEvent                                 []components.ACLAction `json:"ownEvent,omitempty"`
	SensitiveEnvironmentVariablePolicy       []components.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	FileUpload                               []components.ACLAction `json:"fileUpload,omitempty"`
	FlagsExplorerSubscription                []components.ACLAction `json:"flagsExplorerSubscription,omitempty"`
	GitRepository                            []components.ACLAction `json:"gitRepository,omitempty"`
	IPBlocking                               []components.ACLAction `json:"ipBlocking,omitempty"`
	ImageOptimizationNewPrice                []components.ACLAction `json:"imageOptimizationNewPrice,omitempty"`
	Integration                              []components.ACLAction `json:"integration,omitempty"`
	IntegrationAccount                       []components.ACLAction `json:"integrationAccount,omitempty"`
	IntegrationConfiguration                 []components.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationTransfer         []components.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationConfigurationProjects         []components.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationVercelConfigurationOverride   []components.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IntegrationConfigurationRole             []components.ACLAction `json:"integrationConfigurationRole,omitempty"`
	IntegrationSSOSession                    []components.ACLAction `json:"integrationSSOSession,omitempty"`
	IntegrationResource                      []components.ACLAction `json:"integrationResource,omitempty"`
	IntegrationEvent                         []components.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []components.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationDeploymentAction              []components.ACLAction `json:"integrationDeploymentAction,omitempty"`
	MarketplaceInstallationMember            []components.ACLAction `json:"marketplaceInstallationMember,omitempty"`
	MarketplaceBillingData                   []components.ACLAction `json:"marketplaceBillingData,omitempty"`
	MarketplaceInvoice                       []components.ACLAction `json:"marketplaceInvoice,omitempty"`
	MarketplaceExperimentationItem           []components.ACLAction `json:"marketplaceExperimentationItem,omitempty"`
	MarketplaceExperimentationEdgeConfigData []components.ACLAction `json:"marketplaceExperimentationEdgeConfigData,omitempty"`
	JobGlobal                                []components.ACLAction `json:"jobGlobal,omitempty"`
	Drain                                    []components.ACLAction `json:"drain,omitempty"`
	LogDrain                                 []components.ACLAction `json:"logDrain,omitempty"`
	Monitoring                               []components.ACLAction `json:"Monitoring,omitempty"`
	MonitoringSettings                       []components.ACLAction `json:"monitoringSettings,omitempty"`
	MonitoringQuery                          []components.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringChart                          []components.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringAlert                          []components.ACLAction `json:"monitoringAlert,omitempty"`
	NotificationDeploymentFailed             []components.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []components.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []components.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []components.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []components.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []components.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []components.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []components.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationMonitoringAlert              []components.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	NotificationPaymentFailed                []components.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []components.ACLAction `json:"notificationUsageAlert,omitempty"`
	NotificationCustomerBudget               []components.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationStatementOfReasons           []components.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	ObservabilityConfiguration               []components.ACLAction `json:"observabilityConfiguration,omitempty"`
	OpenTelemetryEndpoint                    []components.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	PaymentMethod                            []components.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []components.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []components.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []components.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []components.ACLAction `json:"proTrialOnboarding,omitempty"`
	SharedEnvVars                            []components.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []components.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []components.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []components.ACLAction `json:"spaceRun,omitempty"`
	PasswordProtectionInvoiceItem            []components.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	RateLimit                                []components.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []components.ACLAction `json:"redis,omitempty"`
	Repository                               []components.ACLAction `json:"repository,omitempty"`
	RemoteCaching                            []components.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []components.ACLAction `json:"samlConfig,omitempty"`
	Secret                                   []components.ACLAction `json:"secret,omitempty"`
	RedisStoreTokenSet                       []components.ACLAction `json:"redisStoreTokenSet,omitempty"`
	BlobStoreTokenSet                        []components.ACLAction `json:"blobStoreTokenSet,omitempty"`
	PostgresStoreTokenSet                    []components.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	IntegrationStoreTokenSet                 []components.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationResourceReplCommand           []components.ACLAction `json:"integrationResourceReplCommand,omitempty"`
	StoreTransfer                            []components.ACLAction `json:"storeTransfer,omitempty"`
	SupportCase                              []components.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []components.ACLAction `json:"supportCaseComment,omitempty"`
	DataCacheBillingSettings                 []components.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	Team                                     []components.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []components.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []components.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamGitExclusivity                       []components.ACLAction `json:"teamGitExclusivity,omitempty"`
	TeamInvite                               []components.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []components.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []components.ACLAction `json:"teamJoin,omitempty"`
	TeamMicrofrontends                       []components.ACLAction `json:"teamMicrofrontends,omitempty"`
	TeamOwnMembership                        []components.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []components.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []components.ACLAction `json:"token,omitempty"`
	Usage                                    []components.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []components.ACLAction `json:"usageCycle,omitempty"`
	VpcPeeringConnection                     []components.ACLAction `json:"vpcPeeringConnection,omitempty"`
	WebAnalyticsPlan                         []components.ACLAction `json:"webAnalyticsPlan,omitempty"`
	EdgeConfig                               []components.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []components.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []components.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []components.ACLAction `json:"edgeConfigToken,omitempty"`
	Webhook                                  []components.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []components.ACLAction `json:"webhook-event,omitempty"`
	EndpointVerification                     []components.ACLAction `json:"endpointVerification,omitempty"`
	ProjectTransferIn                        []components.ACLAction `json:"projectTransferIn,omitempty"`
	Oauth2Application                        []components.ACLAction `json:"oauth2Application,omitempty"`
	AliasProject                             []components.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []components.ACLAction `json:"aliasProtectionBypass,omitempty"`
	ProductionAliasProtectionBypass          []components.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	ConnectConfigurationLink                 []components.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheNamespace                       []components.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []components.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []components.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []components.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []components.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentProductionGit                  []components.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentV0                             []components.ACLAction `json:"deploymentV0,omitempty"`
	DeploymentPreview                        []components.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []components.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentPromote                        []components.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []components.ACLAction `json:"deploymentRollback,omitempty"`
	Environments                             []components.ACLAction `json:"environments,omitempty"`
	Logs                                     []components.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []components.ACLAction `json:"logsPreset,omitempty"`
	PasswordProtection                       []components.ACLAction `json:"passwordProtection,omitempty"`
	OptionsAllowlist                         []components.ACLAction `json:"optionsAllowlist,omitempty"`
	Job                                      []components.ACLAction `json:"job,omitempty"`
	ObservabilityData                        []components.ACLAction `json:"observabilityData,omitempty"`
	Project                                  []components.ACLAction `json:"project,omitempty"`
	ProjectFromV0                            []components.ACLAction `json:"projectFromV0,omitempty"`
	ProjectAccessGroup                       []components.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []components.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectDeploymentHook                    []components.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []components.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []components.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectDomainCheckConfig                 []components.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectEnvVars                           []components.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []components.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []components.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectFlags                             []components.ACLAction `json:"projectFlags,omitempty"`
	ProjectID                                []components.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []components.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []components.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []components.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []components.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []components.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []components.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectTransfer                          []components.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferOut                       []components.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectProtectionBypass                  []components.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectUsage                             []components.ACLAction `json:"projectUsage,omitempty"`
	ProjectAnalyticsUsage                    []components.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectSupportCase                       []components.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []components.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectDeploymentExpiration              []components.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectRollingRelease                    []components.ACLAction `json:"projectRollingRelease,omitempty"`
	ProjectTier                              []components.ACLAction `json:"projectTier,omitempty"`
	SeawallConfig                            []components.ACLAction `json:"seawallConfig,omitempty"`
	SkewProtection                           []components.ACLAction `json:"skewProtection,omitempty"`
	Analytics                                []components.ACLAction `json:"analytics,omitempty"`
	TrustedIps                               []components.ACLAction `json:"trustedIps,omitempty"`
	WebAnalytics                             []components.ACLAction `json:"webAnalytics,omitempty"`
	SharedEnvVarConnection                   []components.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	Sonar                                    []components.ACLAction `json:"sonar,omitempty"`
}

func (o *Permissions) GetUser() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *Permissions) GetUserConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *Permissions) GetUserSudo() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserSudo
}

func (o *Permissions) GetWebAuthn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *Permissions) GetOauth2Connection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *Permissions) GetAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *Permissions) GetAliasGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *Permissions) GetAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *Permissions) GetAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *Permissions) GetAuditLog() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *Permissions) GetBillingAddress() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *Permissions) GetBillingInformation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *Permissions) GetBillingInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *Permissions) GetBillingInvoiceEmailRecipient() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *Permissions) GetBillingInvoiceLanguage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *Permissions) GetBillingPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *Permissions) GetBillingPurchaseOrder() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *Permissions) GetBillingTaxID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *Permissions) GetBlob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *Permissions) GetBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *Permissions) GetCacheArtifact() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *Permissions) GetCacheArtifactUsageEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *Permissions) GetCodeChecks() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *Permissions) GetConcurrentBuilds() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *Permissions) GetConnect() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *Permissions) GetConnectConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *Permissions) GetDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *Permissions) GetDomainAcceptDelegation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *Permissions) GetDomainAuthCodes() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *Permissions) GetDomainCertificate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *Permissions) GetDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *Permissions) GetDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *Permissions) GetDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *Permissions) GetDomainRecord() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *Permissions) GetDomainTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *Permissions) GetEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *Permissions) GetOwnEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *Permissions) GetSensitiveEnvironmentVariablePolicy() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *Permissions) GetFileUpload() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *Permissions) GetFlagsExplorerSubscription() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerSubscription
}

func (o *Permissions) GetGitRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *Permissions) GetIPBlocking() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *Permissions) GetImageOptimizationNewPrice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationNewPrice
}

func (o *Permissions) GetIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *Permissions) GetIntegrationAccount() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationAccount
}

func (o *Permissions) GetIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *Permissions) GetIntegrationConfigurationTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *Permissions) GetIntegrationConfigurationProjects() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *Permissions) GetIntegrationVercelConfigurationOverride() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *Permissions) GetIntegrationConfigurationRole() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationRole
}

func (o *Permissions) GetIntegrationSSOSession() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationSSOSession
}

func (o *Permissions) GetIntegrationResource() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResource
}

func (o *Permissions) GetIntegrationEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *Permissions) GetIntegrationResourceSecrets() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *Permissions) GetIntegrationDeploymentAction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationDeploymentAction
}

func (o *Permissions) GetMarketplaceInstallationMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInstallationMember
}

func (o *Permissions) GetMarketplaceBillingData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *Permissions) GetMarketplaceInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInvoice
}

func (o *Permissions) GetMarketplaceExperimentationItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationItem
}

func (o *Permissions) GetMarketplaceExperimentationEdgeConfigData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationEdgeConfigData
}

func (o *Permissions) GetJobGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *Permissions) GetDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Drain
}

func (o *Permissions) GetLogDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *Permissions) GetMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *Permissions) GetMonitoringSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *Permissions) GetMonitoringQuery() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *Permissions) GetMonitoringChart() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *Permissions) GetMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *Permissions) GetNotificationDeploymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *Permissions) GetNotificationDomainConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *Permissions) GetNotificationDomainExpire() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *Permissions) GetNotificationDomainMoved() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *Permissions) GetNotificationDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *Permissions) GetNotificationDomainRenewal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *Permissions) GetNotificationDomainTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *Permissions) GetNotificationDomainUnverified() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *Permissions) GetNotificationMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *Permissions) GetNotificationPaymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *Permissions) GetNotificationUsageAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *Permissions) GetNotificationCustomerBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *Permissions) GetNotificationStatementOfReasons() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *Permissions) GetObservabilityConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityConfiguration
}

func (o *Permissions) GetOpenTelemetryEndpoint() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *Permissions) GetPaymentMethod() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *Permissions) GetPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *Permissions) GetPostgres() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *Permissions) GetPreviewDeploymentSuffix() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *Permissions) GetProTrialOnboarding() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *Permissions) GetSharedEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *Permissions) GetSharedEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *Permissions) GetSpace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *Permissions) GetSpaceRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *Permissions) GetPasswordProtectionInvoiceItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *Permissions) GetRateLimit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *Permissions) GetRedis() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *Permissions) GetRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *Permissions) GetRemoteCaching() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *Permissions) GetSamlConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *Permissions) GetSecret() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *Permissions) GetRedisStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *Permissions) GetBlobStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *Permissions) GetPostgresStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *Permissions) GetIntegrationStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *Permissions) GetIntegrationResourceReplCommand() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceReplCommand
}

func (o *Permissions) GetStoreTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.StoreTransfer
}

func (o *Permissions) GetSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *Permissions) GetSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *Permissions) GetDataCacheBillingSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *Permissions) GetTeam() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *Permissions) GetTeamAccessRequest() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *Permissions) GetTeamFellowMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *Permissions) GetTeamGitExclusivity() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamGitExclusivity
}

func (o *Permissions) GetTeamInvite() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *Permissions) GetTeamInviteCode() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *Permissions) GetTeamJoin() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *Permissions) GetTeamMicrofrontends() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMicrofrontends
}

func (o *Permissions) GetTeamOwnMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *Permissions) GetTeamOwnMembershipDisconnectSAML() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *Permissions) GetToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *Permissions) GetUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *Permissions) GetUsageCycle() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *Permissions) GetVpcPeeringConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VpcPeeringConnection
}

func (o *Permissions) GetWebAnalyticsPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *Permissions) GetEdgeConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *Permissions) GetEdgeConfigItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *Permissions) GetEdgeConfigSchema() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *Permissions) GetEdgeConfigToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *Permissions) GetWebhook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *Permissions) GetWebhookEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

func (o *Permissions) GetEndpointVerification() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *Permissions) GetProjectTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *Permissions) GetOauth2Application() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *Permissions) GetAliasProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *Permissions) GetAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *Permissions) GetProductionAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *Permissions) GetConnectConfigurationLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *Permissions) GetDataCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *Permissions) GetDeployment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *Permissions) GetDeploymentCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *Permissions) GetDeploymentCheckPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *Permissions) GetDeploymentCheckReRunFromProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *Permissions) GetDeploymentProductionGit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *Permissions) GetDeploymentV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentV0
}

func (o *Permissions) GetDeploymentPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *Permissions) GetDeploymentPrivate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *Permissions) GetDeploymentPromote() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *Permissions) GetDeploymentRollback() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *Permissions) GetEnvironments() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *Permissions) GetLogs() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *Permissions) GetLogsPreset() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *Permissions) GetPasswordProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *Permissions) GetOptionsAllowlist() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *Permissions) GetJob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *Permissions) GetObservabilityData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityData
}

func (o *Permissions) GetProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *Permissions) GetProjectFromV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFromV0
}

func (o *Permissions) GetProjectAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *Permissions) GetProjectAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *Permissions) GetProjectDeploymentHook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *Permissions) GetProjectDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *Permissions) GetProjectDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *Permissions) GetProjectDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *Permissions) GetProjectEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *Permissions) GetProjectEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *Permissions) GetProjectEnvVarsUnownedByIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *Permissions) GetProjectFlags() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFlags
}

func (o *Permissions) GetProjectID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Permissions) GetProjectIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *Permissions) GetProjectLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *Permissions) GetProjectMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *Permissions) GetProjectMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *Permissions) GetProjectPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *Permissions) GetProjectProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *Permissions) GetProjectTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *Permissions) GetProjectTransferOut() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *Permissions) GetProjectProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *Permissions) GetProjectUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *Permissions) GetProjectAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *Permissions) GetProjectSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *Permissions) GetProjectSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *Permissions) GetProjectDeploymentExpiration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *Permissions) GetProjectRollingRelease() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectRollingRelease
}

func (o *Permissions) GetProjectTier() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTier
}

func (o *Permissions) GetSeawallConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *Permissions) GetSkewProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *Permissions) GetAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *Permissions) GetTrustedIps() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *Permissions) GetWebAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *Permissions) GetSharedEnvVarConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *Permissions) GetSonar() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Sonar
}

type LastRollbackTarget struct {
}

type JobStatus string

const (
	JobStatusSucceeded  JobStatus = "succeeded"
	JobStatusFailed     JobStatus = "failed"
	JobStatusSkipped    JobStatus = "skipped"
	JobStatusPending    JobStatus = "pending"
	JobStatusInProgress JobStatus = "in-progress"
)

func (e JobStatus) ToPointer() *JobStatus {
	return &e
}
func (e *JobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = JobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatus: %v", v)
	}
}

type UpdateProjectDataCacheProjectsResponseType string

const (
	UpdateProjectDataCacheProjectsResponseTypePromote  UpdateProjectDataCacheProjectsResponseType = "promote"
	UpdateProjectDataCacheProjectsResponseTypeRollback UpdateProjectDataCacheProjectsResponseType = "rollback"
)

func (e UpdateProjectDataCacheProjectsResponseType) ToPointer() *UpdateProjectDataCacheProjectsResponseType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = UpdateProjectDataCacheProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponseType: %v", v)
	}
}

type LastAliasRequest struct {
	FromDeploymentID string                                     `json:"fromDeploymentId"`
	ToDeploymentID   string                                     `json:"toDeploymentId"`
	JobStatus        JobStatus                                  `json:"jobStatus"`
	RequestedAt      float64                                    `json:"requestedAt"`
	Type             UpdateProjectDataCacheProjectsResponseType `json:"type"`
}

func (o *LastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *LastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *LastAliasRequest) GetJobStatus() JobStatus {
	if o == nil {
		return JobStatus("")
	}
	return o.JobStatus
}

func (o *LastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *LastAliasRequest) GetType() UpdateProjectDataCacheProjectsResponseType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponseType("")
	}
	return o.Type
}

type Scope string

const (
	ScopeAutomationBypass Scope = "automation-bypass"
)

func (e Scope) ToPointer() *Scope {
	return &e
}
func (e *Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scope: %v", v)
	}
}

type ProtectionBypass struct {
	CreatedAt float64 `json:"createdAt"`
	CreatedBy string  `json:"createdBy"`
	Scope     Scope   `json:"scope"`
}

func (o *ProtectionBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ProtectionBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ProtectionBypass) GetScope() Scope {
	if o == nil {
		return Scope("")
	}
	return o.Scope
}

type UpdateProjectDataCacheTrustedIpsDeploymentType string

const (
	UpdateProjectDataCacheTrustedIpsDeploymentTypeProduction                       UpdateProjectDataCacheTrustedIpsDeploymentType = "production"
	UpdateProjectDataCacheTrustedIpsDeploymentTypePreview                          UpdateProjectDataCacheTrustedIpsDeploymentType = "preview"
	UpdateProjectDataCacheTrustedIpsDeploymentTypeAll                              UpdateProjectDataCacheTrustedIpsDeploymentType = "all"
	UpdateProjectDataCacheTrustedIpsDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectDataCacheTrustedIpsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectDataCacheTrustedIpsDeploymentType) ToPointer() *UpdateProjectDataCacheTrustedIpsDeploymentType {
	return &e
}
func (e *UpdateProjectDataCacheTrustedIpsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectDataCacheTrustedIpsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTrustedIpsDeploymentType: %v", v)
	}
}

type TrustedIps2 struct {
	DeploymentType UpdateProjectDataCacheTrustedIpsDeploymentType `json:"deploymentType"`
}

func (o *TrustedIps2) GetDeploymentType() UpdateProjectDataCacheTrustedIpsDeploymentType {
	if o == nil {
		return UpdateProjectDataCacheTrustedIpsDeploymentType("")
	}
	return o.DeploymentType
}

type TrustedIpsDeploymentType string

const (
	TrustedIpsDeploymentTypeProduction                       TrustedIpsDeploymentType = "production"
	TrustedIpsDeploymentTypePreview                          TrustedIpsDeploymentType = "preview"
	TrustedIpsDeploymentTypeAll                              TrustedIpsDeploymentType = "all"
	TrustedIpsDeploymentTypeProdDeploymentUrlsAndAllPreviews TrustedIpsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e TrustedIpsDeploymentType) ToPointer() *TrustedIpsDeploymentType {
	return &e
}
func (e *TrustedIpsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = TrustedIpsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustedIpsDeploymentType: %v", v)
	}
}

type UpdateProjectDataCacheTrustedIpsAddresses struct {
	Value string  `json:"value"`
	Note  *string `json:"note,omitempty"`
}

func (o *UpdateProjectDataCacheTrustedIpsAddresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateProjectDataCacheTrustedIpsAddresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

type UpdateProjectDataCacheTrustedIpsProtectionMode string

const (
	UpdateProjectDataCacheTrustedIpsProtectionModeAdditional UpdateProjectDataCacheTrustedIpsProtectionMode = "additional"
	UpdateProjectDataCacheTrustedIpsProtectionModeExclusive  UpdateProjectDataCacheTrustedIpsProtectionMode = "exclusive"
)

func (e UpdateProjectDataCacheTrustedIpsProtectionMode) ToPointer() *UpdateProjectDataCacheTrustedIpsProtectionMode {
	return &e
}
func (e *UpdateProjectDataCacheTrustedIpsProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = UpdateProjectDataCacheTrustedIpsProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTrustedIpsProtectionMode: %v", v)
	}
}

type TrustedIps1 struct {
	DeploymentType TrustedIpsDeploymentType                       `json:"deploymentType"`
	Addresses      []UpdateProjectDataCacheTrustedIpsAddresses    `json:"addresses"`
	ProtectionMode UpdateProjectDataCacheTrustedIpsProtectionMode `json:"protectionMode"`
}

func (o *TrustedIps1) GetDeploymentType() TrustedIpsDeploymentType {
	if o == nil {
		return TrustedIpsDeploymentType("")
	}
	return o.DeploymentType
}

func (o *TrustedIps1) GetAddresses() []UpdateProjectDataCacheTrustedIpsAddresses {
	if o == nil {
		return []UpdateProjectDataCacheTrustedIpsAddresses{}
	}
	return o.Addresses
}

func (o *TrustedIps1) GetProtectionMode() UpdateProjectDataCacheTrustedIpsProtectionMode {
	if o == nil {
		return UpdateProjectDataCacheTrustedIpsProtectionMode("")
	}
	return o.ProtectionMode
}

type UpdateProjectDataCacheTrustedIpsType string

const (
	UpdateProjectDataCacheTrustedIpsTypeTrustedIps1 UpdateProjectDataCacheTrustedIpsType = "trustedIps_1"
	UpdateProjectDataCacheTrustedIpsTypeTrustedIps2 UpdateProjectDataCacheTrustedIpsType = "trustedIps_2"
)

type UpdateProjectDataCacheTrustedIps struct {
	TrustedIps1 *TrustedIps1
	TrustedIps2 *TrustedIps2

	Type UpdateProjectDataCacheTrustedIpsType
}

func CreateUpdateProjectDataCacheTrustedIpsTrustedIps1(trustedIps1 TrustedIps1) UpdateProjectDataCacheTrustedIps {
	typ := UpdateProjectDataCacheTrustedIpsTypeTrustedIps1

	return UpdateProjectDataCacheTrustedIps{
		TrustedIps1: &trustedIps1,
		Type:        typ,
	}
}

func CreateUpdateProjectDataCacheTrustedIpsTrustedIps2(trustedIps2 TrustedIps2) UpdateProjectDataCacheTrustedIps {
	typ := UpdateProjectDataCacheTrustedIpsTypeTrustedIps2

	return UpdateProjectDataCacheTrustedIps{
		TrustedIps2: &trustedIps2,
		Type:        typ,
	}
}

func (u *UpdateProjectDataCacheTrustedIps) UnmarshalJSON(data []byte) error {

	var trustedIps2 TrustedIps2 = TrustedIps2{}
	if err := utils.UnmarshalJSON(data, &trustedIps2, "", true, true); err == nil {
		u.TrustedIps2 = &trustedIps2
		u.Type = UpdateProjectDataCacheTrustedIpsTypeTrustedIps2
		return nil
	}

	var trustedIps1 TrustedIps1 = TrustedIps1{}
	if err := utils.UnmarshalJSON(data, &trustedIps1, "", true, true); err == nil {
		u.TrustedIps1 = &trustedIps1
		u.Type = UpdateProjectDataCacheTrustedIpsTypeTrustedIps1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheTrustedIps", string(data))
}

func (u UpdateProjectDataCacheTrustedIps) MarshalJSON() ([]byte, error) {
	if u.TrustedIps1 != nil {
		return utils.MarshalJSON(u.TrustedIps1, "", true)
	}

	if u.TrustedIps2 != nil {
		return utils.MarshalJSON(u.TrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheTrustedIps: all fields are null")
}

type GitComments struct {
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
}

func (o *GitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

func (o *GitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

// CreateDeployments - Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
type CreateDeployments string

const (
	CreateDeploymentsEnabled  CreateDeployments = "enabled"
	CreateDeploymentsDisabled CreateDeployments = "disabled"
)

func (e CreateDeployments) ToPointer() *CreateDeployments {
	return &e
}
func (e *CreateDeployments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = CreateDeployments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeployments: %v", v)
	}
}

type GitProviderOptions struct {
	// Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
	CreateDeployments CreateDeployments `json:"createDeployments"`
}

func (o *GitProviderOptions) GetCreateDeployments() CreateDeployments {
	if o == nil {
		return CreateDeployments("")
	}
	return o.CreateDeployments
}

type WebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *WebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *WebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *WebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *WebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *WebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type Src2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *Src2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *Src2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *Src2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *Src2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *Src2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *Src2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *Src2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *Src2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *Src2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *Src2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *Src2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type SrcType string

const (
	SrcTypeStr  SrcType = "str"
	SrcTypeSrc2 SrcType = "src_2"
)

type Src struct {
	Str  *string
	Src2 *Src2

	Type SrcType
}

func CreateSrcStr(str string) Src {
	typ := SrcTypeStr

	return Src{
		Str:  &str,
		Type: typ,
	}
}

func CreateSrcSrc2(src2 Src2) Src {
	typ := SrcTypeSrc2

	return Src{
		Src2: &src2,
		Type: typ,
	}
}

func (u *Src) UnmarshalJSON(data []byte) error {

	var src2 Src2 = Src2{}
	if err := utils.UnmarshalJSON(data, &src2, "", true, true); err == nil {
		u.Src2 = &src2
		u.Type = SrcTypeSrc2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = SrcTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Src", string(data))
}

func (u Src) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Src2 != nil {
		return utils.MarshalJSON(u.Src2, "", true)
	}

	return nil, errors.New("could not marshal union type Src: all fields are null")
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypePath               UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "path"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeHost               UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "host"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeMethod             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "method"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeHeader             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "header"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeCookie             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "cookie"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeQuery              UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "query"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeIPAddress          UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "ip_address"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeProtocol           UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "protocol"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeScheme             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "scheme"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeEnvironment        UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "environment"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeRegion             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "region"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityTypeInitialRequestPath UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType = "initial_request_path"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType: %v", v)
	}
}

type UpdateProjectDataCacheValueProjects2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectDataCacheValueProjects2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectDataCacheValueProjects2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectDataCacheValueProjects2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectDataCacheValueProjects2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectDataCacheValueProjects2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectDataCacheValueProjects2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectDataCacheValueProjects2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectDataCacheValueProjects2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectDataCacheValueProjects2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectDataCacheValueProjects2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectDataCacheValueProjects2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectDataCacheProjectsValueType string

const (
	UpdateProjectDataCacheProjectsValueTypeStr                                  UpdateProjectDataCacheProjectsValueType = "str"
	UpdateProjectDataCacheProjectsValueTypeUpdateProjectDataCacheValueProjects2 UpdateProjectDataCacheProjectsValueType = "updateProjectDataCache_value_projects_2"
)

type UpdateProjectDataCacheProjectsValue struct {
	Str                                  *string
	UpdateProjectDataCacheValueProjects2 *UpdateProjectDataCacheValueProjects2

	Type UpdateProjectDataCacheProjectsValueType
}

func CreateUpdateProjectDataCacheProjectsValueStr(str string) UpdateProjectDataCacheProjectsValue {
	typ := UpdateProjectDataCacheProjectsValueTypeStr

	return UpdateProjectDataCacheProjectsValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheProjectsValueUpdateProjectDataCacheValueProjects2(updateProjectDataCacheValueProjects2 UpdateProjectDataCacheValueProjects2) UpdateProjectDataCacheProjectsValue {
	typ := UpdateProjectDataCacheProjectsValueTypeUpdateProjectDataCacheValueProjects2

	return UpdateProjectDataCacheProjectsValue{
		UpdateProjectDataCacheValueProjects2: &updateProjectDataCacheValueProjects2,
		Type:                                 typ,
	}
}

func (u *UpdateProjectDataCacheProjectsValue) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheValueProjects2 UpdateProjectDataCacheValueProjects2 = UpdateProjectDataCacheValueProjects2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheValueProjects2, "", true, true); err == nil {
		u.UpdateProjectDataCacheValueProjects2 = &updateProjectDataCacheValueProjects2
		u.Type = UpdateProjectDataCacheProjectsValueTypeUpdateProjectDataCacheValueProjects2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheProjectsValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheProjectsValue", string(data))
}

func (u UpdateProjectDataCacheProjectsValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectDataCacheValueProjects2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheValueProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheProjectsValue: all fields are null")
}

type Has struct {
	Type  UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType `json:"type"`
	Key   *string                                                                          `json:"key,omitempty"`
	Value *UpdateProjectDataCacheProjectsValue                                             `json:"value,omitempty"`
}

func (o *Has) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityType("")
	}
	return o.Type
}

func (o *Has) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Has) GetValue() *UpdateProjectDataCacheProjectsValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType string

const (
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypePath               UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "path"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHost               UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "host"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeMethod             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "method"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHeader             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "header"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeCookie             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "cookie"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeQuery              UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "query"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeIPAddress          UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "ip_address"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeProtocol           UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "protocol"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeScheme             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "scheme"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeEnvironment        UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "environment"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeRegion             UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "region"
	UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeInitialRequestPath UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "initial_request_path"
)

func (e UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) ToPointer() *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	return &e
}
func (e *UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType: %v", v)
	}
}

type UpdateProjectDataCacheValue2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectDataCacheValue2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectDataCacheValue2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectDataCacheValue2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectDataCacheValue2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectDataCacheValue2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectDataCacheValue2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectDataCacheValue2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectDataCacheValue2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectDataCacheValue2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectDataCacheValue2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectDataCacheValue2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectDataCacheValueType string

const (
	UpdateProjectDataCacheValueTypeStr                          UpdateProjectDataCacheValueType = "str"
	UpdateProjectDataCacheValueTypeUpdateProjectDataCacheValue2 UpdateProjectDataCacheValueType = "updateProjectDataCache_value_2"
)

type UpdateProjectDataCacheValue struct {
	Str                          *string
	UpdateProjectDataCacheValue2 *UpdateProjectDataCacheValue2

	Type UpdateProjectDataCacheValueType
}

func CreateUpdateProjectDataCacheValueStr(str string) UpdateProjectDataCacheValue {
	typ := UpdateProjectDataCacheValueTypeStr

	return UpdateProjectDataCacheValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheValueUpdateProjectDataCacheValue2(updateProjectDataCacheValue2 UpdateProjectDataCacheValue2) UpdateProjectDataCacheValue {
	typ := UpdateProjectDataCacheValueTypeUpdateProjectDataCacheValue2

	return UpdateProjectDataCacheValue{
		UpdateProjectDataCacheValue2: &updateProjectDataCacheValue2,
		Type:                         typ,
	}
}

func (u *UpdateProjectDataCacheValue) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheValue2 UpdateProjectDataCacheValue2 = UpdateProjectDataCacheValue2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheValue2, "", true, true); err == nil {
		u.UpdateProjectDataCacheValue2 = &updateProjectDataCacheValue2
		u.Type = UpdateProjectDataCacheValueTypeUpdateProjectDataCacheValue2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheValue", string(data))
}

func (u UpdateProjectDataCacheValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectDataCacheValue2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheValue2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheValue: all fields are null")
}

type Missing struct {
	Type  UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType `json:"type"`
	Key   *string                                                                                        `json:"key,omitempty"`
	Value *UpdateProjectDataCacheValue                                                                   `json:"value,omitempty"`
}

func (o *Missing) GetType() UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	if o == nil {
		return UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType("")
	}
	return o.Type
}

func (o *Missing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Missing) GetValue() *UpdateProjectDataCacheValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type Handle string

const (
	HandleInit     Handle = "init"
	HandleFinalize Handle = "finalize"
)

func (e Handle) ToPointer() *Handle {
	return &e
}
func (e *Handle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = Handle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Handle: %v", v)
	}
}

type UpdateProjectDataCacheProjectsAction string

const (
	UpdateProjectDataCacheProjectsActionDeny      UpdateProjectDataCacheProjectsAction = "deny"
	UpdateProjectDataCacheProjectsActionChallenge UpdateProjectDataCacheProjectsAction = "challenge"
	UpdateProjectDataCacheProjectsActionLog       UpdateProjectDataCacheProjectsAction = "log"
	UpdateProjectDataCacheProjectsActionBypass    UpdateProjectDataCacheProjectsAction = "bypass"
	UpdateProjectDataCacheProjectsActionRateLimit UpdateProjectDataCacheProjectsAction = "rate_limit"
	UpdateProjectDataCacheProjectsActionRedirect  UpdateProjectDataCacheProjectsAction = "redirect"
)

func (e UpdateProjectDataCacheProjectsAction) ToPointer() *UpdateProjectDataCacheProjectsAction {
	return &e
}
func (e *UpdateProjectDataCacheProjectsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = UpdateProjectDataCacheProjectsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProjectsAction: %v", v)
	}
}

type Algo string

const (
	AlgoFixedWindow Algo = "fixed_window"
	AlgoTokenBucket Algo = "token_bucket"
)

func (e Algo) ToPointer() *Algo {
	return &e
}
func (e *Algo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = Algo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Algo: %v", v)
	}
}

type Erl struct {
	Algo   Algo     `json:"algo"`
	Window float64  `json:"window"`
	Limit  float64  `json:"limit"`
	Keys   []string `json:"keys"`
}

func (o *Erl) GetAlgo() Algo {
	if o == nil {
		return Algo("")
	}
	return o.Algo
}

func (o *Erl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *Erl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *Erl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

type UpdateProjectDataCacheMitigate struct {
	Action UpdateProjectDataCacheProjectsAction `json:"action"`
	RuleID string                               `json:"rule_id"`
	TTL    *float64                             `json:"ttl,omitempty"`
	Erl    *Erl                                 `json:"erl,omitempty"`
}

func (o *UpdateProjectDataCacheMitigate) GetAction() UpdateProjectDataCacheProjectsAction {
	if o == nil {
		return UpdateProjectDataCacheProjectsAction("")
	}
	return o.Action
}

func (o *UpdateProjectDataCacheMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *UpdateProjectDataCacheMitigate) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *UpdateProjectDataCacheMitigate) GetErl() *Erl {
	if o == nil {
		return nil
	}
	return o.Erl
}

type FirewallRoutes struct {
	Src      *Src                            `json:"src,omitempty"`
	Has      []Has                           `json:"has,omitempty"`
	Missing  []Missing                       `json:"missing,omitempty"`
	Dest     *string                         `json:"dest,omitempty"`
	Status   *float64                        `json:"status,omitempty"`
	Handle   *Handle                         `json:"handle,omitempty"`
	Mitigate *UpdateProjectDataCacheMitigate `json:"mitigate,omitempty"`
}

func (o *FirewallRoutes) GetSrc() *Src {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *FirewallRoutes) GetHas() []Has {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *FirewallRoutes) GetMissing() []Missing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *FirewallRoutes) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *FirewallRoutes) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *FirewallRoutes) GetHandle() *Handle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *FirewallRoutes) GetMitigate() *UpdateProjectDataCacheMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type UpdateProjectDataCacheAction string

const (
	UpdateProjectDataCacheActionDeny      UpdateProjectDataCacheAction = "deny"
	UpdateProjectDataCacheActionChallenge UpdateProjectDataCacheAction = "challenge"
	UpdateProjectDataCacheActionLog       UpdateProjectDataCacheAction = "log"
)

func (e UpdateProjectDataCacheAction) ToPointer() *UpdateProjectDataCacheAction {
	return &e
}
func (e *UpdateProjectDataCacheAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = UpdateProjectDataCacheAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheAction: %v", v)
	}
}

type UpdateProjectDataCacheManagedRules struct {
	Active bool                          `json:"active"`
	Action *UpdateProjectDataCacheAction `json:"action,omitempty"`
}

func (o *UpdateProjectDataCacheManagedRules) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateProjectDataCacheManagedRules) GetAction() *UpdateProjectDataCacheAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type Security struct {
	AttackModeEnabled      *bool                                         `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                                      `json:"attackModeUpdatedAt,omitempty"`
	FirewallEnabled        *bool                                         `json:"firewallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                                      `json:"firewallUpdatedAt,omitempty"`
	AttackModeActiveUntil  *float64                                      `json:"attackModeActiveUntil,omitempty"`
	FirewallConfigVersion  *float64                                      `json:"firewallConfigVersion,omitempty"`
	FirewallRoutes         []FirewallRoutes                              `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                                         `json:"firewallSeawallEnabled,omitempty"`
	Ja3Enabled             *bool                                         `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                                         `json:"ja4Enabled,omitempty"`
	FirewallBypassIps      []string                                      `json:"firewallBypassIps,omitempty"`
	ManagedRules           map[string]UpdateProjectDataCacheManagedRules `json:"managedRules,omitempty"`
}

func (o *Security) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *Security) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *Security) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *Security) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *Security) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *Security) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *Security) GetFirewallRoutes() []FirewallRoutes {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *Security) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *Security) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *Security) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

func (o *Security) GetFirewallBypassIps() []string {
	if o == nil {
		return nil
	}
	return o.FirewallBypassIps
}

func (o *Security) GetManagedRules() map[string]UpdateProjectDataCacheManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

// UpdateProjectDataCacheIssuerMode - - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
type UpdateProjectDataCacheIssuerMode string

const (
	UpdateProjectDataCacheIssuerModeTeam   UpdateProjectDataCacheIssuerMode = "team"
	UpdateProjectDataCacheIssuerModeGlobal UpdateProjectDataCacheIssuerMode = "global"
)

func (e UpdateProjectDataCacheIssuerMode) ToPointer() *UpdateProjectDataCacheIssuerMode {
	return &e
}
func (e *UpdateProjectDataCacheIssuerMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = UpdateProjectDataCacheIssuerMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheIssuerMode: %v", v)
	}
}

type UpdateProjectDataCacheOidcTokenConfig struct {
	Enabled bool `json:"enabled"`
	// - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
	IssuerMode *UpdateProjectDataCacheIssuerMode `json:"issuerMode,omitempty"`
}

func (o *UpdateProjectDataCacheOidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *UpdateProjectDataCacheOidcTokenConfig) GetIssuerMode() *UpdateProjectDataCacheIssuerMode {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

type Tier string

const (
	TierStandard Tier = "standard"
	TierAdvanced Tier = "advanced"
	TierCritical Tier = "critical"
)

func (e Tier) ToPointer() *Tier {
	return &e
}
func (e *Tier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "advanced":
		fallthrough
	case "critical":
		*e = Tier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tier: %v", v)
	}
}

type UpdateProjectDataCacheResponseBody struct {
	AccountID                            string                                    `json:"accountId"`
	Analytics                            *Analytics                                `json:"analytics,omitempty"`
	SpeedInsights                        *SpeedInsights                            `json:"speedInsights,omitempty"`
	AutoExposeSystemEnvs                 *bool                                     `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains              *bool                                     `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy     *string                                   `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	BuildCommand                         *string                                   `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep          *string                                   `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectConfigurationID               *string                                   `json:"connectConfigurationId,omitempty"`
	ConnectBuildsEnabled                 *bool                                     `json:"connectBuildsEnabled,omitempty"`
	CreatedAt                            *float64                                  `json:"createdAt,omitempty"`
	CustomerSupportCodeVisibility        *bool                                     `json:"customerSupportCodeVisibility,omitempty"`
	Crons                                *Crons                                    `json:"crons,omitempty"`
	DataCache                            *DataCache                                `json:"dataCache,omitempty"`
	DeploymentExpiration                 *DeploymentExpiration                     `json:"deploymentExpiration,omitempty"`
	DevCommand                           *string                                   `json:"devCommand,omitempty"`
	DirectoryListing                     bool                                      `json:"directoryListing"`
	InstallCommand                       *string                                   `json:"installCommand,omitempty"`
	Env                                  []Env                                     `json:"env,omitempty"`
	CustomEnvironments                   []CustomEnvironments                      `json:"customEnvironments,omitempty"`
	Framework                            *UpdateProjectDataCacheFramework          `json:"framework,omitempty"`
	GitForkProtection                    *bool                                     `json:"gitForkProtection,omitempty"`
	GitLFS                               *bool                                     `json:"gitLFS,omitempty"`
	ID                                   string                                    `json:"id"`
	IPBuckets                            []IPBuckets                               `json:"ipBuckets,omitempty"`
	LatestDeployments                    []LatestDeployments                       `json:"latestDeployments,omitempty"`
	Link                                 *Link                                     `json:"link,omitempty"`
	Microfrontends                       *Microfrontends                           `json:"microfrontends,omitempty"`
	Name                                 string                                    `json:"name"`
	NodeVersion                          UpdateProjectDataCacheNodeVersion         `json:"nodeVersion"`
	OptionsAllowlist                     *UpdateProjectDataCacheOptionsAllowlist   `json:"optionsAllowlist,omitempty"`
	OutputDirectory                      *string                                   `json:"outputDirectory,omitempty"`
	PassiveConnectConfigurationID        *string                                   `json:"passiveConnectConfigurationId,omitempty"`
	PasswordProtection                   *UpdateProjectDataCachePasswordProtection `json:"passwordProtection,omitempty"`
	ProductionDeploymentsFastLane        *bool                                     `json:"productionDeploymentsFastLane,omitempty"`
	PublicSource                         *bool                                     `json:"publicSource,omitempty"`
	ResourceConfig                       ResourceConfig                            `json:"resourceConfig"`
	RollingRelease                       *RollingRelease                           `json:"rollingRelease,omitempty"`
	DefaultResourceConfig                DefaultResourceConfig                     `json:"defaultResourceConfig"`
	RootDirectory                        *string                                   `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion             *string                                   `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                     `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                  `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                  `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                     `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                     `json:"sourceFilesOutsideRootDirectory,omitempty"`
	EnableAffectedProjectsDeployments    *bool                                     `json:"enableAffectedProjectsDeployments,omitempty"`
	SsoProtection                        *UpdateProjectDataCacheSsoProtection      `json:"ssoProtection,omitempty"`
	Targets                              map[string]*Targets                       `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                  `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                  `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                   `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                   `json:"transferredFromAccountId,omitempty"`
	UpdatedAt                            *float64                                  `json:"updatedAt,omitempty"`
	Live                                 *bool                                     `json:"live,omitempty"`
	EnablePreviewFeedback                *bool                                     `json:"enablePreviewFeedback,omitempty"`
	EnableProductionFeedback             *bool                                     `json:"enableProductionFeedback,omitempty"`
	Permissions                          *Permissions                              `json:"permissions,omitempty"`
	LastRollbackTarget                   *LastRollbackTarget                       `json:"lastRollbackTarget,omitempty"`
	LastAliasRequest                     *LastAliasRequest                         `json:"lastAliasRequest,omitempty"`
	ProtectionBypass                     map[string]ProtectionBypass               `json:"protectionBypass,omitempty"`
	HasActiveBranches                    *bool                                     `json:"hasActiveBranches,omitempty"`
	TrustedIps                           *UpdateProjectDataCacheTrustedIps         `json:"trustedIps,omitempty"`
	GitComments                          *GitComments                              `json:"gitComments,omitempty"`
	GitProviderOptions                   *GitProviderOptions                       `json:"gitProviderOptions,omitempty"`
	Paused                               *bool                                     `json:"paused,omitempty"`
	ConcurrencyBucketName                *string                                   `json:"concurrencyBucketName,omitempty"`
	WebAnalytics                         *WebAnalytics                             `json:"webAnalytics,omitempty"`
	Security                             *Security                                 `json:"security,omitempty"`
	OidcTokenConfig                      *UpdateProjectDataCacheOidcTokenConfig    `json:"oidcTokenConfig,omitempty"`
	Tier                                 *Tier                                     `json:"tier,omitempty"`
}

func (o *UpdateProjectDataCacheResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *UpdateProjectDataCacheResponseBody) GetAnalytics() *Analytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectDataCacheResponseBody) GetSpeedInsights() *SpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *UpdateProjectDataCacheResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectDataCacheResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectDataCacheResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectDataCacheResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectDataCacheResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectDataCacheResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCacheResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectDataCacheResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectDataCacheResponseBody) GetCrons() *Crons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *UpdateProjectDataCacheResponseBody) GetDataCache() *DataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *UpdateProjectDataCacheResponseBody) GetDeploymentExpiration() *DeploymentExpiration {
	if o == nil {
		return nil
	}
	return o.DeploymentExpiration
}

func (o *UpdateProjectDataCacheResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectDataCacheResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *UpdateProjectDataCacheResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectDataCacheResponseBody) GetEnv() []Env {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateProjectDataCacheResponseBody) GetCustomEnvironments() []CustomEnvironments {
	if o == nil {
		return nil
	}
	return o.CustomEnvironments
}

func (o *UpdateProjectDataCacheResponseBody) GetFramework() *UpdateProjectDataCacheFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectDataCacheResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectDataCacheResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectDataCacheResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheResponseBody) GetIPBuckets() []IPBuckets {
	if o == nil {
		return nil
	}
	return o.IPBuckets
}

func (o *UpdateProjectDataCacheResponseBody) GetLatestDeployments() []LatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *UpdateProjectDataCacheResponseBody) GetLink() *Link {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *UpdateProjectDataCacheResponseBody) GetMicrofrontends() *Microfrontends {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *UpdateProjectDataCacheResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheResponseBody) GetNodeVersion() UpdateProjectDataCacheNodeVersion {
	if o == nil {
		return UpdateProjectDataCacheNodeVersion("")
	}
	return o.NodeVersion
}

func (o *UpdateProjectDataCacheResponseBody) GetOptionsAllowlist() *UpdateProjectDataCacheOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectDataCacheResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectDataCacheResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *UpdateProjectDataCacheResponseBody) GetPasswordProtection() *UpdateProjectDataCachePasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectDataCacheResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *UpdateProjectDataCacheResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectDataCacheResponseBody) GetResourceConfig() ResourceConfig {
	if o == nil {
		return ResourceConfig{}
	}
	return o.ResourceConfig
}

func (o *UpdateProjectDataCacheResponseBody) GetRollingRelease() *RollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

func (o *UpdateProjectDataCacheResponseBody) GetDefaultResourceConfig() DefaultResourceConfig {
	if o == nil {
		return DefaultResourceConfig{}
	}
	return o.DefaultResourceConfig
}

func (o *UpdateProjectDataCacheResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectDataCacheResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectDataCacheResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *UpdateProjectDataCacheResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *UpdateProjectDataCacheResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *UpdateProjectDataCacheResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectDataCacheResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectDataCacheResponseBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *UpdateProjectDataCacheResponseBody) GetSsoProtection() *UpdateProjectDataCacheSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectDataCacheResponseBody) GetTargets() map[string]*Targets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *UpdateProjectDataCacheResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *UpdateProjectDataCacheResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectDataCacheResponseBody) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *UpdateProjectDataCacheResponseBody) GetPermissions() *Permissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectDataCacheResponseBody) GetLastRollbackTarget() *LastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *UpdateProjectDataCacheResponseBody) GetLastAliasRequest() *LastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *UpdateProjectDataCacheResponseBody) GetProtectionBypass() map[string]ProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *UpdateProjectDataCacheResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *UpdateProjectDataCacheResponseBody) GetTrustedIps() *UpdateProjectDataCacheTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectDataCacheResponseBody) GetGitComments() *GitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *UpdateProjectDataCacheResponseBody) GetGitProviderOptions() *GitProviderOptions {
	if o == nil {
		return nil
	}
	return o.GitProviderOptions
}

func (o *UpdateProjectDataCacheResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *UpdateProjectDataCacheResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *UpdateProjectDataCacheResponseBody) GetWebAnalytics() *WebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectDataCacheResponseBody) GetSecurity() *Security {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *UpdateProjectDataCacheResponseBody) GetOidcTokenConfig() *UpdateProjectDataCacheOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *UpdateProjectDataCacheResponseBody) GetTier() *Tier {
	if o == nil {
		return nil
	}
	return o.Tier
}

type UpdateProjectDataCacheResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateProjectDataCacheResponseBody
}

func (o *UpdateProjectDataCacheResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateProjectDataCacheResponse) GetObject() *UpdateProjectDataCacheResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
