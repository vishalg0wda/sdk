// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// CreateCustomEnvironmentType - Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
type CreateCustomEnvironmentType string

const (
	CreateCustomEnvironmentTypeEquals     CreateCustomEnvironmentType = "equals"
	CreateCustomEnvironmentTypeStartsWith CreateCustomEnvironmentType = "startsWith"
	CreateCustomEnvironmentTypeEndsWith   CreateCustomEnvironmentType = "endsWith"
)

func (e CreateCustomEnvironmentType) ToPointer() *CreateCustomEnvironmentType {
	return &e
}
func (e *CreateCustomEnvironmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "equals":
		fallthrough
	case "startsWith":
		fallthrough
	case "endsWith":
		*e = CreateCustomEnvironmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCustomEnvironmentType: %v", v)
	}
}

// BranchMatcher - How we want to determine a matching branch. This is optional.
type BranchMatcher struct {
	// Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
	Type CreateCustomEnvironmentType `json:"type"`
	// Git branch name or portion thereof.
	Pattern string `json:"pattern"`
}

func (o *BranchMatcher) GetType() CreateCustomEnvironmentType {
	if o == nil {
		return CreateCustomEnvironmentType("")
	}
	return o.Type
}

func (o *BranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type CreateCustomEnvironmentRequestBody struct {
	// The slug of the custom environment to create.
	Slug *string `json:"slug,omitempty"`
	// Description of the custom environment. This is optional.
	Description *string `json:"description,omitempty"`
	// How we want to determine a matching branch. This is optional.
	BranchMatcher *BranchMatcher `json:"branchMatcher,omitempty"`
	// Where to copy environment variables from. This is optional.
	CopyEnvVarsFrom *string `json:"copyEnvVarsFrom,omitempty"`
}

func (o *CreateCustomEnvironmentRequestBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateCustomEnvironmentRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateCustomEnvironmentRequestBody) GetBranchMatcher() *BranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *CreateCustomEnvironmentRequestBody) GetCopyEnvVarsFrom() *string {
	if o == nil {
		return nil
	}
	return o.CopyEnvVarsFrom
}

type CreateCustomEnvironmentRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                             `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CreateCustomEnvironmentRequestBody `request:"mediaType=application/json"`
}

func (o *CreateCustomEnvironmentRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *CreateCustomEnvironmentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateCustomEnvironmentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateCustomEnvironmentRequest) GetRequestBody() *CreateCustomEnvironmentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateCustomEnvironmentResponseBody struct {
}

type CreateCustomEnvironmentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateCustomEnvironmentResponseBody
}

func (o *CreateCustomEnvironmentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateCustomEnvironmentResponse) GetObject() *CreateCustomEnvironmentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
