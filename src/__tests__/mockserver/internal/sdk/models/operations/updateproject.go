// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// UpdateProjectFramework - The framework that is being used for this project. When `null` is used no framework is selected
type UpdateProjectFramework string

const (
	UpdateProjectFrameworkBlitzjs        UpdateProjectFramework = "blitzjs"
	UpdateProjectFrameworkNextjs         UpdateProjectFramework = "nextjs"
	UpdateProjectFrameworkGatsby         UpdateProjectFramework = "gatsby"
	UpdateProjectFrameworkRemix          UpdateProjectFramework = "remix"
	UpdateProjectFrameworkReactRouter    UpdateProjectFramework = "react-router"
	UpdateProjectFrameworkAstro          UpdateProjectFramework = "astro"
	UpdateProjectFrameworkHexo           UpdateProjectFramework = "hexo"
	UpdateProjectFrameworkEleventy       UpdateProjectFramework = "eleventy"
	UpdateProjectFrameworkDocusaurus2    UpdateProjectFramework = "docusaurus-2"
	UpdateProjectFrameworkDocusaurus     UpdateProjectFramework = "docusaurus"
	UpdateProjectFrameworkPreact         UpdateProjectFramework = "preact"
	UpdateProjectFrameworkSolidstart1    UpdateProjectFramework = "solidstart-1"
	UpdateProjectFrameworkSolidstart     UpdateProjectFramework = "solidstart"
	UpdateProjectFrameworkDojo           UpdateProjectFramework = "dojo"
	UpdateProjectFrameworkEmber          UpdateProjectFramework = "ember"
	UpdateProjectFrameworkVue            UpdateProjectFramework = "vue"
	UpdateProjectFrameworkScully         UpdateProjectFramework = "scully"
	UpdateProjectFrameworkIonicAngular   UpdateProjectFramework = "ionic-angular"
	UpdateProjectFrameworkAngular        UpdateProjectFramework = "angular"
	UpdateProjectFrameworkPolymer        UpdateProjectFramework = "polymer"
	UpdateProjectFrameworkSvelte         UpdateProjectFramework = "svelte"
	UpdateProjectFrameworkSveltekit      UpdateProjectFramework = "sveltekit"
	UpdateProjectFrameworkSveltekit1     UpdateProjectFramework = "sveltekit-1"
	UpdateProjectFrameworkIonicReact     UpdateProjectFramework = "ionic-react"
	UpdateProjectFrameworkCreateReactApp UpdateProjectFramework = "create-react-app"
	UpdateProjectFrameworkGridsome       UpdateProjectFramework = "gridsome"
	UpdateProjectFrameworkUmijs          UpdateProjectFramework = "umijs"
	UpdateProjectFrameworkSapper         UpdateProjectFramework = "sapper"
	UpdateProjectFrameworkSaber          UpdateProjectFramework = "saber"
	UpdateProjectFrameworkStencil        UpdateProjectFramework = "stencil"
	UpdateProjectFrameworkNuxtjs         UpdateProjectFramework = "nuxtjs"
	UpdateProjectFrameworkRedwoodjs      UpdateProjectFramework = "redwoodjs"
	UpdateProjectFrameworkHugo           UpdateProjectFramework = "hugo"
	UpdateProjectFrameworkJekyll         UpdateProjectFramework = "jekyll"
	UpdateProjectFrameworkBrunch         UpdateProjectFramework = "brunch"
	UpdateProjectFrameworkMiddleman      UpdateProjectFramework = "middleman"
	UpdateProjectFrameworkZola           UpdateProjectFramework = "zola"
	UpdateProjectFrameworkHydrogen       UpdateProjectFramework = "hydrogen"
	UpdateProjectFrameworkVite           UpdateProjectFramework = "vite"
	UpdateProjectFrameworkVitepress      UpdateProjectFramework = "vitepress"
	UpdateProjectFrameworkVuepress       UpdateProjectFramework = "vuepress"
	UpdateProjectFrameworkParcel         UpdateProjectFramework = "parcel"
	UpdateProjectFrameworkFasthtml       UpdateProjectFramework = "fasthtml"
	UpdateProjectFrameworkSanityV3       UpdateProjectFramework = "sanity-v3"
	UpdateProjectFrameworkSanity         UpdateProjectFramework = "sanity"
	UpdateProjectFrameworkStorybook      UpdateProjectFramework = "storybook"
)

func (e UpdateProjectFramework) ToPointer() *UpdateProjectFramework {
	return &e
}
func (e *UpdateProjectFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectFramework: %v", v)
	}
}

type UpdateProjectNodeVersion string

const (
	UpdateProjectNodeVersionTwentyTwoX UpdateProjectNodeVersion = "22.x"
	UpdateProjectNodeVersionTwentyX    UpdateProjectNodeVersion = "20.x"
	UpdateProjectNodeVersionEighteenX  UpdateProjectNodeVersion = "18.x"
	UpdateProjectNodeVersionSixteenX   UpdateProjectNodeVersion = "16.x"
	UpdateProjectNodeVersionFourteenX  UpdateProjectNodeVersion = "14.x"
	UpdateProjectNodeVersionTwelveX    UpdateProjectNodeVersion = "12.x"
	UpdateProjectNodeVersionTenX       UpdateProjectNodeVersion = "10.x"
)

func (e UpdateProjectNodeVersion) ToPointer() *UpdateProjectNodeVersion {
	return &e
}
func (e *UpdateProjectNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = UpdateProjectNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectNodeVersion: %v", v)
	}
}

// UpdateProjectIssuerMode - team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
type UpdateProjectIssuerMode string

const (
	UpdateProjectIssuerModeTeam   UpdateProjectIssuerMode = "team"
	UpdateProjectIssuerModeGlobal UpdateProjectIssuerMode = "global"
)

func (e UpdateProjectIssuerMode) ToPointer() *UpdateProjectIssuerMode {
	return &e
}
func (e *UpdateProjectIssuerMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = UpdateProjectIssuerMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectIssuerMode: %v", v)
	}
}

// UpdateProjectOidcTokenConfig - OpenID Connect JSON Web Token generation configuration.
type UpdateProjectOidcTokenConfig struct {
	// Whether or not to generate OpenID Connect JSON Web Tokens.
	Enabled bool `json:"enabled"`
	// team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
	IssuerMode *UpdateProjectIssuerMode `default:"global" json:"issuerMode"`
}

func (u UpdateProjectOidcTokenConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateProjectOidcTokenConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateProjectOidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *UpdateProjectOidcTokenConfig) GetIssuerMode() *UpdateProjectIssuerMode {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

// DeploymentType - Specify if the password will apply to every Deployment Target or just Preview
type DeploymentType string

const (
	DeploymentTypeAll                              DeploymentType = "all"
	DeploymentTypePreview                          DeploymentType = "preview"
	DeploymentTypeProdDeploymentUrlsAndAllPreviews DeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e DeploymentType) ToPointer() *DeploymentType {
	return &e
}
func (e *DeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = DeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeploymentType: %v", v)
	}
}

// PasswordProtection - Allows to protect project deployments with a password
type PasswordProtection struct {
	// Specify if the password will apply to every Deployment Target or just Preview
	DeploymentType DeploymentType `json:"deploymentType"`
	// The password that will be used to protect Project Deployments
	Password *string `json:"password,omitempty"`
}

func (o *PasswordProtection) GetDeploymentType() DeploymentType {
	if o == nil {
		return DeploymentType("")
	}
	return o.DeploymentType
}

func (o *PasswordProtection) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

// UpdateProjectDeploymentType - Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
type UpdateProjectDeploymentType string

const (
	UpdateProjectDeploymentTypeAll                              UpdateProjectDeploymentType = "all"
	UpdateProjectDeploymentTypePreview                          UpdateProjectDeploymentType = "preview"
	UpdateProjectDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectDeploymentType) ToPointer() *UpdateProjectDeploymentType {
	return &e
}
func (e *UpdateProjectDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDeploymentType: %v", v)
	}
}

// SsoProtection - Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
type SsoProtection struct {
	// Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
	DeploymentType *UpdateProjectDeploymentType `default:"preview" json:"deploymentType"`
}

func (s SsoProtection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SsoProtection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SsoProtection) GetDeploymentType() *UpdateProjectDeploymentType {
	if o == nil {
		return nil
	}
	return o.DeploymentType
}

// UpdateProjectProjectsDeploymentType - Specify if the Trusted IPs will apply to every Deployment Target or just Preview
type UpdateProjectProjectsDeploymentType string

const (
	UpdateProjectProjectsDeploymentTypeAll                              UpdateProjectProjectsDeploymentType = "all"
	UpdateProjectProjectsDeploymentTypePreview                          UpdateProjectProjectsDeploymentType = "preview"
	UpdateProjectProjectsDeploymentTypeProduction                       UpdateProjectProjectsDeploymentType = "production"
	UpdateProjectProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectProjectsDeploymentType) ToPointer() *UpdateProjectProjectsDeploymentType {
	return &e
}
func (e *UpdateProjectProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "production":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsDeploymentType: %v", v)
	}
}

type Addresses struct {
	// The IP addresses that are allowlisted. Supports IPv4 addresses and CIDR notations. IPv6 is not supported
	Value string `json:"value"`
	// An optional note explaining what the IP address or subnet is used for
	Note *string `json:"note,omitempty"`
}

func (o *Addresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Addresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

// ProtectionMode - exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
type ProtectionMode string

const (
	ProtectionModeExclusive  ProtectionMode = "exclusive"
	ProtectionModeAdditional ProtectionMode = "additional"
)

func (e ProtectionMode) ToPointer() *ProtectionMode {
	return &e
}
func (e *ProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exclusive":
		fallthrough
	case "additional":
		*e = ProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProtectionMode: %v", v)
	}
}

// TrustedIps - Restricts access to deployments based on the incoming request IP address
type TrustedIps struct {
	// Specify if the Trusted IPs will apply to every Deployment Target or just Preview
	DeploymentType UpdateProjectProjectsDeploymentType `json:"deploymentType"`
	Addresses      []Addresses                         `json:"addresses"`
	// exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
	ProtectionMode ProtectionMode `json:"protectionMode"`
}

func (o *TrustedIps) GetDeploymentType() UpdateProjectProjectsDeploymentType {
	if o == nil {
		return UpdateProjectProjectsDeploymentType("")
	}
	return o.DeploymentType
}

func (o *TrustedIps) GetAddresses() []Addresses {
	if o == nil {
		return []Addresses{}
	}
	return o.Addresses
}

func (o *TrustedIps) GetProtectionMode() ProtectionMode {
	if o == nil {
		return ProtectionMode("")
	}
	return o.ProtectionMode
}

type Paths struct {
	// The regex path that should not be protected by Deployment Protection
	Value string `json:"value"`
}

func (o *Paths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// OptionsAllowlist - Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
type OptionsAllowlist struct {
	Paths []Paths `json:"paths"`
}

func (o *OptionsAllowlist) GetPaths() []Paths {
	if o == nil {
		return []Paths{}
	}
	return o.Paths
}

type UpdateProjectRequestBody struct {
	AutoExposeSystemEnvs             *bool   `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains          *bool   `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// Specifies whether customer support can see git source for a deployment
	CustomerSupportCodeVisibility *bool `json:"customerSupportCodeVisibility,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand       *string `json:"devCommand,omitempty"`
	DirectoryListing *bool   `json:"directoryListing,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *UpdateProjectFramework `json:"framework,omitempty"`
	// Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
	GitForkProtection *bool `json:"gitForkProtection,omitempty"`
	// Specifies whether Git LFS is enabled for this project.
	GitLFS *bool `json:"gitLFS,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The desired name for the project
	Name        *string                   `json:"name,omitempty"`
	NodeVersion *UpdateProjectNodeVersion `json:"nodeVersion,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// Specifies whether preview deployments are disabled for this project.
	PreviewDeploymentsDisabled *bool `json:"previewDeploymentsDisabled,omitempty"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not
	PublicSource *bool `json:"publicSource,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Specifies whether Zero Config Failover is enabled for this project.
	ServerlessFunctionZeroConfigFailover *bool `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	// Deployments created before this absolute datetime have Skew Protection disabled. Value is in milliseconds since epoch to match \"createdAt\" fields.
	SkewProtectionBoundaryAt *int64 `json:"skewProtectionBoundaryAt,omitempty"`
	// Deployments created before this rolling window have Skew Protection disabled. Value is in seconds to match \"revalidate\" fields.
	SkewProtectionMaxAge *int64 `json:"skewProtectionMaxAge,omitempty"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// Indicates if there are source files outside of the root directory
	SourceFilesOutsideRootDirectory *bool `json:"sourceFilesOutsideRootDirectory,omitempty"`
	// Opt-in to preview toolbar on the project level
	EnablePreviewFeedback *bool `json:"enablePreviewFeedback,omitempty"`
	// Opt-in to production toolbar on the project level
	EnableProductionFeedback *bool `json:"enableProductionFeedback,omitempty"`
	// Opt-in to skip deployments when there are no changes to the root directory and its dependencies
	EnableAffectedProjectsDeployments *bool `json:"enableAffectedProjectsDeployments,omitempty"`
	// OpenID Connect JSON Web Token generation configuration.
	OidcTokenConfig *UpdateProjectOidcTokenConfig `json:"oidcTokenConfig,omitempty"`
	// Allows to protect project deployments with a password
	PasswordProtection *PasswordProtection `json:"passwordProtection,omitempty"`
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
	SsoProtection *SsoProtection `json:"ssoProtection,omitempty"`
	// Restricts access to deployments based on the incoming request IP address
	TrustedIps *TrustedIps `json:"trustedIps,omitempty"`
	// Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
	OptionsAllowlist *OptionsAllowlist `json:"optionsAllowlist,omitempty"`
}

func (o *UpdateProjectRequestBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectRequestBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectRequestBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectRequestBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectRequestBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectRequestBody) GetDirectoryListing() *bool {
	if o == nil {
		return nil
	}
	return o.DirectoryListing
}

func (o *UpdateProjectRequestBody) GetFramework() *UpdateProjectFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectRequestBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectRequestBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectRequestBody) GetNodeVersion() *UpdateProjectNodeVersion {
	if o == nil {
		return nil
	}
	return o.NodeVersion
}

func (o *UpdateProjectRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectRequestBody) GetPreviewDeploymentsDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentsDisabled
}

func (o *UpdateProjectRequestBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectRequestBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectRequestBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectRequestBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *UpdateProjectRequestBody) GetSkewProtectionBoundaryAt() *int64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *UpdateProjectRequestBody) GetSkewProtectionMaxAge() *int64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *UpdateProjectRequestBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectRequestBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectRequestBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectRequestBody) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *UpdateProjectRequestBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *UpdateProjectRequestBody) GetOidcTokenConfig() *UpdateProjectOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *UpdateProjectRequestBody) GetPasswordProtection() *PasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectRequestBody) GetSsoProtection() *SsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectRequestBody) GetTrustedIps() *TrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectRequestBody) GetOptionsAllowlist() *OptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

type UpdateProjectRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                  `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateProjectRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateProjectRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectRequest) GetRequestBody() UpdateProjectRequestBody {
	if o == nil {
		return UpdateProjectRequestBody{}
	}
	return o.RequestBody
}

type UpdateProjectAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *UpdateProjectAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *UpdateProjectAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *UpdateProjectAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *UpdateProjectAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type UpdateProjectSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *UpdateProjectSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *UpdateProjectSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type UpdateProjectDefinitions struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *UpdateProjectDefinitions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *UpdateProjectDefinitions) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *UpdateProjectDefinitions) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type UpdateProjectCrons struct {
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	UpdatedAt  float64  `json:"updatedAt"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string                    `json:"deploymentId"`
	Definitions  []UpdateProjectDefinitions `json:"definitions"`
}

func (o *UpdateProjectCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateProjectCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *UpdateProjectCrons) GetDefinitions() []UpdateProjectDefinitions {
	if o == nil {
		return []UpdateProjectDefinitions{}
	}
	return o.Definitions
}

type UpdateProjectDataCache struct {
	UserDisabled     bool     `json:"userDisabled"`
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
}

func (o *UpdateProjectDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

func (o *UpdateProjectDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *UpdateProjectDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

type UpdateProjectDeploymentExpiration struct {
	ExpirationDays           *float64 `json:"expirationDays,omitempty"`
	ExpirationDaysProduction *float64 `json:"expirationDaysProduction,omitempty"`
	ExpirationDaysCanceled   *float64 `json:"expirationDaysCanceled,omitempty"`
	ExpirationDaysErrored    *float64 `json:"expirationDaysErrored,omitempty"`
	DeploymentsToKeep        *float64 `json:"deploymentsToKeep,omitempty"`
}

func (o *UpdateProjectDeploymentExpiration) GetExpirationDays() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDays
}

func (o *UpdateProjectDeploymentExpiration) GetExpirationDaysProduction() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysProduction
}

func (o *UpdateProjectDeploymentExpiration) GetExpirationDaysCanceled() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysCanceled
}

func (o *UpdateProjectDeploymentExpiration) GetExpirationDaysErrored() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysErrored
}

func (o *UpdateProjectDeploymentExpiration) GetDeploymentsToKeep() *float64 {
	if o == nil {
		return nil
	}
	return o.DeploymentsToKeep
}

type UpdateProjectTarget2 string

const (
	UpdateProjectTarget2Production  UpdateProjectTarget2 = "production"
	UpdateProjectTarget2Preview     UpdateProjectTarget2 = "preview"
	UpdateProjectTarget2Development UpdateProjectTarget2 = "development"
)

func (e UpdateProjectTarget2) ToPointer() *UpdateProjectTarget2 {
	return &e
}
func (e *UpdateProjectTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTarget2: %v", v)
	}
}

type UpdateProjectTargetType string

const (
	UpdateProjectTargetTypeArrayOfStr           UpdateProjectTargetType = "arrayOfStr"
	UpdateProjectTargetTypeUpdateProjectTarget2 UpdateProjectTargetType = "updateProject_target_2"
)

type UpdateProjectTarget struct {
	ArrayOfStr           []string
	UpdateProjectTarget2 *UpdateProjectTarget2

	Type UpdateProjectTargetType
}

func CreateUpdateProjectTargetArrayOfStr(arrayOfStr []string) UpdateProjectTarget {
	typ := UpdateProjectTargetTypeArrayOfStr

	return UpdateProjectTarget{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateUpdateProjectTargetUpdateProjectTarget2(updateProjectTarget2 UpdateProjectTarget2) UpdateProjectTarget {
	typ := UpdateProjectTargetTypeUpdateProjectTarget2

	return UpdateProjectTarget{
		UpdateProjectTarget2: &updateProjectTarget2,
		Type:                 typ,
	}
}

func (u *UpdateProjectTarget) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateProjectTargetTypeArrayOfStr
		return nil
	}

	var updateProjectTarget2 UpdateProjectTarget2 = UpdateProjectTarget2("")
	if err := utils.UnmarshalJSON(data, &updateProjectTarget2, "", true, true); err == nil {
		u.UpdateProjectTarget2 = &updateProjectTarget2
		u.Type = UpdateProjectTargetTypeUpdateProjectTarget2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectTarget", string(data))
}

func (u UpdateProjectTarget) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.UpdateProjectTarget2 != nil {
		return utils.MarshalJSON(u.UpdateProjectTarget2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectTarget: all fields are null")
}

type UpdateProjectType string

const (
	UpdateProjectTypeSystem    UpdateProjectType = "system"
	UpdateProjectTypeEncrypted UpdateProjectType = "encrypted"
	UpdateProjectTypePlain     UpdateProjectType = "plain"
	UpdateProjectTypeSensitive UpdateProjectType = "sensitive"
	UpdateProjectTypeSecret    UpdateProjectType = "secret"
)

func (e UpdateProjectType) ToPointer() *UpdateProjectType {
	return &e
}
func (e *UpdateProjectType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = UpdateProjectType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectType: %v", v)
	}
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15TypeFlagsConnectionString UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type = "flags-connection-string"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type: %v", v)
	}
}

type UpdateProjectContentHint15 struct {
	Type      UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type `json:"type"`
	ProjectID string                                                                          `json:"projectId"`
}

func (o *UpdateProjectContentHint15) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv15Type("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint15) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14TypeIntegrationStoreSecret UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type = "integration-store-secret"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type: %v", v)
	}
}

type UpdateProjectContentHint14 struct {
	Type                       UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type `json:"type"`
	StoreID                    string                                                                          `json:"storeId"`
	IntegrationID              string                                                                          `json:"integrationId"`
	IntegrationProductID       string                                                                          `json:"integrationProductId"`
	IntegrationConfigurationID string                                                                          `json:"integrationConfigurationId"`
}

func (o *UpdateProjectContentHint14) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint14) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectContentHint14) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateProjectContentHint14) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *UpdateProjectContentHint14) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13TypePostgresURLNoSsl UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type = "postgres-url-no-ssl"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type: %v", v)
	}
}

type UpdateProjectContentHint13 struct {
	Type    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *UpdateProjectContentHint13) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint13) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12TypePostgresDatabase UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type = "postgres-database"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type: %v", v)
	}
}

type UpdateProjectContentHint12 struct {
	Type    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *UpdateProjectContentHint12) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint12) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11TypePostgresPassword UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type = "postgres-password"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type: %v", v)
	}
}

type UpdateProjectContentHint11 struct {
	Type    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *UpdateProjectContentHint11) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint11) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10TypePostgresHost UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type = "postgres-host"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type: %v", v)
	}
}

type UpdateProjectContentHint10 struct {
	Type    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type `json:"type"`
	StoreID string                                                                          `json:"storeId"`
}

func (o *UpdateProjectContentHint10) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint10) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9TypePostgresUser UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type = "postgres-user"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type: %v", v)
	}
}

type UpdateProjectContentHint9 struct {
	Type    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *UpdateProjectContentHint9) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint9) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8TypePostgresPrismaURL UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type = "postgres-prisma-url"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type: %v", v)
	}
}

type UpdateProjectContentHint8 struct {
	Type    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type `json:"type"`
	StoreID string                                                                         `json:"storeId"`
}

func (o *UpdateProjectContentHint8) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint8) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvTypePostgresURLNonPooling UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType = "postgres-url-non-pooling"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

type UpdateProjectContentHint7 struct {
	Type    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
	StoreID string                                                                        `json:"storeId"`
}

func (o *UpdateProjectContentHint7) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint7) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyTypePostgresURL UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType = "postgres-url"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type UpdateProjectContentHint6 struct {
	Type    UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	StoreID string                                                                     `json:"storeId"`
}

func (o *UpdateProjectContentHint6) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint6) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponse200ApplicationJSONType string

const (
	UpdateProjectContentHintProjectsResponse200ApplicationJSONTypeBlobReadWriteToken UpdateProjectContentHintProjectsResponse200ApplicationJSONType = "blob-read-write-token"
)

func (e UpdateProjectContentHintProjectsResponse200ApplicationJSONType) ToPointer() *UpdateProjectContentHintProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = UpdateProjectContentHintProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type UpdateProjectContentHint5 struct {
	Type    UpdateProjectContentHintProjectsResponse200ApplicationJSONType `json:"type"`
	StoreID string                                                         `json:"storeId"`
}

func (o *UpdateProjectContentHint5) GetType() UpdateProjectContentHintProjectsResponse200ApplicationJSONType {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint5) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponse200Type string

const (
	UpdateProjectContentHintProjectsResponse200TypeRedisRestAPIReadOnlyToken UpdateProjectContentHintProjectsResponse200Type = "redis-rest-api-read-only-token"
)

func (e UpdateProjectContentHintProjectsResponse200Type) ToPointer() *UpdateProjectContentHintProjectsResponse200Type {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = UpdateProjectContentHintProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponse200Type: %v", v)
	}
}

type UpdateProjectContentHint4 struct {
	Type    UpdateProjectContentHintProjectsResponse200Type `json:"type"`
	StoreID string                                          `json:"storeId"`
}

func (o *UpdateProjectContentHint4) GetType() UpdateProjectContentHintProjectsResponse200Type {
	if o == nil {
		return UpdateProjectContentHintProjectsResponse200Type("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint4) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsResponseType string

const (
	UpdateProjectContentHintProjectsResponseTypeRedisRestAPIToken UpdateProjectContentHintProjectsResponseType = "redis-rest-api-token"
)

func (e UpdateProjectContentHintProjectsResponseType) ToPointer() *UpdateProjectContentHintProjectsResponseType {
	return &e
}
func (e *UpdateProjectContentHintProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = UpdateProjectContentHintProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsResponseType: %v", v)
	}
}

type UpdateProjectContentHint3 struct {
	Type    UpdateProjectContentHintProjectsResponseType `json:"type"`
	StoreID string                                       `json:"storeId"`
}

func (o *UpdateProjectContentHint3) GetType() UpdateProjectContentHintProjectsResponseType {
	if o == nil {
		return UpdateProjectContentHintProjectsResponseType("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintProjectsType string

const (
	UpdateProjectContentHintProjectsTypeRedisRestAPIURL UpdateProjectContentHintProjectsType = "redis-rest-api-url"
)

func (e UpdateProjectContentHintProjectsType) ToPointer() *UpdateProjectContentHintProjectsType {
	return &e
}
func (e *UpdateProjectContentHintProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = UpdateProjectContentHintProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintProjectsType: %v", v)
	}
}

type UpdateProjectContentHint2 struct {
	Type    UpdateProjectContentHintProjectsType `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *UpdateProjectContentHint2) GetType() UpdateProjectContentHintProjectsType {
	if o == nil {
		return UpdateProjectContentHintProjectsType("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintType string

const (
	UpdateProjectContentHintTypeRedisURL UpdateProjectContentHintType = "redis-url"
)

func (e UpdateProjectContentHintType) ToPointer() *UpdateProjectContentHintType {
	return &e
}
func (e *UpdateProjectContentHintType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = UpdateProjectContentHintType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectContentHintType: %v", v)
	}
}

type UpdateProjectContentHint1 struct {
	Type    UpdateProjectContentHintType `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *UpdateProjectContentHint1) GetType() UpdateProjectContentHintType {
	if o == nil {
		return UpdateProjectContentHintType("")
	}
	return o.Type
}

func (o *UpdateProjectContentHint1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintUnionType string

const (
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint1  UpdateProjectContentHintUnionType = "updateProject_contentHint_1"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint2  UpdateProjectContentHintUnionType = "updateProject_contentHint_2"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint3  UpdateProjectContentHintUnionType = "updateProject_contentHint_3"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint4  UpdateProjectContentHintUnionType = "updateProject_contentHint_4"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint5  UpdateProjectContentHintUnionType = "updateProject_contentHint_5"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint6  UpdateProjectContentHintUnionType = "updateProject_contentHint_6"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint7  UpdateProjectContentHintUnionType = "updateProject_contentHint_7"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint8  UpdateProjectContentHintUnionType = "updateProject_contentHint_8"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint9  UpdateProjectContentHintUnionType = "updateProject_contentHint_9"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint10 UpdateProjectContentHintUnionType = "updateProject_contentHint_10"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint11 UpdateProjectContentHintUnionType = "updateProject_contentHint_11"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint12 UpdateProjectContentHintUnionType = "updateProject_contentHint_12"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint13 UpdateProjectContentHintUnionType = "updateProject_contentHint_13"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint14 UpdateProjectContentHintUnionType = "updateProject_contentHint_14"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHint15 UpdateProjectContentHintUnionType = "updateProject_contentHint_15"
)

type UpdateProjectContentHint struct {
	UpdateProjectContentHint1  *UpdateProjectContentHint1
	UpdateProjectContentHint2  *UpdateProjectContentHint2
	UpdateProjectContentHint3  *UpdateProjectContentHint3
	UpdateProjectContentHint4  *UpdateProjectContentHint4
	UpdateProjectContentHint5  *UpdateProjectContentHint5
	UpdateProjectContentHint6  *UpdateProjectContentHint6
	UpdateProjectContentHint7  *UpdateProjectContentHint7
	UpdateProjectContentHint8  *UpdateProjectContentHint8
	UpdateProjectContentHint9  *UpdateProjectContentHint9
	UpdateProjectContentHint10 *UpdateProjectContentHint10
	UpdateProjectContentHint11 *UpdateProjectContentHint11
	UpdateProjectContentHint12 *UpdateProjectContentHint12
	UpdateProjectContentHint13 *UpdateProjectContentHint13
	UpdateProjectContentHint14 *UpdateProjectContentHint14
	UpdateProjectContentHint15 *UpdateProjectContentHint15

	Type UpdateProjectContentHintUnionType
}

func CreateUpdateProjectContentHintUpdateProjectContentHint1(updateProjectContentHint1 UpdateProjectContentHint1) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint1

	return UpdateProjectContentHint{
		UpdateProjectContentHint1: &updateProjectContentHint1,
		Type:                      typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint2(updateProjectContentHint2 UpdateProjectContentHint2) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint2

	return UpdateProjectContentHint{
		UpdateProjectContentHint2: &updateProjectContentHint2,
		Type:                      typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint3(updateProjectContentHint3 UpdateProjectContentHint3) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint3

	return UpdateProjectContentHint{
		UpdateProjectContentHint3: &updateProjectContentHint3,
		Type:                      typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint4(updateProjectContentHint4 UpdateProjectContentHint4) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint4

	return UpdateProjectContentHint{
		UpdateProjectContentHint4: &updateProjectContentHint4,
		Type:                      typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint5(updateProjectContentHint5 UpdateProjectContentHint5) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint5

	return UpdateProjectContentHint{
		UpdateProjectContentHint5: &updateProjectContentHint5,
		Type:                      typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint6(updateProjectContentHint6 UpdateProjectContentHint6) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint6

	return UpdateProjectContentHint{
		UpdateProjectContentHint6: &updateProjectContentHint6,
		Type:                      typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint7(updateProjectContentHint7 UpdateProjectContentHint7) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint7

	return UpdateProjectContentHint{
		UpdateProjectContentHint7: &updateProjectContentHint7,
		Type:                      typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint8(updateProjectContentHint8 UpdateProjectContentHint8) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint8

	return UpdateProjectContentHint{
		UpdateProjectContentHint8: &updateProjectContentHint8,
		Type:                      typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint9(updateProjectContentHint9 UpdateProjectContentHint9) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint9

	return UpdateProjectContentHint{
		UpdateProjectContentHint9: &updateProjectContentHint9,
		Type:                      typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint10(updateProjectContentHint10 UpdateProjectContentHint10) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint10

	return UpdateProjectContentHint{
		UpdateProjectContentHint10: &updateProjectContentHint10,
		Type:                       typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint11(updateProjectContentHint11 UpdateProjectContentHint11) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint11

	return UpdateProjectContentHint{
		UpdateProjectContentHint11: &updateProjectContentHint11,
		Type:                       typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint12(updateProjectContentHint12 UpdateProjectContentHint12) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint12

	return UpdateProjectContentHint{
		UpdateProjectContentHint12: &updateProjectContentHint12,
		Type:                       typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint13(updateProjectContentHint13 UpdateProjectContentHint13) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint13

	return UpdateProjectContentHint{
		UpdateProjectContentHint13: &updateProjectContentHint13,
		Type:                       typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint14(updateProjectContentHint14 UpdateProjectContentHint14) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint14

	return UpdateProjectContentHint{
		UpdateProjectContentHint14: &updateProjectContentHint14,
		Type:                       typ,
	}
}

func CreateUpdateProjectContentHintUpdateProjectContentHint15(updateProjectContentHint15 UpdateProjectContentHint15) UpdateProjectContentHint {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHint15

	return UpdateProjectContentHint{
		UpdateProjectContentHint15: &updateProjectContentHint15,
		Type:                       typ,
	}
}

func (u *UpdateProjectContentHint) UnmarshalJSON(data []byte) error {

	var updateProjectContentHint7 UpdateProjectContentHint7 = UpdateProjectContentHint7{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint7, "", true, true); err == nil {
		u.UpdateProjectContentHint7 = &updateProjectContentHint7
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint7
		return nil
	}

	var updateProjectContentHint11 UpdateProjectContentHint11 = UpdateProjectContentHint11{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint11, "", true, true); err == nil {
		u.UpdateProjectContentHint11 = &updateProjectContentHint11
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint11
		return nil
	}

	var updateProjectContentHint3 UpdateProjectContentHint3 = UpdateProjectContentHint3{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint3, "", true, true); err == nil {
		u.UpdateProjectContentHint3 = &updateProjectContentHint3
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint3
		return nil
	}

	var updateProjectContentHint4 UpdateProjectContentHint4 = UpdateProjectContentHint4{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint4, "", true, true); err == nil {
		u.UpdateProjectContentHint4 = &updateProjectContentHint4
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint4
		return nil
	}

	var updateProjectContentHint5 UpdateProjectContentHint5 = UpdateProjectContentHint5{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint5, "", true, true); err == nil {
		u.UpdateProjectContentHint5 = &updateProjectContentHint5
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint5
		return nil
	}

	var updateProjectContentHint6 UpdateProjectContentHint6 = UpdateProjectContentHint6{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint6, "", true, true); err == nil {
		u.UpdateProjectContentHint6 = &updateProjectContentHint6
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint6
		return nil
	}

	var updateProjectContentHint2 UpdateProjectContentHint2 = UpdateProjectContentHint2{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint2, "", true, true); err == nil {
		u.UpdateProjectContentHint2 = &updateProjectContentHint2
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint2
		return nil
	}

	var updateProjectContentHint9 UpdateProjectContentHint9 = UpdateProjectContentHint9{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint9, "", true, true); err == nil {
		u.UpdateProjectContentHint9 = &updateProjectContentHint9
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint9
		return nil
	}

	var updateProjectContentHint1 UpdateProjectContentHint1 = UpdateProjectContentHint1{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint1, "", true, true); err == nil {
		u.UpdateProjectContentHint1 = &updateProjectContentHint1
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint1
		return nil
	}

	var updateProjectContentHint10 UpdateProjectContentHint10 = UpdateProjectContentHint10{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint10, "", true, true); err == nil {
		u.UpdateProjectContentHint10 = &updateProjectContentHint10
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint10
		return nil
	}

	var updateProjectContentHint8 UpdateProjectContentHint8 = UpdateProjectContentHint8{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint8, "", true, true); err == nil {
		u.UpdateProjectContentHint8 = &updateProjectContentHint8
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint8
		return nil
	}

	var updateProjectContentHint12 UpdateProjectContentHint12 = UpdateProjectContentHint12{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint12, "", true, true); err == nil {
		u.UpdateProjectContentHint12 = &updateProjectContentHint12
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint12
		return nil
	}

	var updateProjectContentHint13 UpdateProjectContentHint13 = UpdateProjectContentHint13{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint13, "", true, true); err == nil {
		u.UpdateProjectContentHint13 = &updateProjectContentHint13
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint13
		return nil
	}

	var updateProjectContentHint15 UpdateProjectContentHint15 = UpdateProjectContentHint15{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint15, "", true, true); err == nil {
		u.UpdateProjectContentHint15 = &updateProjectContentHint15
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint15
		return nil
	}

	var updateProjectContentHint14 UpdateProjectContentHint14 = UpdateProjectContentHint14{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHint14, "", true, true); err == nil {
		u.UpdateProjectContentHint14 = &updateProjectContentHint14
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHint14
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectContentHint", string(data))
}

func (u UpdateProjectContentHint) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectContentHint1 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint1, "", true)
	}

	if u.UpdateProjectContentHint2 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint2, "", true)
	}

	if u.UpdateProjectContentHint3 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint3, "", true)
	}

	if u.UpdateProjectContentHint4 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint4, "", true)
	}

	if u.UpdateProjectContentHint5 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint5, "", true)
	}

	if u.UpdateProjectContentHint6 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint6, "", true)
	}

	if u.UpdateProjectContentHint7 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint7, "", true)
	}

	if u.UpdateProjectContentHint8 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint8, "", true)
	}

	if u.UpdateProjectContentHint9 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint9, "", true)
	}

	if u.UpdateProjectContentHint10 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint10, "", true)
	}

	if u.UpdateProjectContentHint11 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint11, "", true)
	}

	if u.UpdateProjectContentHint12 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint12, "", true)
	}

	if u.UpdateProjectContentHint13 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint13, "", true)
	}

	if u.UpdateProjectContentHint14 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint14, "", true)
	}

	if u.UpdateProjectContentHint15 != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHint15, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectContentHint: all fields are null")
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvTypeFlagsSecret UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType = "flags-secret"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType: %v", v)
	}
}

// UpdateProjectInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type UpdateProjectInternalContentHint struct {
	Type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *UpdateProjectInternalContentHint) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyEnvType("")
	}
	return o.Type
}

func (o *UpdateProjectInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type UpdateProjectEnv struct {
	Target *UpdateProjectTarget `json:"target,omitempty"`
	Type   UpdateProjectType    `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                   `json:"sunsetSecretId,omitempty"`
	ID                *string                   `json:"id,omitempty"`
	Key               string                    `json:"key"`
	Value             string                    `json:"value"`
	ConfigurationID   *string                   `json:"configurationId,omitempty"`
	CreatedAt         *float64                  `json:"createdAt,omitempty"`
	UpdatedAt         *float64                  `json:"updatedAt,omitempty"`
	CreatedBy         *string                   `json:"createdBy,omitempty"`
	UpdatedBy         *string                   `json:"updatedBy,omitempty"`
	GitBranch         *string                   `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                   `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                   `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *UpdateProjectContentHint `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint *UpdateProjectInternalContentHint `json:"internalContentHint,omitempty"`
	// Whether `value` and `vsmValue` are decrypted.
	Decrypted            *bool    `json:"decrypted,omitempty"`
	Comment              *string  `json:"comment,omitempty"`
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	VsmValue             *string  `json:"vsmValue,omitempty"`
}

func (o *UpdateProjectEnv) GetTarget() *UpdateProjectTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectEnv) GetType() UpdateProjectType {
	if o == nil {
		return UpdateProjectType("")
	}
	return o.Type
}

func (o *UpdateProjectEnv) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *UpdateProjectEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateProjectEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *UpdateProjectEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateProjectEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *UpdateProjectEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *UpdateProjectEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *UpdateProjectEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateProjectEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *UpdateProjectEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *UpdateProjectEnv) GetContentHint() *UpdateProjectContentHint {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *UpdateProjectEnv) GetInternalContentHint() *UpdateProjectInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *UpdateProjectEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *UpdateProjectEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *UpdateProjectEnv) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *UpdateProjectEnv) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

type UpdateProjectCustomEnvironments struct {
}

type UpdateProjectProjectsFramework string

const (
	UpdateProjectProjectsFrameworkBlitzjs        UpdateProjectProjectsFramework = "blitzjs"
	UpdateProjectProjectsFrameworkNextjs         UpdateProjectProjectsFramework = "nextjs"
	UpdateProjectProjectsFrameworkGatsby         UpdateProjectProjectsFramework = "gatsby"
	UpdateProjectProjectsFrameworkRemix          UpdateProjectProjectsFramework = "remix"
	UpdateProjectProjectsFrameworkReactRouter    UpdateProjectProjectsFramework = "react-router"
	UpdateProjectProjectsFrameworkAstro          UpdateProjectProjectsFramework = "astro"
	UpdateProjectProjectsFrameworkHexo           UpdateProjectProjectsFramework = "hexo"
	UpdateProjectProjectsFrameworkEleventy       UpdateProjectProjectsFramework = "eleventy"
	UpdateProjectProjectsFrameworkDocusaurus2    UpdateProjectProjectsFramework = "docusaurus-2"
	UpdateProjectProjectsFrameworkDocusaurus     UpdateProjectProjectsFramework = "docusaurus"
	UpdateProjectProjectsFrameworkPreact         UpdateProjectProjectsFramework = "preact"
	UpdateProjectProjectsFrameworkSolidstart1    UpdateProjectProjectsFramework = "solidstart-1"
	UpdateProjectProjectsFrameworkSolidstart     UpdateProjectProjectsFramework = "solidstart"
	UpdateProjectProjectsFrameworkDojo           UpdateProjectProjectsFramework = "dojo"
	UpdateProjectProjectsFrameworkEmber          UpdateProjectProjectsFramework = "ember"
	UpdateProjectProjectsFrameworkVue            UpdateProjectProjectsFramework = "vue"
	UpdateProjectProjectsFrameworkScully         UpdateProjectProjectsFramework = "scully"
	UpdateProjectProjectsFrameworkIonicAngular   UpdateProjectProjectsFramework = "ionic-angular"
	UpdateProjectProjectsFrameworkAngular        UpdateProjectProjectsFramework = "angular"
	UpdateProjectProjectsFrameworkPolymer        UpdateProjectProjectsFramework = "polymer"
	UpdateProjectProjectsFrameworkSvelte         UpdateProjectProjectsFramework = "svelte"
	UpdateProjectProjectsFrameworkSveltekit      UpdateProjectProjectsFramework = "sveltekit"
	UpdateProjectProjectsFrameworkSveltekit1     UpdateProjectProjectsFramework = "sveltekit-1"
	UpdateProjectProjectsFrameworkIonicReact     UpdateProjectProjectsFramework = "ionic-react"
	UpdateProjectProjectsFrameworkCreateReactApp UpdateProjectProjectsFramework = "create-react-app"
	UpdateProjectProjectsFrameworkGridsome       UpdateProjectProjectsFramework = "gridsome"
	UpdateProjectProjectsFrameworkUmijs          UpdateProjectProjectsFramework = "umijs"
	UpdateProjectProjectsFrameworkSapper         UpdateProjectProjectsFramework = "sapper"
	UpdateProjectProjectsFrameworkSaber          UpdateProjectProjectsFramework = "saber"
	UpdateProjectProjectsFrameworkStencil        UpdateProjectProjectsFramework = "stencil"
	UpdateProjectProjectsFrameworkNuxtjs         UpdateProjectProjectsFramework = "nuxtjs"
	UpdateProjectProjectsFrameworkRedwoodjs      UpdateProjectProjectsFramework = "redwoodjs"
	UpdateProjectProjectsFrameworkHugo           UpdateProjectProjectsFramework = "hugo"
	UpdateProjectProjectsFrameworkJekyll         UpdateProjectProjectsFramework = "jekyll"
	UpdateProjectProjectsFrameworkBrunch         UpdateProjectProjectsFramework = "brunch"
	UpdateProjectProjectsFrameworkMiddleman      UpdateProjectProjectsFramework = "middleman"
	UpdateProjectProjectsFrameworkZola           UpdateProjectProjectsFramework = "zola"
	UpdateProjectProjectsFrameworkHydrogen       UpdateProjectProjectsFramework = "hydrogen"
	UpdateProjectProjectsFrameworkVite           UpdateProjectProjectsFramework = "vite"
	UpdateProjectProjectsFrameworkVitepress      UpdateProjectProjectsFramework = "vitepress"
	UpdateProjectProjectsFrameworkVuepress       UpdateProjectProjectsFramework = "vuepress"
	UpdateProjectProjectsFrameworkParcel         UpdateProjectProjectsFramework = "parcel"
	UpdateProjectProjectsFrameworkFasthtml       UpdateProjectProjectsFramework = "fasthtml"
	UpdateProjectProjectsFrameworkSanityV3       UpdateProjectProjectsFramework = "sanity-v3"
	UpdateProjectProjectsFrameworkSanity         UpdateProjectProjectsFramework = "sanity"
	UpdateProjectProjectsFrameworkStorybook      UpdateProjectProjectsFramework = "storybook"
)

func (e UpdateProjectProjectsFramework) ToPointer() *UpdateProjectProjectsFramework {
	return &e
}
func (e *UpdateProjectProjectsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectProjectsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsFramework: %v", v)
	}
}

type UpdateProjectIPBuckets struct {
	Bucket       string   `json:"bucket"`
	SupportUntil *float64 `json:"supportUntil,omitempty"`
}

func (o *UpdateProjectIPBuckets) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *UpdateProjectIPBuckets) GetSupportUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.SupportUntil
}

type UpdateProjectAliasAssignedType string

const (
	UpdateProjectAliasAssignedTypeNumber  UpdateProjectAliasAssignedType = "number"
	UpdateProjectAliasAssignedTypeBoolean UpdateProjectAliasAssignedType = "boolean"
)

type UpdateProjectAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type UpdateProjectAliasAssignedType
}

func CreateUpdateProjectAliasAssignedNumber(number float64) UpdateProjectAliasAssigned {
	typ := UpdateProjectAliasAssignedTypeNumber

	return UpdateProjectAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateUpdateProjectAliasAssignedBoolean(boolean bool) UpdateProjectAliasAssigned {
	typ := UpdateProjectAliasAssignedTypeBoolean

	return UpdateProjectAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateProjectAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UpdateProjectAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectAliasAssigned", string(data))
}

func (u UpdateProjectAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectAliasAssigned: all fields are null")
}

type UpdateProjectAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTypeEndsWith   UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType = "endsWith"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTypeStartsWith UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType = "startsWith"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodyTypeEquals     UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType = "equals"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type UpdateProjectBranchMatcher struct {
	Type    UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Pattern string                                                          `json:"pattern"`
}

func (o *UpdateProjectBranchMatcher) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *UpdateProjectBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type UpdateProjectBuilds struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *UpdateProjectBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *UpdateProjectBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type UpdateProjectChecksConclusion string

const (
	UpdateProjectChecksConclusionSucceeded UpdateProjectChecksConclusion = "succeeded"
	UpdateProjectChecksConclusionFailed    UpdateProjectChecksConclusion = "failed"
	UpdateProjectChecksConclusionSkipped   UpdateProjectChecksConclusion = "skipped"
	UpdateProjectChecksConclusionCanceled  UpdateProjectChecksConclusion = "canceled"
)

func (e UpdateProjectChecksConclusion) ToPointer() *UpdateProjectChecksConclusion {
	return &e
}
func (e *UpdateProjectChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectChecksConclusion: %v", v)
	}
}

type UpdateProjectChecksState string

const (
	UpdateProjectChecksStateRegistered UpdateProjectChecksState = "registered"
	UpdateProjectChecksStateRunning    UpdateProjectChecksState = "running"
	UpdateProjectChecksStateCompleted  UpdateProjectChecksState = "completed"
)

func (e UpdateProjectChecksState) ToPointer() *UpdateProjectChecksState {
	return &e
}
func (e *UpdateProjectChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectChecksState: %v", v)
	}
}

type UpdateProjectCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *UpdateProjectOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *UpdateProjectOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *UpdateProjectOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *UpdateProjectOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *UpdateProjectOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *UpdateProjectOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *UpdateProjectOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *UpdateProjectOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type UpdateProjectPlan string

const (
	UpdateProjectPlanPro        UpdateProjectPlan = "pro"
	UpdateProjectPlanEnterprise UpdateProjectPlan = "enterprise"
	UpdateProjectPlanHobby      UpdateProjectPlan = "hobby"
)

func (e UpdateProjectPlan) ToPointer() *UpdateProjectPlan {
	return &e
}
func (e *UpdateProjectPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = UpdateProjectPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectPlan: %v", v)
	}
}

type UpdateProjectReadyState string

const (
	UpdateProjectReadyStateBuilding     UpdateProjectReadyState = "BUILDING"
	UpdateProjectReadyStateError        UpdateProjectReadyState = "ERROR"
	UpdateProjectReadyStateInitializing UpdateProjectReadyState = "INITIALIZING"
	UpdateProjectReadyStateQueued       UpdateProjectReadyState = "QUEUED"
	UpdateProjectReadyStateReady        UpdateProjectReadyState = "READY"
	UpdateProjectReadyStateCanceled     UpdateProjectReadyState = "CANCELED"
)

func (e UpdateProjectReadyState) ToPointer() *UpdateProjectReadyState {
	return &e
}
func (e *UpdateProjectReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectReadyState: %v", v)
	}
}

type UpdateProjectReadySubstate string

const (
	UpdateProjectReadySubstateStaged   UpdateProjectReadySubstate = "STAGED"
	UpdateProjectReadySubstatePromoted UpdateProjectReadySubstate = "PROMOTED"
)

func (e UpdateProjectReadySubstate) ToPointer() *UpdateProjectReadySubstate {
	return &e
}
func (e *UpdateProjectReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectReadySubstate: %v", v)
	}
}

type UpdateProjectProjectsType string

const (
	UpdateProjectProjectsTypeLambdas UpdateProjectProjectsType = "LAMBDAS"
)

func (e UpdateProjectProjectsType) ToPointer() *UpdateProjectProjectsType {
	return &e
}
func (e *UpdateProjectProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsType: %v", v)
	}
}

type UpdateProjectLatestDeployments struct {
	ID                     string                         `json:"id"`
	Alias                  []string                       `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                        `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                       `json:"automaticAliases,omitempty"`
	BranchMatcher          *UpdateProjectBranchMatcher    `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                       `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                          `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                        `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                        `json:"createdAt"`
	CreatedIn              string                         `json:"createdIn"`
	Creator                *UpdateProjectCreator          `json:"creator"`
	DeletedAt              *float64                       `json:"deletedAt,omitempty"`
	DeploymentHostname     string                         `json:"deploymentHostname"`
	Forced                 *bool                          `json:"forced,omitempty"`
	Name                   string                         `json:"name"`
	Meta                   map[string]string              `json:"meta,omitempty"`
	MonorepoManager        *string                        `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *UpdateProjectOidcTokenClaims  `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                       `json:"previewCommentsEnabled,omitempty"`
	Private                bool                        `json:"private"`
	ReadyAt                *float64                    `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                    `json:"requestedAt,omitempty"`
	Target                 *string                     `json:"target,omitempty"`
	TeamID                 *string                     `json:"teamId,omitempty"`
	Type                   UpdateProjectProjectsType   `json:"type"`
	URL                    string                      `json:"url"`
	UserID                 string                      `json:"userId"`
	WithCache              *bool                       `json:"withCache,omitempty"`
}

func (o *UpdateProjectLatestDeployments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectLatestDeployments) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectLatestDeployments) GetAliasAssigned() *UpdateProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectLatestDeployments) GetAliasError() *UpdateProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectLatestDeployments) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectLatestDeployments) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectLatestDeployments) GetBranchMatcher() *UpdateProjectBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *UpdateProjectLatestDeployments) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectLatestDeployments) GetBuilds() []UpdateProjectBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectLatestDeployments) GetChecksConclusion() *UpdateProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectLatestDeployments) GetChecksState() *UpdateProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectLatestDeployments) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectLatestDeployments) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectLatestDeployments) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectLatestDeployments) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectLatestDeployments) GetCreator() *UpdateProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectLatestDeployments) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *UpdateProjectLatestDeployments) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectLatestDeployments) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectLatestDeployments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectLatestDeployments) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectLatestDeployments) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectLatestDeployments) GetOidcTokenClaims() *UpdateProjectOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *UpdateProjectLatestDeployments) GetPlan() UpdateProjectPlan {
	if o == nil {
		return UpdateProjectPlan("")
	}
	return o.Plan
}

func (o *UpdateProjectLatestDeployments) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectLatestDeployments) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectLatestDeployments) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectLatestDeployments) GetReadyState() UpdateProjectReadyState {
	if o == nil {
		return UpdateProjectReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectLatestDeployments) GetReadySubstate() *UpdateProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectLatestDeployments) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectLatestDeployments) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectLatestDeployments) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectLatestDeployments) GetType() UpdateProjectProjectsType {
	if o == nil {
		return UpdateProjectProjectsType("")
	}
	return o.Type
}

func (o *UpdateProjectLatestDeployments) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectLatestDeployments) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectLatestDeployments) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectLinkProjectsResponseType string

const (
	UpdateProjectLinkProjectsResponseTypeBitbucket UpdateProjectLinkProjectsResponseType = "bitbucket"
)

func (e UpdateProjectLinkProjectsResponseType) ToPointer() *UpdateProjectLinkProjectsResponseType {
	return &e
}
func (e *UpdateProjectLinkProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = UpdateProjectLinkProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectLinkProjectsResponseType: %v", v)
	}
}

type UpdateProjectLinkProjectsResponseDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectLinkProjectsResponseDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLinkProjectsResponseDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectLinkProjectsResponseDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectLinkProjectsResponseDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectLinkProjectsResponseDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectLink3 struct {
	Name             *string                                        `json:"name,omitempty"`
	Slug             *string                                        `json:"slug,omitempty"`
	Owner            *string                                        `json:"owner,omitempty"`
	Type             *UpdateProjectLinkProjectsResponseType         `json:"type,omitempty"`
	UUID             *string                                        `json:"uuid,omitempty"`
	WorkspaceUUID    *string                                        `json:"workspaceUuid,omitempty"`
	CreatedAt        *float64                                       `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectLinkProjectsResponseDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                        `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                                       `json:"updatedAt,omitempty"`
	Sourceless       *bool                                          `json:"sourceless,omitempty"`
	ProductionBranch *string                                        `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectLink3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectLink3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectLink3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *UpdateProjectLink3) GetType() *UpdateProjectLinkProjectsResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectLink3) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *UpdateProjectLink3) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *UpdateProjectLink3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLink3) GetDeployHooks() []UpdateProjectLinkProjectsResponseDeployHooks {
	if o == nil {
		return []UpdateProjectLinkProjectsResponseDeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectLink3) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectLink3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectLink3) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectLink3) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectLinkProjectsType string

const (
	UpdateProjectLinkProjectsTypeGitlab UpdateProjectLinkProjectsType = "gitlab"
)

func (e UpdateProjectLinkProjectsType) ToPointer() *UpdateProjectLinkProjectsType {
	return &e
}
func (e *UpdateProjectLinkProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = UpdateProjectLinkProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectLinkProjectsType: %v", v)
	}
}

type UpdateProjectLinkProjectsDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectLinkProjectsDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLinkProjectsDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectLinkProjectsDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectLinkProjectsDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectLinkProjectsDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectLink2 struct {
	ProjectID                *string `json:"projectId,omitempty"`
	ProjectName              *string `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string `json:"projectNamespace,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
	ProjectOwnerID   *float64                               `json:"projectOwnerId,omitempty"`
	ProjectURL       *string                                `json:"projectUrl,omitempty"`
	Type             *UpdateProjectLinkProjectsType         `json:"type,omitempty"`
	CreatedAt        *float64                               `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectLinkProjectsDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                                `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                               `json:"updatedAt,omitempty"`
	Sourceless       *bool                                  `json:"sourceless,omitempty"`
	ProductionBranch *string                                `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectLink2) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectLink2) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *UpdateProjectLink2) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *UpdateProjectLink2) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *UpdateProjectLink2) GetProjectOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.ProjectOwnerID
}

func (o *UpdateProjectLink2) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *UpdateProjectLink2) GetType() *UpdateProjectLinkProjectsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectLink2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLink2) GetDeployHooks() []UpdateProjectLinkProjectsDeployHooks {
	if o == nil {
		return []UpdateProjectLinkProjectsDeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectLink2) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectLink2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectLink2) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectLink2) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectLinkType string

const (
	UpdateProjectLinkTypeGithub UpdateProjectLinkType = "github"
)

func (e UpdateProjectLinkType) ToPointer() *UpdateProjectLinkType {
	return &e
}
func (e *UpdateProjectLinkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = UpdateProjectLinkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectLinkType: %v", v)
	}
}

type UpdateProjectLinkDeployHooks struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectLinkDeployHooks) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLinkDeployHooks) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectLinkDeployHooks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectLinkDeployHooks) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectLinkDeployHooks) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectLink1 struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                       `json:"repoOwnerId,omitempty"`
	Repo             *string                        `json:"repo,omitempty"`
	RepoID           *float64                       `json:"repoId,omitempty"`
	Type             *UpdateProjectLinkType         `json:"type,omitempty"`
	CreatedAt        *float64                       `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectLinkDeployHooks `json:"deployHooks"`
	GitCredentialID  *string                        `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                       `json:"updatedAt,omitempty"`
	Sourceless       *bool                          `json:"sourceless,omitempty"`
	ProductionBranch *string                        `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectLink1) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *UpdateProjectLink1) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *UpdateProjectLink1) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *UpdateProjectLink1) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *UpdateProjectLink1) GetType() *UpdateProjectLinkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectLink1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLink1) GetDeployHooks() []UpdateProjectLinkDeployHooks {
	if o == nil {
		return []UpdateProjectLinkDeployHooks{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectLink1) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectLink1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectLink1) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectLink1) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectLinkUnionType string

const (
	UpdateProjectLinkUnionTypeUpdateProjectLink1 UpdateProjectLinkUnionType = "updateProject_link_1"
	UpdateProjectLinkUnionTypeUpdateProjectLink2 UpdateProjectLinkUnionType = "updateProject_link_2"
	UpdateProjectLinkUnionTypeUpdateProjectLink3 UpdateProjectLinkUnionType = "updateProject_link_3"
)

type UpdateProjectLink struct {
	UpdateProjectLink1 *UpdateProjectLink1
	UpdateProjectLink2 *UpdateProjectLink2
	UpdateProjectLink3 *UpdateProjectLink3

	Type UpdateProjectLinkUnionType
}

func CreateUpdateProjectLinkUpdateProjectLink1(updateProjectLink1 UpdateProjectLink1) UpdateProjectLink {
	typ := UpdateProjectLinkUnionTypeUpdateProjectLink1

	return UpdateProjectLink{
		UpdateProjectLink1: &updateProjectLink1,
		Type:               typ,
	}
}

func CreateUpdateProjectLinkUpdateProjectLink2(updateProjectLink2 UpdateProjectLink2) UpdateProjectLink {
	typ := UpdateProjectLinkUnionTypeUpdateProjectLink2

	return UpdateProjectLink{
		UpdateProjectLink2: &updateProjectLink2,
		Type:               typ,
	}
}

func CreateUpdateProjectLinkUpdateProjectLink3(updateProjectLink3 UpdateProjectLink3) UpdateProjectLink {
	typ := UpdateProjectLinkUnionTypeUpdateProjectLink3

	return UpdateProjectLink{
		UpdateProjectLink3: &updateProjectLink3,
		Type:               typ,
	}
}

func (u *UpdateProjectLink) UnmarshalJSON(data []byte) error {

	var updateProjectLink1 UpdateProjectLink1 = UpdateProjectLink1{}
	if err := utils.UnmarshalJSON(data, &updateProjectLink1, "", true, true); err == nil {
		u.UpdateProjectLink1 = &updateProjectLink1
		u.Type = UpdateProjectLinkUnionTypeUpdateProjectLink1
		return nil
	}

	var updateProjectLink3 UpdateProjectLink3 = UpdateProjectLink3{}
	if err := utils.UnmarshalJSON(data, &updateProjectLink3, "", true, true); err == nil {
		u.UpdateProjectLink3 = &updateProjectLink3
		u.Type = UpdateProjectLinkUnionTypeUpdateProjectLink3
		return nil
	}

	var updateProjectLink2 UpdateProjectLink2 = UpdateProjectLink2{}
	if err := utils.UnmarshalJSON(data, &updateProjectLink2, "", true, true); err == nil {
		u.UpdateProjectLink2 = &updateProjectLink2
		u.Type = UpdateProjectLinkUnionTypeUpdateProjectLink2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectLink", string(data))
}

func (u UpdateProjectLink) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectLink1 != nil {
		return utils.MarshalJSON(u.UpdateProjectLink1, "", true)
	}

	if u.UpdateProjectLink2 != nil {
		return utils.MarshalJSON(u.UpdateProjectLink2, "", true)
	}

	if u.UpdateProjectLink3 != nil {
		return utils.MarshalJSON(u.UpdateProjectLink3, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectLink: all fields are null")
}

type UpdateProjectMicrofrontends2 struct {
	UpdatedAt float64 `json:"updatedAt"`
	GroupIds  []any   `json:"groupIds"`
	Enabled   bool    `json:"enabled"`
}

func (o *UpdateProjectMicrofrontends2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateProjectMicrofrontends2) GetGroupIds() []any {
	if o == nil {
		return []any{}
	}
	return o.GroupIds
}

func (o *UpdateProjectMicrofrontends2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type UpdateProjectMicrofrontends1 struct {
	// Timestamp when the microfrontends settings were last updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether microfrontends are enabled for this project.
	Enabled bool `json:"enabled"`
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// Whether observability data should be routed to this microfrontend project or a root project.
	RouteObservabilityToThisProject *bool `json:"routeObservabilityToThisProject,omitempty"`
}

func (o *UpdateProjectMicrofrontends1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateProjectMicrofrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *UpdateProjectMicrofrontends1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *UpdateProjectMicrofrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *UpdateProjectMicrofrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *UpdateProjectMicrofrontends1) GetRouteObservabilityToThisProject() *bool {
	if o == nil {
		return nil
	}
	return o.RouteObservabilityToThisProject
}

type UpdateProjectMicrofrontendsType string

const (
	UpdateProjectMicrofrontendsTypeUpdateProjectMicrofrontends1 UpdateProjectMicrofrontendsType = "updateProject_microfrontends_1"
	UpdateProjectMicrofrontendsTypeUpdateProjectMicrofrontends2 UpdateProjectMicrofrontendsType = "updateProject_microfrontends_2"
)

type UpdateProjectMicrofrontends struct {
	UpdateProjectMicrofrontends1 *UpdateProjectMicrofrontends1
	UpdateProjectMicrofrontends2 *UpdateProjectMicrofrontends2

	Type UpdateProjectMicrofrontendsType
}

func CreateUpdateProjectMicrofrontendsUpdateProjectMicrofrontends1(updateProjectMicrofrontends1 UpdateProjectMicrofrontends1) UpdateProjectMicrofrontends {
	typ := UpdateProjectMicrofrontendsTypeUpdateProjectMicrofrontends1

	return UpdateProjectMicrofrontends{
		UpdateProjectMicrofrontends1: &updateProjectMicrofrontends1,
		Type:                         typ,
	}
}

func CreateUpdateProjectMicrofrontendsUpdateProjectMicrofrontends2(updateProjectMicrofrontends2 UpdateProjectMicrofrontends2) UpdateProjectMicrofrontends {
	typ := UpdateProjectMicrofrontendsTypeUpdateProjectMicrofrontends2

	return UpdateProjectMicrofrontends{
		UpdateProjectMicrofrontends2: &updateProjectMicrofrontends2,
		Type:                         typ,
	}
}

func (u *UpdateProjectMicrofrontends) UnmarshalJSON(data []byte) error {

	var updateProjectMicrofrontends2 UpdateProjectMicrofrontends2 = UpdateProjectMicrofrontends2{}
	if err := utils.UnmarshalJSON(data, &updateProjectMicrofrontends2, "", true, true); err == nil {
		u.UpdateProjectMicrofrontends2 = &updateProjectMicrofrontends2
		u.Type = UpdateProjectMicrofrontendsTypeUpdateProjectMicrofrontends2
		return nil
	}

	var updateProjectMicrofrontends1 UpdateProjectMicrofrontends1 = UpdateProjectMicrofrontends1{}
	if err := utils.UnmarshalJSON(data, &updateProjectMicrofrontends1, "", true, true); err == nil {
		u.UpdateProjectMicrofrontends1 = &updateProjectMicrofrontends1
		u.Type = UpdateProjectMicrofrontendsTypeUpdateProjectMicrofrontends1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectMicrofrontends", string(data))
}

func (u UpdateProjectMicrofrontends) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectMicrofrontends1 != nil {
		return utils.MarshalJSON(u.UpdateProjectMicrofrontends1, "", true)
	}

	if u.UpdateProjectMicrofrontends2 != nil {
		return utils.MarshalJSON(u.UpdateProjectMicrofrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectMicrofrontends: all fields are null")
}

type UpdateProjectProjectsNodeVersion string

const (
	UpdateProjectProjectsNodeVersionTwentyTwoX UpdateProjectProjectsNodeVersion = "22.x"
	UpdateProjectProjectsNodeVersionTwentyX    UpdateProjectProjectsNodeVersion = "20.x"
	UpdateProjectProjectsNodeVersionEighteenX  UpdateProjectProjectsNodeVersion = "18.x"
	UpdateProjectProjectsNodeVersionSixteenX   UpdateProjectProjectsNodeVersion = "16.x"
	UpdateProjectProjectsNodeVersionFourteenX  UpdateProjectProjectsNodeVersion = "14.x"
	UpdateProjectProjectsNodeVersionTwelveX    UpdateProjectProjectsNodeVersion = "12.x"
	UpdateProjectProjectsNodeVersionTenX       UpdateProjectProjectsNodeVersion = "10.x"
	UpdateProjectProjectsNodeVersionEight10X   UpdateProjectProjectsNodeVersion = "8.10.x"
)

func (e UpdateProjectProjectsNodeVersion) ToPointer() *UpdateProjectProjectsNodeVersion {
	return &e
}
func (e *UpdateProjectProjectsNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = UpdateProjectProjectsNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsNodeVersion: %v", v)
	}
}

type UpdateProjectPaths struct {
	Value string `json:"value"`
}

func (o *UpdateProjectPaths) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectOptionsAllowlist struct {
	Paths []UpdateProjectPaths `json:"paths"`
}

func (o *UpdateProjectOptionsAllowlist) GetPaths() []UpdateProjectPaths {
	if o == nil {
		return []UpdateProjectPaths{}
	}
	return o.Paths
}

type UpdateProjectPasswordProtection struct {
}

type UpdateProjectFunctionDefaultMemoryType string

const (
	UpdateProjectFunctionDefaultMemoryTypeStandardLegacy UpdateProjectFunctionDefaultMemoryType = "standard_legacy"
	UpdateProjectFunctionDefaultMemoryTypeStandard       UpdateProjectFunctionDefaultMemoryType = "standard"
	UpdateProjectFunctionDefaultMemoryTypePerformance    UpdateProjectFunctionDefaultMemoryType = "performance"
)

func (e UpdateProjectFunctionDefaultMemoryType) ToPointer() *UpdateProjectFunctionDefaultMemoryType {
	return &e
}
func (e *UpdateProjectFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = UpdateProjectFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectFunctionDefaultMemoryType: %v", v)
	}
}

type UpdateProjectResourceConfig struct {
	Fluid                      *bool                                   `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *UpdateProjectFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                   `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                   `json:"elasticConcurrencyEnabled,omitempty"`
}

func (o *UpdateProjectResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *UpdateProjectResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *UpdateProjectResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *UpdateProjectResourceConfig) GetFunctionDefaultMemoryType() *UpdateProjectFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *UpdateProjectResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *UpdateProjectResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

// UpdateProjectStages - An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
type UpdateProjectStages struct {
	// The percentage of traffic to serve to the new deployment
	TargetPercentage float64 `json:"targetPercentage"`
}

func (o *UpdateProjectStages) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

type UpdateProjectRollingRelease struct {
	// The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
	Target string `json:"target"`
	// minutesToRelease is the total time to gradually shift percentages. This value overrides stages and instead creates a single smooth 0-100 stage. So once we have fetched the document with the start time, subtract from the current time, and divide by total minutesToRelease, to determine what percentage of traffic the new deployment should be serving. There is no approval required, and for the case of Vercel, it would just slowly shift traffic 0 to 100%.
	MinutesToRelease *float64 `json:"minutesToRelease,omitempty"`
	// An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
	Stages []UpdateProjectStages `json:"stages,omitempty"`
}

func (o *UpdateProjectRollingRelease) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *UpdateProjectRollingRelease) GetMinutesToRelease() *float64 {
	if o == nil {
		return nil
	}
	return o.MinutesToRelease
}

func (o *UpdateProjectRollingRelease) GetStages() []UpdateProjectStages {
	if o == nil {
		return nil
	}
	return o.Stages
}

type UpdateProjectProjectsFunctionDefaultMemoryType string

const (
	UpdateProjectProjectsFunctionDefaultMemoryTypeStandardLegacy UpdateProjectProjectsFunctionDefaultMemoryType = "standard_legacy"
	UpdateProjectProjectsFunctionDefaultMemoryTypeStandard       UpdateProjectProjectsFunctionDefaultMemoryType = "standard"
	UpdateProjectProjectsFunctionDefaultMemoryTypePerformance    UpdateProjectProjectsFunctionDefaultMemoryType = "performance"
)

func (e UpdateProjectProjectsFunctionDefaultMemoryType) ToPointer() *UpdateProjectProjectsFunctionDefaultMemoryType {
	return &e
}
func (e *UpdateProjectProjectsFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = UpdateProjectProjectsFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsFunctionDefaultMemoryType: %v", v)
	}
}

type UpdateProjectDefaultResourceConfig struct {
	Fluid                      *bool                                           `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                        `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                        `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *UpdateProjectProjectsFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                           `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                           `json:"elasticConcurrencyEnabled,omitempty"`
}

func (o *UpdateProjectDefaultResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *UpdateProjectDefaultResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *UpdateProjectDefaultResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *UpdateProjectDefaultResourceConfig) GetFunctionDefaultMemoryType() *UpdateProjectProjectsFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *UpdateProjectDefaultResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *UpdateProjectDefaultResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

type UpdateProjectProjectsResponseDeploymentType string

const (
	UpdateProjectProjectsResponseDeploymentTypePreview                          UpdateProjectProjectsResponseDeploymentType = "preview"
	UpdateProjectProjectsResponseDeploymentTypeAll                              UpdateProjectProjectsResponseDeploymentType = "all"
	UpdateProjectProjectsResponseDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectProjectsResponseDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectProjectsResponseDeploymentType) ToPointer() *UpdateProjectProjectsResponseDeploymentType {
	return &e
}
func (e *UpdateProjectProjectsResponseDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectProjectsResponseDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponseDeploymentType: %v", v)
	}
}

type UpdateProjectSsoProtection struct {
	DeploymentType UpdateProjectProjectsResponseDeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectSsoProtection) GetDeploymentType() UpdateProjectProjectsResponseDeploymentType {
	if o == nil {
		return UpdateProjectProjectsResponseDeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectProjectsAliasAssignedType string

const (
	UpdateProjectProjectsAliasAssignedTypeNumber  UpdateProjectProjectsAliasAssignedType = "number"
	UpdateProjectProjectsAliasAssignedTypeBoolean UpdateProjectProjectsAliasAssignedType = "boolean"
)

type UpdateProjectProjectsAliasAssigned struct {
	Number  *float64
	Boolean *bool

	Type UpdateProjectProjectsAliasAssignedType
}

func CreateUpdateProjectProjectsAliasAssignedNumber(number float64) UpdateProjectProjectsAliasAssigned {
	typ := UpdateProjectProjectsAliasAssignedTypeNumber

	return UpdateProjectProjectsAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateUpdateProjectProjectsAliasAssignedBoolean(boolean bool) UpdateProjectProjectsAliasAssigned {
	typ := UpdateProjectProjectsAliasAssignedTypeBoolean

	return UpdateProjectProjectsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectProjectsAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateProjectProjectsAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UpdateProjectProjectsAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectProjectsAliasAssigned", string(data))
}

func (u UpdateProjectProjectsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectProjectsAliasAssigned: all fields are null")
}

type UpdateProjectProjectsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectProjectsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectProjectsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type UpdateProjectProjectsResponse200ApplicationJSONType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONTypeEndsWith   UpdateProjectProjectsResponse200ApplicationJSONType = "endsWith"
	UpdateProjectProjectsResponse200ApplicationJSONTypeStartsWith UpdateProjectProjectsResponse200ApplicationJSONType = "startsWith"
	UpdateProjectProjectsResponse200ApplicationJSONTypeEquals     UpdateProjectProjectsResponse200ApplicationJSONType = "equals"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = UpdateProjectProjectsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONType: %v", v)
	}
}

type UpdateProjectProjectsBranchMatcher struct {
	Type    UpdateProjectProjectsResponse200ApplicationJSONType `json:"type"`
	Pattern string                                              `json:"pattern"`
}

func (o *UpdateProjectProjectsBranchMatcher) GetType() UpdateProjectProjectsResponse200ApplicationJSONType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *UpdateProjectProjectsBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type UpdateProjectProjectsBuilds struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *UpdateProjectProjectsBuilds) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *UpdateProjectProjectsBuilds) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectProjectsBuilds) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type UpdateProjectProjectsChecksConclusion string

const (
	UpdateProjectProjectsChecksConclusionSucceeded UpdateProjectProjectsChecksConclusion = "succeeded"
	UpdateProjectProjectsChecksConclusionFailed    UpdateProjectProjectsChecksConclusion = "failed"
	UpdateProjectProjectsChecksConclusionSkipped   UpdateProjectProjectsChecksConclusion = "skipped"
	UpdateProjectProjectsChecksConclusionCanceled  UpdateProjectProjectsChecksConclusion = "canceled"
)

func (e UpdateProjectProjectsChecksConclusion) ToPointer() *UpdateProjectProjectsChecksConclusion {
	return &e
}
func (e *UpdateProjectProjectsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectProjectsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsChecksConclusion: %v", v)
	}
}

type UpdateProjectProjectsChecksState string

const (
	UpdateProjectProjectsChecksStateRegistered UpdateProjectProjectsChecksState = "registered"
	UpdateProjectProjectsChecksStateRunning    UpdateProjectProjectsChecksState = "running"
	UpdateProjectProjectsChecksStateCompleted  UpdateProjectProjectsChecksState = "completed"
)

func (e UpdateProjectProjectsChecksState) ToPointer() *UpdateProjectProjectsChecksState {
	return &e
}
func (e *UpdateProjectProjectsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectProjectsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsChecksState: %v", v)
	}
}

type UpdateProjectProjectsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectProjectsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectProjectsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectProjectsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectProjectsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectProjectsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectProjectsOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *UpdateProjectProjectsOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *UpdateProjectProjectsOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *UpdateProjectProjectsOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *UpdateProjectProjectsOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *UpdateProjectProjectsOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *UpdateProjectProjectsOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *UpdateProjectProjectsOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *UpdateProjectProjectsOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectProjectsOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type UpdateProjectProjectsPlan string

const (
	UpdateProjectProjectsPlanPro        UpdateProjectProjectsPlan = "pro"
	UpdateProjectProjectsPlanEnterprise UpdateProjectProjectsPlan = "enterprise"
	UpdateProjectProjectsPlanHobby      UpdateProjectProjectsPlan = "hobby"
)

func (e UpdateProjectProjectsPlan) ToPointer() *UpdateProjectProjectsPlan {
	return &e
}
func (e *UpdateProjectProjectsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = UpdateProjectProjectsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsPlan: %v", v)
	}
}

type UpdateProjectProjectsReadyState string

const (
	UpdateProjectProjectsReadyStateBuilding     UpdateProjectProjectsReadyState = "BUILDING"
	UpdateProjectProjectsReadyStateError        UpdateProjectProjectsReadyState = "ERROR"
	UpdateProjectProjectsReadyStateInitializing UpdateProjectProjectsReadyState = "INITIALIZING"
	UpdateProjectProjectsReadyStateQueued       UpdateProjectProjectsReadyState = "QUEUED"
	UpdateProjectProjectsReadyStateReady        UpdateProjectProjectsReadyState = "READY"
	UpdateProjectProjectsReadyStateCanceled     UpdateProjectProjectsReadyState = "CANCELED"
)

func (e UpdateProjectProjectsReadyState) ToPointer() *UpdateProjectProjectsReadyState {
	return &e
}
func (e *UpdateProjectProjectsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectProjectsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsReadyState: %v", v)
	}
}

type UpdateProjectProjectsReadySubstate string

const (
	UpdateProjectProjectsReadySubstateStaged   UpdateProjectProjectsReadySubstate = "STAGED"
	UpdateProjectProjectsReadySubstatePromoted UpdateProjectProjectsReadySubstate = "PROMOTED"
)

func (e UpdateProjectProjectsReadySubstate) ToPointer() *UpdateProjectProjectsReadySubstate {
	return &e
}
func (e *UpdateProjectProjectsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectProjectsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsReadySubstate: %v", v)
	}
}

type UpdateProjectProjectsResponseType string

const (
	UpdateProjectProjectsResponseTypeLambdas UpdateProjectProjectsResponseType = "LAMBDAS"
)

func (e UpdateProjectProjectsResponseType) ToPointer() *UpdateProjectProjectsResponseType {
	return &e
}
func (e *UpdateProjectProjectsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectProjectsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponseType: %v", v)
	}
}

type UpdateProjectTargets struct {
	ID                     string                                 `json:"id"`
	Alias                  []string                               `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectProjectsAliasAssigned    `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectProjectsAliasError       `json:"aliasError,omitempty"`
	AliasFinal             *string                                `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                               `json:"automaticAliases,omitempty"`
	BranchMatcher          *UpdateProjectProjectsBranchMatcher    `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                               `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectProjectsBuilds          `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectProjectsChecksConclusion `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectProjectsChecksState      `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                  `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                                `json:"createdAt"`
	CreatedIn              string                                 `json:"createdIn"`
	Creator                *UpdateProjectProjectsCreator          `json:"creator"`
	DeletedAt              *float64                               `json:"deletedAt,omitempty"`
	DeploymentHostname     string                                 `json:"deploymentHostname"`
	Forced                 *bool                                  `json:"forced,omitempty"`
	Name                   string                                 `json:"name"`
	Meta                   map[string]string                      `json:"meta,omitempty"`
	MonorepoManager        *string                                `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *UpdateProjectProjectsOidcTokenClaims  `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectProjectsPlan              `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                               `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                `json:"private"`
	ReadyAt                *float64                            `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectProjectsReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectProjectsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                            `json:"requestedAt,omitempty"`
	Target                 *string                             `json:"target,omitempty"`
	TeamID                 *string                             `json:"teamId,omitempty"`
	Type                   UpdateProjectProjectsResponseType   `json:"type"`
	URL                    string                              `json:"url"`
	UserID                 string                              `json:"userId"`
	WithCache              *bool                               `json:"withCache,omitempty"`
}

func (o *UpdateProjectTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectTargets) GetAliasAssigned() *UpdateProjectProjectsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectTargets) GetAliasError() *UpdateProjectProjectsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectTargets) GetBranchMatcher() *UpdateProjectProjectsBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *UpdateProjectTargets) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectTargets) GetBuilds() []UpdateProjectProjectsBuilds {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectTargets) GetChecksConclusion() *UpdateProjectProjectsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectTargets) GetChecksState() *UpdateProjectProjectsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectTargets) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectTargets) GetCreator() *UpdateProjectProjectsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectTargets) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *UpdateProjectTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectTargets) GetOidcTokenClaims() *UpdateProjectProjectsOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *UpdateProjectTargets) GetPlan() UpdateProjectProjectsPlan {
	if o == nil {
		return UpdateProjectProjectsPlan("")
	}
	return o.Plan
}

func (o *UpdateProjectTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectTargets) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectTargets) GetReadyState() UpdateProjectProjectsReadyState {
	if o == nil {
		return UpdateProjectProjectsReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectTargets) GetReadySubstate() *UpdateProjectProjectsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectTargets) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectTargets) GetType() UpdateProjectProjectsResponseType {
	if o == nil {
		return UpdateProjectProjectsResponseType("")
	}
	return o.Type
}

func (o *UpdateProjectTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectPermissions struct {
	User                                     []components.ACLAction `json:"user,omitempty"`
	UserConnection                           []components.ACLAction `json:"userConnection,omitempty"`
	UserSudo                                 []components.ACLAction `json:"userSudo,omitempty"`
	WebAuthn                                 []components.ACLAction `json:"webAuthn,omitempty"`
	Oauth2Connection                         []components.ACLAction `json:"oauth2Connection,omitempty"`
	AccessGroup                              []components.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []components.ACLAction `json:"aliasGlobal,omitempty"`
	AnalyticsSampling                        []components.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []components.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []components.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []components.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []components.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []components.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []components.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []components.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []components.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []components.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []components.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []components.ACLAction `json:"blob,omitempty"`
	Budget                                   []components.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []components.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []components.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []components.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []components.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []components.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []components.ACLAction `json:"connectConfiguration,omitempty"`
	Domain                                   []components.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []components.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []components.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []components.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []components.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []components.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []components.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []components.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []components.ACLAction `json:"domainTransferIn,omitempty"`
	Event                                    []components.ACLAction `json:"event,omitempty"`
	OwnEvent                                 []components.ACLAction `json:"ownEvent,omitempty"`
	SensitiveEnvironmentVariablePolicy       []components.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	FileUpload                               []components.ACLAction `json:"fileUpload,omitempty"`
	FlagsExplorerSubscription                []components.ACLAction `json:"flagsExplorerSubscription,omitempty"`
	GitRepository                            []components.ACLAction `json:"gitRepository,omitempty"`
	IPBlocking                               []components.ACLAction `json:"ipBlocking,omitempty"`
	ImageOptimizationNewPrice                []components.ACLAction `json:"imageOptimizationNewPrice,omitempty"`
	Integration                              []components.ACLAction `json:"integration,omitempty"`
	IntegrationAccount                       []components.ACLAction `json:"integrationAccount,omitempty"`
	IntegrationConfiguration                 []components.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationTransfer         []components.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationConfigurationProjects         []components.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationVercelConfigurationOverride   []components.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IntegrationConfigurationRole             []components.ACLAction `json:"integrationConfigurationRole,omitempty"`
	IntegrationSSOSession                    []components.ACLAction `json:"integrationSSOSession,omitempty"`
	IntegrationResource                      []components.ACLAction `json:"integrationResource,omitempty"`
	IntegrationEvent                         []components.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []components.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationDeploymentAction              []components.ACLAction `json:"integrationDeploymentAction,omitempty"`
	MarketplaceInstallationMember            []components.ACLAction `json:"marketplaceInstallationMember,omitempty"`
	MarketplaceBillingData                   []components.ACLAction `json:"marketplaceBillingData,omitempty"`
	MarketplaceInvoice                       []components.ACLAction `json:"marketplaceInvoice,omitempty"`
	MarketplaceExperimentationItem           []components.ACLAction `json:"marketplaceExperimentationItem,omitempty"`
	MarketplaceExperimentationEdgeConfigData []components.ACLAction `json:"marketplaceExperimentationEdgeConfigData,omitempty"`
	JobGlobal                                []components.ACLAction `json:"jobGlobal,omitempty"`
	Drain                                    []components.ACLAction `json:"drain,omitempty"`
	LogDrain                                 []components.ACLAction `json:"logDrain,omitempty"`
	Monitoring                               []components.ACLAction `json:"Monitoring,omitempty"`
	MonitoringSettings                       []components.ACLAction `json:"monitoringSettings,omitempty"`
	MonitoringQuery                          []components.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringChart                          []components.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringAlert                          []components.ACLAction `json:"monitoringAlert,omitempty"`
	NotificationDeploymentFailed             []components.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []components.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []components.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []components.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []components.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []components.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []components.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []components.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationMonitoringAlert              []components.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	NotificationPaymentFailed                []components.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []components.ACLAction `json:"notificationUsageAlert,omitempty"`
	NotificationCustomerBudget               []components.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationStatementOfReasons           []components.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	ObservabilityConfiguration               []components.ACLAction `json:"observabilityConfiguration,omitempty"`
	OpenTelemetryEndpoint                    []components.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	PaymentMethod                            []components.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []components.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []components.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []components.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []components.ACLAction `json:"proTrialOnboarding,omitempty"`
	SharedEnvVars                            []components.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []components.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []components.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []components.ACLAction `json:"spaceRun,omitempty"`
	PasswordProtectionInvoiceItem            []components.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	RateLimit                                []components.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []components.ACLAction `json:"redis,omitempty"`
	Repository                               []components.ACLAction `json:"repository,omitempty"`
	RemoteCaching                            []components.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []components.ACLAction `json:"samlConfig,omitempty"`
	Secret                                   []components.ACLAction `json:"secret,omitempty"`
	RedisStoreTokenSet                       []components.ACLAction `json:"redisStoreTokenSet,omitempty"`
	BlobStoreTokenSet                        []components.ACLAction `json:"blobStoreTokenSet,omitempty"`
	PostgresStoreTokenSet                    []components.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	IntegrationStoreTokenSet                 []components.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationResourceReplCommand           []components.ACLAction `json:"integrationResourceReplCommand,omitempty"`
	StoreTransfer                            []components.ACLAction `json:"storeTransfer,omitempty"`
	SupportCase                              []components.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []components.ACLAction `json:"supportCaseComment,omitempty"`
	DataCacheBillingSettings                 []components.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	Team                                     []components.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []components.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []components.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamGitExclusivity                       []components.ACLAction `json:"teamGitExclusivity,omitempty"`
	TeamInvite                               []components.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []components.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []components.ACLAction `json:"teamJoin,omitempty"`
	TeamMicrofrontends                       []components.ACLAction `json:"teamMicrofrontends,omitempty"`
	TeamOwnMembership                        []components.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []components.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []components.ACLAction `json:"token,omitempty"`
	Usage                                    []components.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []components.ACLAction `json:"usageCycle,omitempty"`
	VpcPeeringConnection                     []components.ACLAction `json:"vpcPeeringConnection,omitempty"`
	WebAnalyticsPlan                         []components.ACLAction `json:"webAnalyticsPlan,omitempty"`
	EdgeConfig                               []components.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []components.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []components.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []components.ACLAction `json:"edgeConfigToken,omitempty"`
	Webhook                                  []components.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []components.ACLAction `json:"webhook-event,omitempty"`
	EndpointVerification                     []components.ACLAction `json:"endpointVerification,omitempty"`
	ProjectTransferIn                        []components.ACLAction `json:"projectTransferIn,omitempty"`
	Oauth2Application                        []components.ACLAction `json:"oauth2Application,omitempty"`
	AliasProject                             []components.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []components.ACLAction `json:"aliasProtectionBypass,omitempty"`
	ProductionAliasProtectionBypass          []components.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	ConnectConfigurationLink                 []components.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheNamespace                       []components.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []components.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []components.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []components.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []components.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentProductionGit                  []components.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentV0                             []components.ACLAction `json:"deploymentV0,omitempty"`
	DeploymentPreview                        []components.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []components.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentPromote                        []components.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []components.ACLAction `json:"deploymentRollback,omitempty"`
	Environments                             []components.ACLAction `json:"environments,omitempty"`
	Logs                                     []components.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []components.ACLAction `json:"logsPreset,omitempty"`
	PasswordProtection                       []components.ACLAction `json:"passwordProtection,omitempty"`
	OptionsAllowlist                         []components.ACLAction `json:"optionsAllowlist,omitempty"`
	Job                                      []components.ACLAction `json:"job,omitempty"`
	ObservabilityData                        []components.ACLAction `json:"observabilityData,omitempty"`
	Project                                  []components.ACLAction `json:"project,omitempty"`
	ProjectFromV0                            []components.ACLAction `json:"projectFromV0,omitempty"`
	ProjectAccessGroup                       []components.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []components.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectDeploymentHook                    []components.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []components.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []components.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectDomainCheckConfig                 []components.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectEnvVars                           []components.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []components.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []components.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectFlags                             []components.ACLAction `json:"projectFlags,omitempty"`
	ProjectID                                []components.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []components.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []components.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []components.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []components.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []components.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []components.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectTransfer                          []components.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferOut                       []components.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectProtectionBypass                  []components.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectUsage                             []components.ACLAction `json:"projectUsage,omitempty"`
	ProjectAnalyticsUsage                    []components.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectSupportCase                       []components.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []components.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectDeploymentExpiration              []components.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectRollingRelease                    []components.ACLAction `json:"projectRollingRelease,omitempty"`
	ProjectTier                              []components.ACLAction `json:"projectTier,omitempty"`
	SeawallConfig                            []components.ACLAction `json:"seawallConfig,omitempty"`
	SkewProtection                           []components.ACLAction `json:"skewProtection,omitempty"`
	Analytics                                []components.ACLAction `json:"analytics,omitempty"`
	TrustedIps                               []components.ACLAction `json:"trustedIps,omitempty"`
	WebAnalytics                             []components.ACLAction `json:"webAnalytics,omitempty"`
	SharedEnvVarConnection                   []components.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	Sonar                                    []components.ACLAction `json:"sonar,omitempty"`
}

func (o *UpdateProjectPermissions) GetUser() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UpdateProjectPermissions) GetUserConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *UpdateProjectPermissions) GetUserSudo() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserSudo
}

func (o *UpdateProjectPermissions) GetWebAuthn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *UpdateProjectPermissions) GetOauth2Connection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *UpdateProjectPermissions) GetAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *UpdateProjectPermissions) GetAliasGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *UpdateProjectPermissions) GetAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *UpdateProjectPermissions) GetAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *UpdateProjectPermissions) GetAuditLog() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *UpdateProjectPermissions) GetBillingAddress() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdateProjectPermissions) GetBillingInformation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *UpdateProjectPermissions) GetBillingInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *UpdateProjectPermissions) GetBillingInvoiceEmailRecipient() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *UpdateProjectPermissions) GetBillingInvoiceLanguage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *UpdateProjectPermissions) GetBillingPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *UpdateProjectPermissions) GetBillingPurchaseOrder() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *UpdateProjectPermissions) GetBillingTaxID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *UpdateProjectPermissions) GetBlob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *UpdateProjectPermissions) GetBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *UpdateProjectPermissions) GetCacheArtifact() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *UpdateProjectPermissions) GetCacheArtifactUsageEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *UpdateProjectPermissions) GetCodeChecks() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *UpdateProjectPermissions) GetConcurrentBuilds() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *UpdateProjectPermissions) GetConnect() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *UpdateProjectPermissions) GetConnectConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *UpdateProjectPermissions) GetDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *UpdateProjectPermissions) GetDomainAcceptDelegation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *UpdateProjectPermissions) GetDomainAuthCodes() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *UpdateProjectPermissions) GetDomainCertificate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *UpdateProjectPermissions) GetDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *UpdateProjectPermissions) GetDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *UpdateProjectPermissions) GetDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *UpdateProjectPermissions) GetDomainRecord() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *UpdateProjectPermissions) GetDomainTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *UpdateProjectPermissions) GetEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *UpdateProjectPermissions) GetOwnEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *UpdateProjectPermissions) GetSensitiveEnvironmentVariablePolicy() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *UpdateProjectPermissions) GetFileUpload() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *UpdateProjectPermissions) GetFlagsExplorerSubscription() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerSubscription
}

func (o *UpdateProjectPermissions) GetGitRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *UpdateProjectPermissions) GetIPBlocking() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *UpdateProjectPermissions) GetImageOptimizationNewPrice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationNewPrice
}

func (o *UpdateProjectPermissions) GetIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *UpdateProjectPermissions) GetIntegrationAccount() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationAccount
}

func (o *UpdateProjectPermissions) GetIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *UpdateProjectPermissions) GetIntegrationConfigurationTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *UpdateProjectPermissions) GetIntegrationConfigurationProjects() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *UpdateProjectPermissions) GetIntegrationVercelConfigurationOverride() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *UpdateProjectPermissions) GetIntegrationConfigurationRole() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationRole
}

func (o *UpdateProjectPermissions) GetIntegrationSSOSession() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationSSOSession
}

func (o *UpdateProjectPermissions) GetIntegrationResource() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResource
}

func (o *UpdateProjectPermissions) GetIntegrationEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *UpdateProjectPermissions) GetIntegrationResourceSecrets() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *UpdateProjectPermissions) GetIntegrationDeploymentAction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationDeploymentAction
}

func (o *UpdateProjectPermissions) GetMarketplaceInstallationMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInstallationMember
}

func (o *UpdateProjectPermissions) GetMarketplaceBillingData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *UpdateProjectPermissions) GetMarketplaceInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInvoice
}

func (o *UpdateProjectPermissions) GetMarketplaceExperimentationItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationItem
}

func (o *UpdateProjectPermissions) GetMarketplaceExperimentationEdgeConfigData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationEdgeConfigData
}

func (o *UpdateProjectPermissions) GetJobGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *UpdateProjectPermissions) GetDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Drain
}

func (o *UpdateProjectPermissions) GetLogDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *UpdateProjectPermissions) GetMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *UpdateProjectPermissions) GetMonitoringSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *UpdateProjectPermissions) GetMonitoringQuery() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *UpdateProjectPermissions) GetMonitoringChart() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *UpdateProjectPermissions) GetMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *UpdateProjectPermissions) GetNotificationDeploymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *UpdateProjectPermissions) GetNotificationDomainConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *UpdateProjectPermissions) GetNotificationDomainExpire() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *UpdateProjectPermissions) GetNotificationDomainMoved() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *UpdateProjectPermissions) GetNotificationDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *UpdateProjectPermissions) GetNotificationDomainRenewal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *UpdateProjectPermissions) GetNotificationDomainTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *UpdateProjectPermissions) GetNotificationDomainUnverified() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *UpdateProjectPermissions) GetNotificationMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *UpdateProjectPermissions) GetNotificationPaymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *UpdateProjectPermissions) GetNotificationUsageAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *UpdateProjectPermissions) GetNotificationCustomerBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *UpdateProjectPermissions) GetNotificationStatementOfReasons() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *UpdateProjectPermissions) GetObservabilityConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityConfiguration
}

func (o *UpdateProjectPermissions) GetOpenTelemetryEndpoint() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *UpdateProjectPermissions) GetPaymentMethod() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *UpdateProjectPermissions) GetPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectPermissions) GetPostgres() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *UpdateProjectPermissions) GetPreviewDeploymentSuffix() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *UpdateProjectPermissions) GetProTrialOnboarding() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *UpdateProjectPermissions) GetSharedEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *UpdateProjectPermissions) GetSharedEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *UpdateProjectPermissions) GetSpace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *UpdateProjectPermissions) GetSpaceRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *UpdateProjectPermissions) GetPasswordProtectionInvoiceItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *UpdateProjectPermissions) GetRateLimit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *UpdateProjectPermissions) GetRedis() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *UpdateProjectPermissions) GetRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *UpdateProjectPermissions) GetRemoteCaching() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *UpdateProjectPermissions) GetSamlConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *UpdateProjectPermissions) GetSecret() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *UpdateProjectPermissions) GetRedisStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *UpdateProjectPermissions) GetBlobStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *UpdateProjectPermissions) GetPostgresStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *UpdateProjectPermissions) GetIntegrationStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *UpdateProjectPermissions) GetIntegrationResourceReplCommand() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceReplCommand
}

func (o *UpdateProjectPermissions) GetStoreTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.StoreTransfer
}

func (o *UpdateProjectPermissions) GetSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *UpdateProjectPermissions) GetSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *UpdateProjectPermissions) GetDataCacheBillingSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *UpdateProjectPermissions) GetTeam() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *UpdateProjectPermissions) GetTeamAccessRequest() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *UpdateProjectPermissions) GetTeamFellowMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *UpdateProjectPermissions) GetTeamGitExclusivity() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamGitExclusivity
}

func (o *UpdateProjectPermissions) GetTeamInvite() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *UpdateProjectPermissions) GetTeamInviteCode() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *UpdateProjectPermissions) GetTeamJoin() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *UpdateProjectPermissions) GetTeamMicrofrontends() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMicrofrontends
}

func (o *UpdateProjectPermissions) GetTeamOwnMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *UpdateProjectPermissions) GetTeamOwnMembershipDisconnectSAML() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *UpdateProjectPermissions) GetToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *UpdateProjectPermissions) GetUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *UpdateProjectPermissions) GetUsageCycle() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *UpdateProjectPermissions) GetVpcPeeringConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VpcPeeringConnection
}

func (o *UpdateProjectPermissions) GetWebAnalyticsPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *UpdateProjectPermissions) GetEdgeConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *UpdateProjectPermissions) GetEdgeConfigItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *UpdateProjectPermissions) GetEdgeConfigSchema() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *UpdateProjectPermissions) GetEdgeConfigToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *UpdateProjectPermissions) GetWebhook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *UpdateProjectPermissions) GetWebhookEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

func (o *UpdateProjectPermissions) GetEndpointVerification() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *UpdateProjectPermissions) GetProjectTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *UpdateProjectPermissions) GetOauth2Application() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *UpdateProjectPermissions) GetAliasProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *UpdateProjectPermissions) GetAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *UpdateProjectPermissions) GetProductionAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *UpdateProjectPermissions) GetConnectConfigurationLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *UpdateProjectPermissions) GetDataCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *UpdateProjectPermissions) GetDeployment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *UpdateProjectPermissions) GetDeploymentCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *UpdateProjectPermissions) GetDeploymentCheckPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *UpdateProjectPermissions) GetDeploymentCheckReRunFromProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *UpdateProjectPermissions) GetDeploymentProductionGit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *UpdateProjectPermissions) GetDeploymentV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentV0
}

func (o *UpdateProjectPermissions) GetDeploymentPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *UpdateProjectPermissions) GetDeploymentPrivate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *UpdateProjectPermissions) GetDeploymentPromote() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *UpdateProjectPermissions) GetDeploymentRollback() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *UpdateProjectPermissions) GetEnvironments() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *UpdateProjectPermissions) GetLogs() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *UpdateProjectPermissions) GetLogsPreset() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *UpdateProjectPermissions) GetPasswordProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectPermissions) GetOptionsAllowlist() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectPermissions) GetJob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *UpdateProjectPermissions) GetObservabilityData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityData
}

func (o *UpdateProjectPermissions) GetProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *UpdateProjectPermissions) GetProjectFromV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFromV0
}

func (o *UpdateProjectPermissions) GetProjectAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *UpdateProjectPermissions) GetProjectAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *UpdateProjectPermissions) GetProjectDeploymentHook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *UpdateProjectPermissions) GetProjectDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *UpdateProjectPermissions) GetProjectDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *UpdateProjectPermissions) GetProjectDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *UpdateProjectPermissions) GetProjectEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *UpdateProjectPermissions) GetProjectEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *UpdateProjectPermissions) GetProjectEnvVarsUnownedByIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *UpdateProjectPermissions) GetProjectFlags() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFlags
}

func (o *UpdateProjectPermissions) GetProjectID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectPermissions) GetProjectIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *UpdateProjectPermissions) GetProjectLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *UpdateProjectPermissions) GetProjectMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *UpdateProjectPermissions) GetProjectMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *UpdateProjectPermissions) GetProjectPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *UpdateProjectPermissions) GetProjectProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *UpdateProjectPermissions) GetProjectTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *UpdateProjectPermissions) GetProjectTransferOut() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *UpdateProjectPermissions) GetProjectProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *UpdateProjectPermissions) GetProjectUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *UpdateProjectPermissions) GetProjectAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *UpdateProjectPermissions) GetProjectSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *UpdateProjectPermissions) GetProjectSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *UpdateProjectPermissions) GetProjectDeploymentExpiration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *UpdateProjectPermissions) GetProjectRollingRelease() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectRollingRelease
}

func (o *UpdateProjectPermissions) GetProjectTier() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTier
}

func (o *UpdateProjectPermissions) GetSeawallConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *UpdateProjectPermissions) GetSkewProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *UpdateProjectPermissions) GetAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectPermissions) GetTrustedIps() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectPermissions) GetWebAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectPermissions) GetSharedEnvVarConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *UpdateProjectPermissions) GetSonar() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Sonar
}

type UpdateProjectLastRollbackTarget struct {
}

type UpdateProjectJobStatus string

const (
	UpdateProjectJobStatusSucceeded  UpdateProjectJobStatus = "succeeded"
	UpdateProjectJobStatusFailed     UpdateProjectJobStatus = "failed"
	UpdateProjectJobStatusSkipped    UpdateProjectJobStatus = "skipped"
	UpdateProjectJobStatusPending    UpdateProjectJobStatus = "pending"
	UpdateProjectJobStatusInProgress UpdateProjectJobStatus = "in-progress"
)

func (e UpdateProjectJobStatus) ToPointer() *UpdateProjectJobStatus {
	return &e
}
func (e *UpdateProjectJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = UpdateProjectJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectJobStatus: %v", v)
	}
}

type UpdateProjectProjectsResponse200Type string

const (
	UpdateProjectProjectsResponse200TypePromote  UpdateProjectProjectsResponse200Type = "promote"
	UpdateProjectProjectsResponse200TypeRollback UpdateProjectProjectsResponse200Type = "rollback"
)

func (e UpdateProjectProjectsResponse200Type) ToPointer() *UpdateProjectProjectsResponse200Type {
	return &e
}
func (e *UpdateProjectProjectsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = UpdateProjectProjectsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200Type: %v", v)
	}
}

type UpdateProjectLastAliasRequest struct {
	FromDeploymentID string                               `json:"fromDeploymentId"`
	ToDeploymentID   string                               `json:"toDeploymentId"`
	JobStatus        UpdateProjectJobStatus               `json:"jobStatus"`
	RequestedAt      float64                              `json:"requestedAt"`
	Type             UpdateProjectProjectsResponse200Type `json:"type"`
}

func (o *UpdateProjectLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *UpdateProjectLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *UpdateProjectLastAliasRequest) GetJobStatus() UpdateProjectJobStatus {
	if o == nil {
		return UpdateProjectJobStatus("")
	}
	return o.JobStatus
}

func (o *UpdateProjectLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *UpdateProjectLastAliasRequest) GetType() UpdateProjectProjectsResponse200Type {
	if o == nil {
		return UpdateProjectProjectsResponse200Type("")
	}
	return o.Type
}

type UpdateProjectScope string

const (
	UpdateProjectScopeAutomationBypass UpdateProjectScope = "automation-bypass"
)

func (e UpdateProjectScope) ToPointer() *UpdateProjectScope {
	return &e
}
func (e *UpdateProjectScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = UpdateProjectScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectScope: %v", v)
	}
}

type UpdateProjectProtectionBypass struct {
	CreatedAt float64            `json:"createdAt"`
	CreatedBy string             `json:"createdBy"`
	Scope     UpdateProjectScope `json:"scope"`
}

func (o *UpdateProjectProtectionBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectProtectionBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectProtectionBypass) GetScope() UpdateProjectScope {
	if o == nil {
		return UpdateProjectScope("")
	}
	return o.Scope
}

type UpdateProjectTrustedIpsProjectsDeploymentType string

const (
	UpdateProjectTrustedIpsProjectsDeploymentTypeProduction                       UpdateProjectTrustedIpsProjectsDeploymentType = "production"
	UpdateProjectTrustedIpsProjectsDeploymentTypePreview                          UpdateProjectTrustedIpsProjectsDeploymentType = "preview"
	UpdateProjectTrustedIpsProjectsDeploymentTypeAll                              UpdateProjectTrustedIpsProjectsDeploymentType = "all"
	UpdateProjectTrustedIpsProjectsDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectTrustedIpsProjectsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectTrustedIpsProjectsDeploymentType) ToPointer() *UpdateProjectTrustedIpsProjectsDeploymentType {
	return &e
}
func (e *UpdateProjectTrustedIpsProjectsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectTrustedIpsProjectsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTrustedIpsProjectsDeploymentType: %v", v)
	}
}

type UpdateProjectTrustedIps2 struct {
	DeploymentType UpdateProjectTrustedIpsProjectsDeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectTrustedIps2) GetDeploymentType() UpdateProjectTrustedIpsProjectsDeploymentType {
	if o == nil {
		return UpdateProjectTrustedIpsProjectsDeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectTrustedIpsDeploymentType string

const (
	UpdateProjectTrustedIpsDeploymentTypeProduction                       UpdateProjectTrustedIpsDeploymentType = "production"
	UpdateProjectTrustedIpsDeploymentTypePreview                          UpdateProjectTrustedIpsDeploymentType = "preview"
	UpdateProjectTrustedIpsDeploymentTypeAll                              UpdateProjectTrustedIpsDeploymentType = "all"
	UpdateProjectTrustedIpsDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectTrustedIpsDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectTrustedIpsDeploymentType) ToPointer() *UpdateProjectTrustedIpsDeploymentType {
	return &e
}
func (e *UpdateProjectTrustedIpsDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectTrustedIpsDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTrustedIpsDeploymentType: %v", v)
	}
}

type UpdateProjectTrustedIpsAddresses struct {
	Value string  `json:"value"`
	Note  *string `json:"note,omitempty"`
}

func (o *UpdateProjectTrustedIpsAddresses) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateProjectTrustedIpsAddresses) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

type UpdateProjectTrustedIpsProtectionMode string

const (
	UpdateProjectTrustedIpsProtectionModeAdditional UpdateProjectTrustedIpsProtectionMode = "additional"
	UpdateProjectTrustedIpsProtectionModeExclusive  UpdateProjectTrustedIpsProtectionMode = "exclusive"
)

func (e UpdateProjectTrustedIpsProtectionMode) ToPointer() *UpdateProjectTrustedIpsProtectionMode {
	return &e
}
func (e *UpdateProjectTrustedIpsProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = UpdateProjectTrustedIpsProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTrustedIpsProtectionMode: %v", v)
	}
}

type UpdateProjectTrustedIps1 struct {
	DeploymentType UpdateProjectTrustedIpsDeploymentType `json:"deploymentType"`
	Addresses      []UpdateProjectTrustedIpsAddresses    `json:"addresses"`
	ProtectionMode UpdateProjectTrustedIpsProtectionMode `json:"protectionMode"`
}

func (o *UpdateProjectTrustedIps1) GetDeploymentType() UpdateProjectTrustedIpsDeploymentType {
	if o == nil {
		return UpdateProjectTrustedIpsDeploymentType("")
	}
	return o.DeploymentType
}

func (o *UpdateProjectTrustedIps1) GetAddresses() []UpdateProjectTrustedIpsAddresses {
	if o == nil {
		return []UpdateProjectTrustedIpsAddresses{}
	}
	return o.Addresses
}

func (o *UpdateProjectTrustedIps1) GetProtectionMode() UpdateProjectTrustedIpsProtectionMode {
	if o == nil {
		return UpdateProjectTrustedIpsProtectionMode("")
	}
	return o.ProtectionMode
}

type UpdateProjectTrustedIpsType string

const (
	UpdateProjectTrustedIpsTypeUpdateProjectTrustedIps1 UpdateProjectTrustedIpsType = "updateProject_trustedIps_1"
	UpdateProjectTrustedIpsTypeUpdateProjectTrustedIps2 UpdateProjectTrustedIpsType = "updateProject_trustedIps_2"
)

type UpdateProjectTrustedIps struct {
	UpdateProjectTrustedIps1 *UpdateProjectTrustedIps1
	UpdateProjectTrustedIps2 *UpdateProjectTrustedIps2

	Type UpdateProjectTrustedIpsType
}

func CreateUpdateProjectTrustedIpsUpdateProjectTrustedIps1(updateProjectTrustedIps1 UpdateProjectTrustedIps1) UpdateProjectTrustedIps {
	typ := UpdateProjectTrustedIpsTypeUpdateProjectTrustedIps1

	return UpdateProjectTrustedIps{
		UpdateProjectTrustedIps1: &updateProjectTrustedIps1,
		Type:                     typ,
	}
}

func CreateUpdateProjectTrustedIpsUpdateProjectTrustedIps2(updateProjectTrustedIps2 UpdateProjectTrustedIps2) UpdateProjectTrustedIps {
	typ := UpdateProjectTrustedIpsTypeUpdateProjectTrustedIps2

	return UpdateProjectTrustedIps{
		UpdateProjectTrustedIps2: &updateProjectTrustedIps2,
		Type:                     typ,
	}
}

func (u *UpdateProjectTrustedIps) UnmarshalJSON(data []byte) error {

	var updateProjectTrustedIps2 UpdateProjectTrustedIps2 = UpdateProjectTrustedIps2{}
	if err := utils.UnmarshalJSON(data, &updateProjectTrustedIps2, "", true, true); err == nil {
		u.UpdateProjectTrustedIps2 = &updateProjectTrustedIps2
		u.Type = UpdateProjectTrustedIpsTypeUpdateProjectTrustedIps2
		return nil
	}

	var updateProjectTrustedIps1 UpdateProjectTrustedIps1 = UpdateProjectTrustedIps1{}
	if err := utils.UnmarshalJSON(data, &updateProjectTrustedIps1, "", true, true); err == nil {
		u.UpdateProjectTrustedIps1 = &updateProjectTrustedIps1
		u.Type = UpdateProjectTrustedIpsTypeUpdateProjectTrustedIps1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectTrustedIps", string(data))
}

func (u UpdateProjectTrustedIps) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectTrustedIps1 != nil {
		return utils.MarshalJSON(u.UpdateProjectTrustedIps1, "", true)
	}

	if u.UpdateProjectTrustedIps2 != nil {
		return utils.MarshalJSON(u.UpdateProjectTrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectTrustedIps: all fields are null")
}

type UpdateProjectGitComments struct {
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
}

func (o *UpdateProjectGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

func (o *UpdateProjectGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

// UpdateProjectCreateDeployments - Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
type UpdateProjectCreateDeployments string

const (
	UpdateProjectCreateDeploymentsEnabled  UpdateProjectCreateDeployments = "enabled"
	UpdateProjectCreateDeploymentsDisabled UpdateProjectCreateDeployments = "disabled"
)

func (e UpdateProjectCreateDeployments) ToPointer() *UpdateProjectCreateDeployments {
	return &e
}
func (e *UpdateProjectCreateDeployments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = UpdateProjectCreateDeployments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectCreateDeployments: %v", v)
	}
}

type UpdateProjectGitProviderOptions struct {
	// Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
	CreateDeployments UpdateProjectCreateDeployments `json:"createDeployments"`
}

func (o *UpdateProjectGitProviderOptions) GetCreateDeployments() UpdateProjectCreateDeployments {
	if o == nil {
		return UpdateProjectCreateDeployments("")
	}
	return o.CreateDeployments
}

type UpdateProjectWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *UpdateProjectWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type UpdateProjectSrc2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectSrc2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectSrc2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectSrc2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectSrc2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectSrc2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectSrc2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectSrc2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectSrc2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectSrc2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectSrc2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectSrc2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectSrcType string

const (
	UpdateProjectSrcTypeStr               UpdateProjectSrcType = "str"
	UpdateProjectSrcTypeUpdateProjectSrc2 UpdateProjectSrcType = "updateProject_src_2"
)

type UpdateProjectSrc struct {
	Str               *string
	UpdateProjectSrc2 *UpdateProjectSrc2

	Type UpdateProjectSrcType
}

func CreateUpdateProjectSrcStr(str string) UpdateProjectSrc {
	typ := UpdateProjectSrcTypeStr

	return UpdateProjectSrc{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectSrcUpdateProjectSrc2(updateProjectSrc2 UpdateProjectSrc2) UpdateProjectSrc {
	typ := UpdateProjectSrcTypeUpdateProjectSrc2

	return UpdateProjectSrc{
		UpdateProjectSrc2: &updateProjectSrc2,
		Type:              typ,
	}
}

func (u *UpdateProjectSrc) UnmarshalJSON(data []byte) error {

	var updateProjectSrc2 UpdateProjectSrc2 = UpdateProjectSrc2{}
	if err := utils.UnmarshalJSON(data, &updateProjectSrc2, "", true, true); err == nil {
		u.UpdateProjectSrc2 = &updateProjectSrc2
		u.Type = UpdateProjectSrcTypeUpdateProjectSrc2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectSrcTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectSrc", string(data))
}

func (u UpdateProjectSrc) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectSrc2 != nil {
		return utils.MarshalJSON(u.UpdateProjectSrc2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectSrc: all fields are null")
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypePath               UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "path"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHost               UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "host"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeMethod             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "method"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeHeader             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "header"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeCookie             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "cookie"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeQuery              UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "query"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeIPAddress          UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "ip_address"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeProtocol           UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "protocol"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeScheme             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "scheme"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeEnvironment        UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "environment"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeRegion             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "region"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityTypeInitialRequestPath UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType = "initial_request_path"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType: %v", v)
	}
}

type UpdateProjectValue2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectValue2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectValue2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectValue2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectValue2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectValue2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectValue2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectValue2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectValue2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectValue2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectValue2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectValue2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectValueType string

const (
	UpdateProjectValueTypeStr                 UpdateProjectValueType = "str"
	UpdateProjectValueTypeUpdateProjectValue2 UpdateProjectValueType = "updateProject_value_2"
)

type UpdateProjectValue struct {
	Str                 *string
	UpdateProjectValue2 *UpdateProjectValue2

	Type UpdateProjectValueType
}

func CreateUpdateProjectValueStr(str string) UpdateProjectValue {
	typ := UpdateProjectValueTypeStr

	return UpdateProjectValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectValueUpdateProjectValue2(updateProjectValue2 UpdateProjectValue2) UpdateProjectValue {
	typ := UpdateProjectValueTypeUpdateProjectValue2

	return UpdateProjectValue{
		UpdateProjectValue2: &updateProjectValue2,
		Type:                typ,
	}
}

func (u *UpdateProjectValue) UnmarshalJSON(data []byte) error {

	var updateProjectValue2 UpdateProjectValue2 = UpdateProjectValue2{}
	if err := utils.UnmarshalJSON(data, &updateProjectValue2, "", true, true); err == nil {
		u.UpdateProjectValue2 = &updateProjectValue2
		u.Type = UpdateProjectValueTypeUpdateProjectValue2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectValue", string(data))
}

func (u UpdateProjectValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectValue2 != nil {
		return utils.MarshalJSON(u.UpdateProjectValue2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectValue: all fields are null")
}

type UpdateProjectHas struct {
	Type  UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType `json:"type"`
	Key   *string                                                                 `json:"key,omitempty"`
	Value *UpdateProjectValue                                                     `json:"value,omitempty"`
}

func (o *UpdateProjectHas) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType("")
	}
	return o.Type
}

func (o *UpdateProjectHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectHas) GetValue() *UpdateProjectValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType string

const (
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypePath               UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "path"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHost               UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "host"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeMethod             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "method"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeHeader             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "header"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeCookie             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "cookie"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeQuery              UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "query"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeIPAddress          UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "ip_address"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeProtocol           UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "protocol"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeScheme             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "scheme"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeEnvironment        UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "environment"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeRegion             UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "region"
	UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesTypeInitialRequestPath UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType = "initial_request_path"
)

func (e UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) ToPointer() *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	return &e
}
func (e *UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType: %v", v)
	}
}

type UpdateProjectValueProjects2 struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectValueProjects2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectValueProjects2) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectValueProjects2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectValueProjects2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectValueProjects2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectValueProjects2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectValueProjects2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectValueProjects2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectValueProjects2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectValueProjects2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectValueProjects2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectProjectsValueType string

const (
	UpdateProjectProjectsValueTypeStr                         UpdateProjectProjectsValueType = "str"
	UpdateProjectProjectsValueTypeUpdateProjectValueProjects2 UpdateProjectProjectsValueType = "updateProject_value_projects_2"
)

type UpdateProjectProjectsValue struct {
	Str                         *string
	UpdateProjectValueProjects2 *UpdateProjectValueProjects2

	Type UpdateProjectProjectsValueType
}

func CreateUpdateProjectProjectsValueStr(str string) UpdateProjectProjectsValue {
	typ := UpdateProjectProjectsValueTypeStr

	return UpdateProjectProjectsValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectProjectsValueUpdateProjectValueProjects2(updateProjectValueProjects2 UpdateProjectValueProjects2) UpdateProjectProjectsValue {
	typ := UpdateProjectProjectsValueTypeUpdateProjectValueProjects2

	return UpdateProjectProjectsValue{
		UpdateProjectValueProjects2: &updateProjectValueProjects2,
		Type:                        typ,
	}
}

func (u *UpdateProjectProjectsValue) UnmarshalJSON(data []byte) error {

	var updateProjectValueProjects2 UpdateProjectValueProjects2 = UpdateProjectValueProjects2{}
	if err := utils.UnmarshalJSON(data, &updateProjectValueProjects2, "", true, true); err == nil {
		u.UpdateProjectValueProjects2 = &updateProjectValueProjects2
		u.Type = UpdateProjectProjectsValueTypeUpdateProjectValueProjects2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectProjectsValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectProjectsValue", string(data))
}

func (u UpdateProjectProjectsValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectValueProjects2 != nil {
		return utils.MarshalJSON(u.UpdateProjectValueProjects2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectProjectsValue: all fields are null")
}

type UpdateProjectMissing struct {
	Type  UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType `json:"type"`
	Key   *string                                                                               `json:"key,omitempty"`
	Value *UpdateProjectProjectsValue                                                           `json:"value,omitempty"`
}

func (o *UpdateProjectMissing) GetType() UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
	if o == nil {
		return UpdateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType("")
	}
	return o.Type
}

func (o *UpdateProjectMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectMissing) GetValue() *UpdateProjectProjectsValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectHandle string

const (
	UpdateProjectHandleInit     UpdateProjectHandle = "init"
	UpdateProjectHandleFinalize UpdateProjectHandle = "finalize"
)

func (e UpdateProjectHandle) ToPointer() *UpdateProjectHandle {
	return &e
}
func (e *UpdateProjectHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = UpdateProjectHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectHandle: %v", v)
	}
}

type UpdateProjectProjectsAction string

const (
	UpdateProjectProjectsActionDeny      UpdateProjectProjectsAction = "deny"
	UpdateProjectProjectsActionChallenge UpdateProjectProjectsAction = "challenge"
	UpdateProjectProjectsActionLog       UpdateProjectProjectsAction = "log"
	UpdateProjectProjectsActionBypass    UpdateProjectProjectsAction = "bypass"
	UpdateProjectProjectsActionRateLimit UpdateProjectProjectsAction = "rate_limit"
	UpdateProjectProjectsActionRedirect  UpdateProjectProjectsAction = "redirect"
)

func (e UpdateProjectProjectsAction) ToPointer() *UpdateProjectProjectsAction {
	return &e
}
func (e *UpdateProjectProjectsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = UpdateProjectProjectsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsAction: %v", v)
	}
}

type UpdateProjectAlgo string

const (
	UpdateProjectAlgoFixedWindow UpdateProjectAlgo = "fixed_window"
	UpdateProjectAlgoTokenBucket UpdateProjectAlgo = "token_bucket"
)

func (e UpdateProjectAlgo) ToPointer() *UpdateProjectAlgo {
	return &e
}
func (e *UpdateProjectAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = UpdateProjectAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectAlgo: %v", v)
	}
}

type UpdateProjectErl struct {
	Algo   UpdateProjectAlgo `json:"algo"`
	Window float64           `json:"window"`
	Limit  float64           `json:"limit"`
	Keys   []string          `json:"keys"`
}

func (o *UpdateProjectErl) GetAlgo() UpdateProjectAlgo {
	if o == nil {
		return UpdateProjectAlgo("")
	}
	return o.Algo
}

func (o *UpdateProjectErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *UpdateProjectErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *UpdateProjectErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

type UpdateProjectMitigate struct {
	Action UpdateProjectProjectsAction `json:"action"`
	RuleID string                      `json:"rule_id"`
	TTL    *float64                    `json:"ttl,omitempty"`
	Erl    *UpdateProjectErl           `json:"erl,omitempty"`
}

func (o *UpdateProjectMitigate) GetAction() UpdateProjectProjectsAction {
	if o == nil {
		return UpdateProjectProjectsAction("")
	}
	return o.Action
}

func (o *UpdateProjectMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *UpdateProjectMitigate) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *UpdateProjectMitigate) GetErl() *UpdateProjectErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

type UpdateProjectFirewallRoutes struct {
	Src      *UpdateProjectSrc      `json:"src,omitempty"`
	Has      []UpdateProjectHas     `json:"has,omitempty"`
	Missing  []UpdateProjectMissing `json:"missing,omitempty"`
	Dest     *string                `json:"dest,omitempty"`
	Status   *float64               `json:"status,omitempty"`
	Handle   *UpdateProjectHandle   `json:"handle,omitempty"`
	Mitigate *UpdateProjectMitigate `json:"mitigate,omitempty"`
}

func (o *UpdateProjectFirewallRoutes) GetSrc() *UpdateProjectSrc {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectFirewallRoutes) GetHas() []UpdateProjectHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *UpdateProjectFirewallRoutes) GetMissing() []UpdateProjectMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *UpdateProjectFirewallRoutes) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *UpdateProjectFirewallRoutes) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateProjectFirewallRoutes) GetHandle() *UpdateProjectHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *UpdateProjectFirewallRoutes) GetMitigate() *UpdateProjectMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type UpdateProjectAction string

const (
	UpdateProjectActionDeny      UpdateProjectAction = "deny"
	UpdateProjectActionChallenge UpdateProjectAction = "challenge"
	UpdateProjectActionLog       UpdateProjectAction = "log"
)

func (e UpdateProjectAction) ToPointer() *UpdateProjectAction {
	return &e
}
func (e *UpdateProjectAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = UpdateProjectAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectAction: %v", v)
	}
}

type UpdateProjectManagedRules struct {
	Active bool                 `json:"active"`
	Action *UpdateProjectAction `json:"action,omitempty"`
}

func (o *UpdateProjectManagedRules) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateProjectManagedRules) GetAction() *UpdateProjectAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type UpdateProjectSecurity struct {
	AttackModeEnabled      *bool                                `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                             `json:"attackModeUpdatedAt,omitempty"`
	FirewallEnabled        *bool                                `json:"firewallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                             `json:"firewallUpdatedAt,omitempty"`
	AttackModeActiveUntil  *float64                             `json:"attackModeActiveUntil,omitempty"`
	FirewallConfigVersion  *float64                             `json:"firewallConfigVersion,omitempty"`
	FirewallRoutes         []UpdateProjectFirewallRoutes        `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                                `json:"firewallSeawallEnabled,omitempty"`
	Ja3Enabled             *bool                                `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                                `json:"ja4Enabled,omitempty"`
	FirewallBypassIps      []string                             `json:"firewallBypassIps,omitempty"`
	ManagedRules           map[string]UpdateProjectManagedRules `json:"managedRules,omitempty"`
}

func (o *UpdateProjectSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *UpdateProjectSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *UpdateProjectSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *UpdateProjectSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *UpdateProjectSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *UpdateProjectSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *UpdateProjectSecurity) GetFirewallRoutes() []UpdateProjectFirewallRoutes {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *UpdateProjectSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *UpdateProjectSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *UpdateProjectSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

func (o *UpdateProjectSecurity) GetFirewallBypassIps() []string {
	if o == nil {
		return nil
	}
	return o.FirewallBypassIps
}

func (o *UpdateProjectSecurity) GetManagedRules() map[string]UpdateProjectManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

// UpdateProjectProjectsIssuerMode - - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
type UpdateProjectProjectsIssuerMode string

const (
	UpdateProjectProjectsIssuerModeTeam   UpdateProjectProjectsIssuerMode = "team"
	UpdateProjectProjectsIssuerModeGlobal UpdateProjectProjectsIssuerMode = "global"
)

func (e UpdateProjectProjectsIssuerMode) ToPointer() *UpdateProjectProjectsIssuerMode {
	return &e
}
func (e *UpdateProjectProjectsIssuerMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = UpdateProjectProjectsIssuerMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsIssuerMode: %v", v)
	}
}

type UpdateProjectProjectsOidcTokenConfig struct {
	Enabled bool `json:"enabled"`
	// - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
	IssuerMode *UpdateProjectProjectsIssuerMode `json:"issuerMode,omitempty"`
}

func (o *UpdateProjectProjectsOidcTokenConfig) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *UpdateProjectProjectsOidcTokenConfig) GetIssuerMode() *UpdateProjectProjectsIssuerMode {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

type UpdateProjectTier string

const (
	UpdateProjectTierStandard UpdateProjectTier = "standard"
	UpdateProjectTierAdvanced UpdateProjectTier = "advanced"
	UpdateProjectTierCritical UpdateProjectTier = "critical"
)

func (e UpdateProjectTier) ToPointer() *UpdateProjectTier {
	return &e
}
func (e *UpdateProjectTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "advanced":
		fallthrough
	case "critical":
		*e = UpdateProjectTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTier: %v", v)
	}
}

// UpdateProjectResponseBody - The project was successfully updated
type UpdateProjectResponseBody struct {
	AccountID                            string                                   `json:"accountId"`
	Analytics                            *UpdateProjectAnalytics                  `json:"analytics,omitempty"`
	SpeedInsights                        *UpdateProjectSpeedInsights              `json:"speedInsights,omitempty"`
	AutoExposeSystemEnvs                 *bool                                    `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains              *bool                                    `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy     *string                                  `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	BuildCommand                         *string                                  `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep          *string                                  `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectConfigurationID               *string                                  `json:"connectConfigurationId,omitempty"`
	ConnectBuildsEnabled                 *bool                                    `json:"connectBuildsEnabled,omitempty"`
	CreatedAt                            *float64                                 `json:"createdAt,omitempty"`
	CustomerSupportCodeVisibility        *bool                                    `json:"customerSupportCodeVisibility,omitempty"`
	Crons                                *UpdateProjectCrons                      `json:"crons,omitempty"`
	DataCache                            *UpdateProjectDataCache                  `json:"dataCache,omitempty"`
	DeploymentExpiration                 *UpdateProjectDeploymentExpiration       `json:"deploymentExpiration,omitempty"`
	DevCommand                           *string                                  `json:"devCommand,omitempty"`
	DirectoryListing                     bool                                     `json:"directoryListing"`
	InstallCommand                       *string                                  `json:"installCommand,omitempty"`
	Env                                  []UpdateProjectEnv                       `json:"env,omitempty"`
	CustomEnvironments                   []UpdateProjectCustomEnvironments        `json:"customEnvironments,omitempty"`
	Framework                            *UpdateProjectProjectsFramework          `json:"framework,omitempty"`
	GitForkProtection                    *bool                                    `json:"gitForkProtection,omitempty"`
	GitLFS                               *bool                                    `json:"gitLFS,omitempty"`
	ID                                   string                                   `json:"id"`
	IPBuckets                            []UpdateProjectIPBuckets                 `json:"ipBuckets,omitempty"`
	LatestDeployments                    []UpdateProjectLatestDeployments         `json:"latestDeployments,omitempty"`
	Link                                 *UpdateProjectLink                       `json:"link,omitempty"`
	Microfrontends                       *UpdateProjectMicrofrontends             `json:"microfrontends,omitempty"`
	Name                                 string                                   `json:"name"`
	NodeVersion                          UpdateProjectProjectsNodeVersion         `json:"nodeVersion"`
	OptionsAllowlist                     *UpdateProjectOptionsAllowlist           `json:"optionsAllowlist,omitempty"`
	OutputDirectory                      *string                                  `json:"outputDirectory,omitempty"`
	PassiveConnectConfigurationID        *string                                  `json:"passiveConnectConfigurationId,omitempty"`
	PasswordProtection                   *UpdateProjectPasswordProtection         `json:"passwordProtection,omitempty"`
	ProductionDeploymentsFastLane        *bool                                    `json:"productionDeploymentsFastLane,omitempty"`
	PublicSource                         *bool                                    `json:"publicSource,omitempty"`
	ResourceConfig                       UpdateProjectResourceConfig              `json:"resourceConfig"`
	RollingRelease                       *UpdateProjectRollingRelease             `json:"rollingRelease,omitempty"`
	DefaultResourceConfig                UpdateProjectDefaultResourceConfig       `json:"defaultResourceConfig"`
	RootDirectory                        *string                                  `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion             *string                                  `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                    `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                 `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                 `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                    `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                    `json:"sourceFilesOutsideRootDirectory,omitempty"`
	EnableAffectedProjectsDeployments    *bool                                    `json:"enableAffectedProjectsDeployments,omitempty"`
	SsoProtection                        *UpdateProjectSsoProtection              `json:"ssoProtection,omitempty"`
	Targets                              map[string]*UpdateProjectTargets         `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                 `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                 `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                  `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                  `json:"transferredFromAccountId,omitempty"`
	UpdatedAt                            *float64                                 `json:"updatedAt,omitempty"`
	Live                                 *bool                                    `json:"live,omitempty"`
	EnablePreviewFeedback                *bool                                    `json:"enablePreviewFeedback,omitempty"`
	EnableProductionFeedback             *bool                                    `json:"enableProductionFeedback,omitempty"`
	Permissions                          *UpdateProjectPermissions                `json:"permissions,omitempty"`
	LastRollbackTarget                   *UpdateProjectLastRollbackTarget         `json:"lastRollbackTarget,omitempty"`
	LastAliasRequest                     *UpdateProjectLastAliasRequest           `json:"lastAliasRequest,omitempty"`
	ProtectionBypass                     map[string]UpdateProjectProtectionBypass `json:"protectionBypass,omitempty"`
	HasActiveBranches                    *bool                                    `json:"hasActiveBranches,omitempty"`
	TrustedIps                           *UpdateProjectTrustedIps                 `json:"trustedIps,omitempty"`
	GitComments                          *UpdateProjectGitComments                `json:"gitComments,omitempty"`
	GitProviderOptions                   *UpdateProjectGitProviderOptions         `json:"gitProviderOptions,omitempty"`
	Paused                               *bool                                    `json:"paused,omitempty"`
	ConcurrencyBucketName                *string                                  `json:"concurrencyBucketName,omitempty"`
	WebAnalytics                         *UpdateProjectWebAnalytics               `json:"webAnalytics,omitempty"`
	Security                             *UpdateProjectSecurity                   `json:"security,omitempty"`
	OidcTokenConfig                      *UpdateProjectProjectsOidcTokenConfig    `json:"oidcTokenConfig,omitempty"`
	Tier                                 *UpdateProjectTier                       `json:"tier,omitempty"`
}

func (o *UpdateProjectResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *UpdateProjectResponseBody) GetAnalytics() *UpdateProjectAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectResponseBody) GetSpeedInsights() *UpdateProjectSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *UpdateProjectResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectResponseBody) GetCrons() *UpdateProjectCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *UpdateProjectResponseBody) GetDataCache() *UpdateProjectDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *UpdateProjectResponseBody) GetDeploymentExpiration() *UpdateProjectDeploymentExpiration {
	if o == nil {
		return nil
	}
	return o.DeploymentExpiration
}

func (o *UpdateProjectResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *UpdateProjectResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectResponseBody) GetEnv() []UpdateProjectEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateProjectResponseBody) GetCustomEnvironments() []UpdateProjectCustomEnvironments {
	if o == nil {
		return nil
	}
	return o.CustomEnvironments
}

func (o *UpdateProjectResponseBody) GetFramework() *UpdateProjectProjectsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectResponseBody) GetIPBuckets() []UpdateProjectIPBuckets {
	if o == nil {
		return nil
	}
	return o.IPBuckets
}

func (o *UpdateProjectResponseBody) GetLatestDeployments() []UpdateProjectLatestDeployments {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *UpdateProjectResponseBody) GetLink() *UpdateProjectLink {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *UpdateProjectResponseBody) GetMicrofrontends() *UpdateProjectMicrofrontends {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *UpdateProjectResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectResponseBody) GetNodeVersion() UpdateProjectProjectsNodeVersion {
	if o == nil {
		return UpdateProjectProjectsNodeVersion("")
	}
	return o.NodeVersion
}

func (o *UpdateProjectResponseBody) GetOptionsAllowlist() *UpdateProjectOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *UpdateProjectResponseBody) GetPasswordProtection() *UpdateProjectPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *UpdateProjectResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectResponseBody) GetResourceConfig() UpdateProjectResourceConfig {
	if o == nil {
		return UpdateProjectResourceConfig{}
	}
	return o.ResourceConfig
}

func (o *UpdateProjectResponseBody) GetRollingRelease() *UpdateProjectRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

func (o *UpdateProjectResponseBody) GetDefaultResourceConfig() UpdateProjectDefaultResourceConfig {
	if o == nil {
		return UpdateProjectDefaultResourceConfig{}
	}
	return o.DefaultResourceConfig
}

func (o *UpdateProjectResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *UpdateProjectResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *UpdateProjectResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *UpdateProjectResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectResponseBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *UpdateProjectResponseBody) GetSsoProtection() *UpdateProjectSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectResponseBody) GetTargets() map[string]*UpdateProjectTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *UpdateProjectResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *UpdateProjectResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *UpdateProjectResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *UpdateProjectResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *UpdateProjectResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *UpdateProjectResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectResponseBody) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *UpdateProjectResponseBody) GetPermissions() *UpdateProjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectResponseBody) GetLastRollbackTarget() *UpdateProjectLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *UpdateProjectResponseBody) GetLastAliasRequest() *UpdateProjectLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *UpdateProjectResponseBody) GetProtectionBypass() map[string]UpdateProjectProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *UpdateProjectResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *UpdateProjectResponseBody) GetTrustedIps() *UpdateProjectTrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectResponseBody) GetGitComments() *UpdateProjectGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *UpdateProjectResponseBody) GetGitProviderOptions() *UpdateProjectGitProviderOptions {
	if o == nil {
		return nil
	}
	return o.GitProviderOptions
}

func (o *UpdateProjectResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *UpdateProjectResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *UpdateProjectResponseBody) GetWebAnalytics() *UpdateProjectWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectResponseBody) GetSecurity() *UpdateProjectSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *UpdateProjectResponseBody) GetOidcTokenConfig() *UpdateProjectProjectsOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *UpdateProjectResponseBody) GetTier() *UpdateProjectTier {
	if o == nil {
		return nil
	}
	return o.Tier
}

type UpdateProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The project was successfully updated
	Object *UpdateProjectResponseBody
}

func (o *UpdateProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateProjectResponse) GetObject() *UpdateProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
