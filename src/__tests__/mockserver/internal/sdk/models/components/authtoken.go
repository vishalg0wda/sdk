// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type ScopesType string

const (
	ScopesTypeTeam ScopesType = "team"
)

func (e ScopesType) ToPointer() *ScopesType {
	return &e
}
func (e *ScopesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		*e = ScopesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScopesType: %v", v)
	}
}

type AuthTokenScopesOrigin string

const (
	AuthTokenScopesOriginSaml      AuthTokenScopesOrigin = "saml"
	AuthTokenScopesOriginGithub    AuthTokenScopesOrigin = "github"
	AuthTokenScopesOriginGitlab    AuthTokenScopesOrigin = "gitlab"
	AuthTokenScopesOriginBitbucket AuthTokenScopesOrigin = "bitbucket"
	AuthTokenScopesOriginEmail     AuthTokenScopesOrigin = "email"
	AuthTokenScopesOriginManual    AuthTokenScopesOrigin = "manual"
	AuthTokenScopesOriginPasskey   AuthTokenScopesOrigin = "passkey"
	AuthTokenScopesOriginOtp       AuthTokenScopesOrigin = "otp"
	AuthTokenScopesOriginSms       AuthTokenScopesOrigin = "sms"
	AuthTokenScopesOriginInvite    AuthTokenScopesOrigin = "invite"
)

func (e AuthTokenScopesOrigin) ToPointer() *AuthTokenScopesOrigin {
	return &e
}
func (e *AuthTokenScopesOrigin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "saml":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "email":
		fallthrough
	case "manual":
		fallthrough
	case "passkey":
		fallthrough
	case "otp":
		fallthrough
	case "sms":
		fallthrough
	case "invite":
		*e = AuthTokenScopesOrigin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthTokenScopesOrigin: %v", v)
	}
}

// Two - The access scopes granted to the token.
type Two struct {
	Type      ScopesType            `json:"type"`
	TeamID    string                `json:"teamId"`
	Origin    AuthTokenScopesOrigin `json:"origin"`
	CreatedAt float64               `json:"createdAt"`
	ExpiresAt *float64              `json:"expiresAt,omitempty"`
}

func (o *Two) GetType() ScopesType {
	if o == nil {
		return ScopesType("")
	}
	return o.Type
}

func (o *Two) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *Two) GetOrigin() AuthTokenScopesOrigin {
	if o == nil {
		return AuthTokenScopesOrigin("")
	}
	return o.Origin
}

func (o *Two) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *Two) GetExpiresAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

type AuthTokenScopesType string

const (
	AuthTokenScopesTypeUser AuthTokenScopesType = "user"
)

func (e AuthTokenScopesType) ToPointer() *AuthTokenScopesType {
	return &e
}
func (e *AuthTokenScopesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = AuthTokenScopesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthTokenScopesType: %v", v)
	}
}

// AuthTokenScopes1Origin - Possible multi-factor origins
type AuthTokenScopes1Origin string

const (
	AuthTokenScopes1OriginTotp         AuthTokenScopes1Origin = "totp"
	AuthTokenScopes1OriginWebauthn     AuthTokenScopes1Origin = "webauthn"
	AuthTokenScopes1OriginRecoveryCode AuthTokenScopes1Origin = "recovery-code"
)

func (e AuthTokenScopes1Origin) ToPointer() *AuthTokenScopes1Origin {
	return &e
}
func (e *AuthTokenScopes1Origin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "totp":
		fallthrough
	case "webauthn":
		fallthrough
	case "recovery-code":
		*e = AuthTokenScopes1Origin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthTokenScopes1Origin: %v", v)
	}
}

type Sudo struct {
	// Possible multi-factor origins
	Origin    AuthTokenScopes1Origin `json:"origin"`
	ExpiresAt float64                `json:"expiresAt"`
}

func (o *Sudo) GetOrigin() AuthTokenScopes1Origin {
	if o == nil {
		return AuthTokenScopes1Origin("")
	}
	return o.Origin
}

func (o *Sudo) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

type ScopesOrigin string

const (
	ScopesOriginSaml      ScopesOrigin = "saml"
	ScopesOriginGithub    ScopesOrigin = "github"
	ScopesOriginGitlab    ScopesOrigin = "gitlab"
	ScopesOriginBitbucket ScopesOrigin = "bitbucket"
	ScopesOriginEmail     ScopesOrigin = "email"
	ScopesOriginManual    ScopesOrigin = "manual"
	ScopesOriginPasskey   ScopesOrigin = "passkey"
	ScopesOriginOtp       ScopesOrigin = "otp"
	ScopesOriginSms       ScopesOrigin = "sms"
	ScopesOriginInvite    ScopesOrigin = "invite"
)

func (e ScopesOrigin) ToPointer() *ScopesOrigin {
	return &e
}
func (e *ScopesOrigin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "saml":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "email":
		fallthrough
	case "manual":
		fallthrough
	case "passkey":
		fallthrough
	case "otp":
		fallthrough
	case "sms":
		fallthrough
	case "invite":
		*e = ScopesOrigin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScopesOrigin: %v", v)
	}
}

// One - The access scopes granted to the token.
type One struct {
	Type      AuthTokenScopesType `json:"type"`
	Sudo      *Sudo               `json:"sudo,omitempty"`
	Origin    ScopesOrigin        `json:"origin"`
	CreatedAt float64             `json:"createdAt"`
	ExpiresAt *float64            `json:"expiresAt,omitempty"`
}

func (o *One) GetType() AuthTokenScopesType {
	if o == nil {
		return AuthTokenScopesType("")
	}
	return o.Type
}

func (o *One) GetSudo() *Sudo {
	if o == nil {
		return nil
	}
	return o.Sudo
}

func (o *One) GetOrigin() ScopesOrigin {
	if o == nil {
		return ScopesOrigin("")
	}
	return o.Origin
}

func (o *One) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *One) GetExpiresAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

type ScopesUnionType string

const (
	ScopesUnionTypeOne ScopesUnionType = "1"
	ScopesUnionTypeTwo ScopesUnionType = "2"
)

type Scopes struct {
	One *One
	Two *Two

	Type ScopesUnionType
}

func CreateScopesOne(one One) Scopes {
	typ := ScopesUnionTypeOne

	return Scopes{
		One:  &one,
		Type: typ,
	}
}

func CreateScopesTwo(two Two) Scopes {
	typ := ScopesUnionTypeTwo

	return Scopes{
		Two:  &two,
		Type: typ,
	}
}

func (u *Scopes) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = ScopesUnionTypeOne
		return nil
	}

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = ScopesUnionTypeTwo
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Scopes", string(data))
}

func (u Scopes) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type Scopes: all fields are null")
}

// AuthToken - Authentication token metadata.
type AuthToken struct {
	// The unique identifier of the token.
	ID string `json:"id"`
	// The human-readable name of the token.
	Name string `json:"name"`
	// The type of the token.
	Type string `json:"type"`
	// The origin of how the token was created.
	Origin *string `json:"origin,omitempty"`
	// The access scopes granted to the token.
	Scopes []Scopes `json:"scopes,omitempty"`
	// Timestamp (in milliseconds) of when the token expires.
	ExpiresAt *float64 `json:"expiresAt,omitempty"`
	// Timestamp (in milliseconds) of when the token was most recently used.
	ActiveAt float64 `json:"activeAt"`
	// Timestamp (in milliseconds) of when the token was created.
	CreatedAt float64 `json:"createdAt"`
}

func (o *AuthToken) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AuthToken) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AuthToken) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *AuthToken) GetOrigin() *string {
	if o == nil {
		return nil
	}
	return o.Origin
}

func (o *AuthToken) GetScopes() []Scopes {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *AuthToken) GetExpiresAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *AuthToken) GetActiveAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ActiveAt
}

func (o *AuthToken) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}
