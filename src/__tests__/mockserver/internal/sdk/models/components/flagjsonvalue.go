// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type FlagJSONValueType string

const (
	FlagJSONValueTypeStr                  FlagJSONValueType = "str"
	FlagJSONValueTypeNumber               FlagJSONValueType = "number"
	FlagJSONValueTypeBoolean              FlagJSONValueType = "boolean"
	FlagJSONValueTypeArrayOfFlagJSONValue FlagJSONValueType = "arrayOfFlagJSONValue"
	FlagJSONValueTypeMapOfFlagJSONValue   FlagJSONValueType = "mapOfFlagJSONValue"
)

type FlagJSONValue struct {
	Str                  *string
	Number               *float64
	Boolean              *bool
	ArrayOfFlagJSONValue []*FlagJSONValue
	MapOfFlagJSONValue   map[string]*FlagJSONValue

	Type FlagJSONValueType
}

func CreateFlagJSONValueStr(str string) FlagJSONValue {
	typ := FlagJSONValueTypeStr

	return FlagJSONValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateFlagJSONValueNumber(number float64) FlagJSONValue {
	typ := FlagJSONValueTypeNumber

	return FlagJSONValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateFlagJSONValueBoolean(boolean bool) FlagJSONValue {
	typ := FlagJSONValueTypeBoolean

	return FlagJSONValue{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateFlagJSONValueArrayOfFlagJSONValue(arrayOfFlagJSONValue []*FlagJSONValue) FlagJSONValue {
	typ := FlagJSONValueTypeArrayOfFlagJSONValue

	return FlagJSONValue{
		ArrayOfFlagJSONValue: arrayOfFlagJSONValue,
		Type:                 typ,
	}
}

func CreateFlagJSONValueMapOfFlagJSONValue(mapOfFlagJSONValue map[string]*FlagJSONValue) FlagJSONValue {
	typ := FlagJSONValueTypeMapOfFlagJSONValue

	return FlagJSONValue{
		MapOfFlagJSONValue: mapOfFlagJSONValue,
		Type:               typ,
	}
}

func (u *FlagJSONValue) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = FlagJSONValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = FlagJSONValueTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = FlagJSONValueTypeBoolean
		return nil
	}

	var arrayOfFlagJSONValue []*FlagJSONValue = []*FlagJSONValue{}
	if err := utils.UnmarshalJSON(data, &arrayOfFlagJSONValue, "", true, true); err == nil {
		u.ArrayOfFlagJSONValue = arrayOfFlagJSONValue
		u.Type = FlagJSONValueTypeArrayOfFlagJSONValue
		return nil
	}

	var mapOfFlagJSONValue map[string]*FlagJSONValue = map[string]*FlagJSONValue{}
	if err := utils.UnmarshalJSON(data, &mapOfFlagJSONValue, "", true, true); err == nil {
		u.MapOfFlagJSONValue = mapOfFlagJSONValue
		u.Type = FlagJSONValueTypeMapOfFlagJSONValue
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FlagJSONValue", string(data))
}

func (u FlagJSONValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfFlagJSONValue != nil {
		return utils.MarshalJSON(u.ArrayOfFlagJSONValue, "", true)
	}

	if u.MapOfFlagJSONValue != nil {
		return utils.MarshalJSON(u.MapOfFlagJSONValue, "", true)
	}

	return nil, errors.New("could not marshal union type FlagJSONValue: all fields are null")
}
